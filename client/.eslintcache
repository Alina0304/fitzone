[{"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js":"1","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js":"2","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js":"3","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js":"4","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js":"5","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js":"6","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js":"7","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js":"8","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js":"9","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js":"10","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js":"11","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js":"12","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js":"13","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js":"14","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js":"15","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js":"16","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js":"17"},{"size":159,"mtime":1610885525171,"results":"18","hashOfConfig":"19"},{"size":2167,"mtime":1613847978249,"results":"20","hashOfConfig":"19"},{"size":2230,"mtime":1614510393181,"results":"21","hashOfConfig":"19"},{"size":5453,"mtime":1613847451317,"results":"22","hashOfConfig":"19"},{"size":1069,"mtime":1612895741515,"results":"23","hashOfConfig":"19"},{"size":202,"mtime":1611136113590,"results":"24","hashOfConfig":"19"},{"size":229,"mtime":1613846582074,"results":"25","hashOfConfig":"19"},{"size":1084,"mtime":1613847690563,"results":"26","hashOfConfig":"19"},{"size":21056,"mtime":1615902550907,"results":"27","hashOfConfig":"19"},{"size":3003,"mtime":1615727738495,"results":"28","hashOfConfig":"19"},{"size":20504,"mtime":1615893116490,"results":"29","hashOfConfig":"19"},{"size":21749,"mtime":1615833912102,"results":"30","hashOfConfig":"19"},{"size":17303,"mtime":1615546820519,"results":"31","hashOfConfig":"19"},{"size":1327,"mtime":1613065739598,"results":"32","hashOfConfig":"19"},{"size":14075,"mtime":1614850400181,"results":"33","hashOfConfig":"19"},{"size":1813,"mtime":1613072944753,"results":"34","hashOfConfig":"19"},{"size":1534,"mtime":1613852708212,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"f5z9i0",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js",[],["81","82"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js",["83"],"import  React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'materialize-css'\r\nimport {useRoutes} from \"./routes\";\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {useAuth} from \"./hooks/auth.hook\";\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {Navbar} from \"./components/Navbar\";\r\nimport {Loader} from \"./components/Loader\";\r\nimport {Footer} from \"./components/Footer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nfunction App() {\r\n    const {token, login,role, logout, userId,ready}=useAuth()\r\n    console.log(token)\r\n    console.log('role1', role)\r\n    let isAuthenticated = !!token\r\n    console.log(isAuthenticated)\r\n    const routes = useRoutes(isAuthenticated)\r\n    if(!ready)\r\n    {\r\n        return <Loader />\r\n    }\r\nreturn(\r\n    <AuthContext.Provider value={{token, logout, login, userId, role, isAuthenticated}}>\r\n    <Router>\r\n        {isAuthenticated && <Navbar/>}\r\n        <div className='container'>\r\n            {routes}\r\n        </div>\r\n        <Footer/>\r\n    </Router>\r\n    </AuthContext.Provider>\r\n\r\n)\r\n}\r\nexport default App","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js",["84"],"import React from \"react\";\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\nimport {ClientPage} from \"./pages/ClientPage\"\r\nimport {TrenersPage} from \"./pages/TrenersPage\"\r\nimport {ZanytiyPage} from \"./pages/ZanytiyPage\";\r\nimport {NotAufPage} from \"./pages/NotAufPage\";\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {NoutingPersonalTrenPage} from \"./pages/NoutingPersonalTrenPage\";\r\n\r\n\r\nexport const useRoutes = isAuthenticated =>{\r\n    if(isAuthenticated){\r\n        return(\r\n            <Switch>\r\n                <Route path=\"/clientPage\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n\r\n                            <ClientPage userId={value.userId} role={value.role}/>\r\n                        }\r\n                    </AuthContext.Consumer>\r\n                </Route>\r\n\r\n                <Route path=\"/trenersPage\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n                            <TrenersPage role={value.role}/>\r\n                        }\r\n                    </AuthContext.Consumer>\r\n                    </Route>\r\n                <Route path=\"/zanytiyPage\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n                            <ZanytiyPage role={value.role}/>\r\n                        }\r\n                        </AuthContext.Consumer>\r\n                </Route>\r\n                <Route path=\"/noutingpt\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n                            <NoutingPersonalTrenPage userId={value.userId}/>\r\n                        }\r\n                        </AuthContext.Consumer>\r\n                </Route>\r\n\r\n            </Switch>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/login\" exact>\r\n                    <AuthPage />\r\n                </Route>\r\n                <Route path=\"/fitzone\" exact>\r\n                    <NotAufPage />\r\n                </Route>\r\n                <Route path=\"/\" exact>\r\n                    <NotAufPage />\r\n                </Route>\r\n\r\n            </Switch>\r\n        )\r\n    }\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js",["85"],"import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n       setLoading(true)\r\n        console.log(\"loading\", loading)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n           setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, request, error, clearError }\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js",["86"],"import {useState, useCallback, useEffect} from 'react'\r\n\r\n\r\nconst storageName='userData'\r\nexport const useAuth =()=>{\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId]=useState(null)\r\n    const [role, setUserRole]=useState(null)\r\n\r\n    const login = useCallback((jwtToken, id, role)=>{\r\n        console.log('token', token)\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setUserRole(role)\r\n        console.log('role', role)\r\n        localStorage.setItem(storageName, JSON.stringify({userId: id,token: jwtToken, role: role}))\r\n    }, [])\r\n    const logout =useCallback(()=>{\r\n        setToken(null)\r\n        setUserId(null)\r\n        setUserRole(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const data=JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n            login(data.token, data.userId, data.role)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return {login, logout, token, userId,ready, role}\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js",["87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js",["104","105","106","107","108","109"],"import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {Link as linkMaterial, AppBar,Container, Toolbar,IconButton,Box,Typography}from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nexport const Navbar = () =>{\r\n    const history=useHistory()\r\n    const auth=useContext(AuthContext)\r\n    const classes = useStyles();\r\n\r\n    const logoutHandler=event=>{\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/fitzone')\r\n\r\n    }\r\n    return (\r\n        <AppBar position='fixed'>\r\n        <Container fixed>\r\n            <Toolbar>\r\n                <IconButton edge='start' color=\"inherit\" aria-label='menu' className={classes.menuButton}>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}> Fitness\r\n                </Typography>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                        Личный кабинет\r\n                    </Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                </Box>\r\n                <Button component={Link} to=\"/\" color=\"inherit\" align=\"center\" onClick={logoutHandler}>Выйти</Button>\r\n\r\n\r\n            </Toolbar>\r\n        </Container>\r\n    </AppBar>\r\n\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js",["110","111","112","113","114","115","116","117","118","119","120","121"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {AppBar,Container, Toolbar, IconButton, Typography,Box,Paper,Grid,Card,CardMedia,CardContent, CardActions} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Loader} from \"../components/Loader\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    select:{\r\n        marginTop:theme.spacing(2)\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\n\r\nexport const TrenersPage = (props) => {\r\n    const {request,loading} = useHttp();\r\n    const curRole=props.role\r\n    const [trenerForm, setTrenerForm] = useState([{}])\r\n    const [name, setName]=useState()\r\n    const [stag, setStag]=useState()\r\n    const [phone, setPhone]=useState()\r\n    const [kategory, setKategory]=useState()\r\n    const [opisanie, setOpisanie]=useState()\r\n    const [citat, setCitat]=useState()\r\n    const [trener, setIdTrener]=useState()\r\n    const [state, setState] = useState({openModal: false, stationNumber: 1});\r\n    const [statePodrobno, setStatePodrobno] = React.useState({\r\n        openModalPodrobno: false,\r\n        stationNumber: 1,\r\n    });\r\n\r\n    const handleChangeName =(event) => {\r\n        setName(event.target.value)\r\n    };\r\n    const handleChangeStag = (event) => {\r\n        setStag(event.target.value);\r\n    };\r\n    const handleChangePhone =(event) => {\r\n        setPhone(event.target.value)\r\n    };\r\n    const handleChangeKategory =(event) => {\r\n        setKategory(event.target.value)\r\n    };\r\n    const handleChangeOpisanie =(event) => {\r\n        setOpisanie(event.target.value)\r\n    };\r\n    const handleChangeCitat =(event) => {\r\n        setCitat(event.target.value)\r\n    };\r\n\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setStatePodrobno({openModalPodrobno:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setStatePodrobno({openModalPodrobno:false,stationNumber: 1});\r\n    };\r\n\r\n    const handleClickOpen = async (name, stag, phone, kategory, opisanie, citat, trener) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'POST',{name, stag, phone, kategory, opisanie, citat, trener})\r\n            console.log(\"\",fetched)\r\n            handleClose()\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    const handleOpen = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n        setName(trenerForm[stationNumber-1].fio_trener)\r\n        setStag(trenerForm[stationNumber-1].stag)\r\n        setPhone(trenerForm[stationNumber-1].phone)\r\n        setKategory(trenerForm[stationNumber-1].kategory)\r\n        setOpisanie(trenerForm[stationNumber-1].opisanie)\r\n        setCitat(trenerForm[stationNumber-1].citat)\r\n        setIdTrener(stationNumber)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n        treners()\r\n    };\r\n    const treners = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Преобразование 1\", fetched.result[0].img)\r\n            setTrenerForm(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        treners()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n     return (\r\n        <main>\r\n            {loading && <Loader/>}\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color='primary'\r\n                                    component={Link} to=\"/noutingpt\">\r\n                                    Start now\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && trenerForm.length != 0 && (\r\n                    <>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        trenerForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <Typography> Стаж работы:\r\n                                            {card.stag}\r\n                                        </Typography>\r\n                                        <Typography> Контактные данные:\r\n                                            {card.phone}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\" onClick={handleClickOpenModal(card.idtrener)}>\r\n                                            Подробно\r\n                                        </Button>\r\n                                        <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={statePodrobno.openModalPodrobno}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                <div className={classes.rootAvatar}>\r\n                                                    <Avatar src={trenerForm[(statePodrobno.stationNumber)-1].img} />\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].fio_trener}\r\n                                                </div>\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].kategory}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].opisanie}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].citat}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                                <Button size=\"small\" color=\"primary\" onClick={handleOpen(card.idtrener)}>\r\n                                                    Редактировать\r\n                                                </Button>\r\n                                                <Dialog open={state.openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                                    <DialogTitle id=\"form-dialog-title\">Редактировать {trenerForm[(state.stationNumber)-1].fio_trener}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Редактировать тренера\r\n                                                        </DialogContentText>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangeName}\r\n                                                                    value={name}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"name\"\r\n                                                                    label=\"ФИО тренера\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].fio_trener}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangeStag}\r\n                                                                    value={stag}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"stag\"\r\n                                                                    label=\"Стаж работы\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].stag}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangePhone}\r\n                                                                    value={phone}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"phone\"\r\n                                                                    label=\"Контактный телефон\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].phone}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                            <NativeSelect className={classes.select}\r\n                                                                defaultValue={trenerForm[(state.stationNumber)-1].kategory}\r\n                                                                inputProps={{\r\n                                                                    id: 'kategory',\r\n                                                                }}\r\n                                                                onChange={handleChangeKategory}\r\n                                                            >\r\n                                                                {trenerForm.map((option) => (\r\n                                                                    <option value={option.kategory} key=\r\n                                                                        {option.idtrener}>\r\n                                                                        {option.kategory}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </NativeSelect>\r\n                                                        </div>\r\n\r\n                                                    </DialogContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Информация о тренере</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeOpisanie}\r\n                                                            aria-label=\"Информация о тренере\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={trenerForm[(state.stationNumber)-1].opisanie}\r\n                                                        />\r\n                                                    </FormControl>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Мотивация</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeCitat}\r\n                                                            aria-label=\"Мотивация\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={trenerForm[(state.stationNumber)-1].citat}\r\n                                                        />\r\n                                                    </FormControl>\r\n\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} color=\"primary\">\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                        <Button onClick={()=>handleClickOpen(name, stag, phone, kategory, opisanie, citat, trener)} color=\"primary\">\r\n                                                            {console.log('ZanForm',trenerForm[(state.stationNumber)-1])}\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js",["122","123","124","125","126","127","128","129","130"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography, Box} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Loader} from \"../components/Loader\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport moment from \"moment\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\nroot: {\r\n    flexGrow: 1\r\n},\r\nmenuButton: {\r\n    marginRight: theme.spacing(1)\r\n},\r\nButtons:{\r\n    position: \"center\"\r\n},\r\ntitle: {\r\n    flexGrow: 1\r\n},\r\n\r\nmainFeaturesPost: {\r\n    position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n},\r\noverlay: {\r\n    position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n},\r\nmainFeaturesPostContent: {\r\n    position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n},\r\ncardMedia: {\r\n    paddingTop: \"56.25%\"\r\n},\r\ncardContent: {\r\n    flexGrow: 1\r\n},\r\ncardGrid: {\r\n    marginTop: theme.spacing(4)\r\n},\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 100,\r\n    },\r\n\r\n\r\n}))\r\n\r\nexport const ZanytiyPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [zanytieForm, setZanytieForm] = useState([])\r\n    const curRole=props.role\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = useState({openModal: false, stationNumber: 1,});\r\n    const [statePodrobno, setStatePodrobno] = useState({openModalPodrobno: false, stationNumber: 1,});\r\n    const [name, setName]=useState()\r\n    const [number, setNumber]=useState()\r\n    const [trener, setTrener] = React.useState();\r\n    const [opisanie, setOpisanie] = React.useState();\r\n    const [opodrobno, setOpodrobno] = React.useState();\r\n    const [idzanytie, setIdZanytie] = React.useState();\r\n\r\n\r\n    const handleChangeName =(event) => {\r\n       setName(event.target.value)\r\n\r\n    };\r\n    const handleChangeNumber = (event) => {\r\n        setNumber(event.target.value);\r\n    };\r\n\r\n    const handleChangeTrener = (event) => {\r\n        setTrener(event.target.value);\r\n    };\r\n    const handleChangeOpisanie = (event) => {\r\n        setOpisanie(event.target.value);\r\n    };\r\n\r\n    const handleChangeOpodrobno = (event) => {\r\n        setOpodrobno(event.target.value);\r\n    };\r\n    const handleOpenPodrobno = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setStatePodrobno({openModalPodrobno:true,stationNumber: stationNumber});\r\n    };\r\n    const handleOpen = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n        setName(zanytieForm[stationNumber-1].nazvanie)\r\n        setNumber(zanytieForm[stationNumber-1].numberzal)\r\n        setSelectedDate(zanytieForm[stationNumber-1].datetime)\r\n        setTrener(zanytieForm[stationNumber-1].idtrenera)\r\n        setOpisanie(zanytieForm[stationNumber-1].opisanie)\r\n        setOpodrobno(zanytieForm[stationNumber-1].opisaniepodrobno)\r\n        setIdZanytie(stationNumber)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n        zanytie()\r\n    };\r\n    const handleClosePodrobno = () => {\r\n        setStatePodrobno({openModalPodrobno:false,stationNumber: 1});\r\n    };\r\n    const handleDateChange=(date)=>{\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n    const handleClickOpen = async (name, number, trener, opisanie, opisaniepodrobno, selectedDate, idzanytie) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request(`/api/zanytiy/zanytiyPage`, 'POST',{name, number, trener, opisanie, opisaniepodrobno, selectedDate, idzanytie})\r\n            console.log(\"\",fetched)\r\n            handleClose()\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n    const zanytie = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/zanytiy/zanytiyPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Выборка\",fetched.result[0].img)\r\n\r\n\r\n            setZanytieForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        zanytie()\r\n    }, [])\r\n    const classes = useStyles();\r\n    return(\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"outlined\" color='primary'>\r\n                                    Learn More\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && zanytieForm.length != 0 && (\r\n                    <>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        zanytieForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.opisanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            <AccessTimeIcon/>{moment(card.datetime).format(\"LLLL\")}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\" onClick={handleOpenPodrobno(card.idzanytie)}>\r\n                                            Подробно\r\n                                        </Button>\r\n                                        <Dialog onClose={handleClosePodrobno} aria-labelledby=\"customized-dialog-title\" open={statePodrobno.openModalPodrobno}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleClosePodrobno}>\r\n                                                    {zanytieForm[(statePodrobno.stationNumber)-1].nazvanie}\r\n\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {zanytieForm[(statePodrobno.stationNumber)-1].opisaniepodrobno}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {moment(zanytieForm[(statePodrobno.stationNumber)-1].datetime).format('LLLL')}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleClosePodrobno} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                            <Button size=\"small\" color=\"primary\" onClick={handleOpen(card.idzanytie)}>\r\n                                                Редактировать\r\n                                            </Button>\r\n                                                <Dialog open={state.openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                                    <DialogTitle id=\"form-dialog-title\">Редактировать {zanytieForm[(state.stationNumber)-1].nazvanie}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Редактировать тренировку\r\n                                                        </DialogContentText>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                        <TextField\r\n                                                            autoFocus\r\n                                                            onChange={handleChangeName}\r\n                                                            value={name}\r\n                                                            margin=\"dense\"\r\n                                                            id=\"name\"\r\n                                                            label=\"Название тренировки\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].nazvanie}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                            </FormControl>\r\n                                                        <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Тренер</FormHelperText>\r\n                                                        <NativeSelect\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].idtrenera}\r\n                                                            inputProps={{\r\n                                                                id: 'fio_trener',\r\n                                                            }}\r\n                                                            onChange={handleChangeTrener}\r\n                                                        >\r\n                                                            {zanytieForm.map((option) => (\r\n                                                                <option value={option.idtrenera} key=\r\n                                                                    {option.idtrenera}>\r\n                                                                    {option.fio_trener}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </NativeSelect>\r\n                                                        </FormControl>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                            <TextField\r\n                                                                autoFocus\r\n                                                               margin=\"dense\"\r\n                                                                onChange={handleChangeNumber}\r\n                                                                value={number}\r\n                                                                style={{width: 95}}\r\n                                                                id=\"numberzal\"\r\n                                                                label=\"Номер зала\"\r\n                                                                defaultValue={zanytieForm[(state.stationNumber)-1].numberzal}\r\n                                                                fullWidth\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        </div>\r\n                                                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardDatePicker\r\n                                                                        locale=\"ru\"\r\n                                                                        margin=\"normal\"\r\n                                                                        id=\"date-picker-dialog\"\r\n                                                                        label=\"Дата\"\r\n                                                                        views={['year', 'month', 'date']}\r\n                                                                        value={selectedDate}\r\n                                                                        format=\"dd/MM/yyyy\"\r\n                                                                        onChange={handleDateChange}\r\n                                                                        KeyboardButtonProps={{\r\n                                                                            'aria-label': 'change date',\r\n                                                                        }}\r\n                                                                    />\r\n                                                                        </FormControl>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardTimePicker\r\n                                                                    margin=\"normal\"\r\n                                                                    id=\"time-picker\"\r\n                                                                    label=\"Время\"\r\n                                                                    value={selectedDate}\r\n                                                                    format=\"HH:MM\"\r\n                                                                    onChange={handleDateChange}\r\n                                                                    KeyboardButtonProps={{\r\n                                                                        'aria-label': 'change time',\r\n                                                                    }}\r\n                                                                />\r\n                                                                    </FormControl>\r\n                                                                </MuiPickersUtilsProvider>\r\n                                                </DialogContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                    <FormHelperText>Краткое описание</FormHelperText>\r\n                                                    <TextareaAutosize\r\n                                                        rowsMax={5}\r\n                                                        onChange={handleChangeOpisanie}\r\n                                                        aria-label=\"Описание программы\"\r\n                                                        placeholder=\"Maximum 4 rows\"\r\n                                                        defaultValue={zanytieForm[(state.stationNumber)-1].opisanie}\r\n                                                    />\r\n                                                    </FormControl>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Подробное описание</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeOpodrobno}\r\n                                                            aria-label=\"Описание программы\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].opisaniepodrobno}\r\n                                                        />\r\n                                                    </FormControl>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} color=\"primary\">\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                        <Button onClick={()=>handleClickOpen(name, number, trener, opisanie, opodrobno, selectedDate,idzanytie)} color=\"primary\">\r\n                                                            {console.log('ZanForm',zanytieForm[(state.stationNumber)-1])}\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n\r\n);\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js",["131","132","133","134","135"],"import React, {useEffect, useState, useCallback} from 'react';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport moment from 'moment'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport {Loader} from \"../components/Loader\";\r\nimport Slide from '@material-ui/core/Slide';\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n\r\nmoment.lang('ru');\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons: {\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    text: {\r\n        left: 10000000,\r\n    },\r\n    rootAvatar: {\r\n        display: 'flex',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        // position:\"right\",\r\n        padding: theme.spacing(20),\r\n        //: 300,\r\n\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    },\r\n    cover: {\r\n        width: 300,\r\n        length: 150,\r\n    },\r\n    rootswipe: {\r\n        maxWidth: 400,\r\n        flexGrow: 1,\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: theme.spacing(4),\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    img: {\r\n        height: 255,\r\n        display: 'block',\r\n        maxWidth: 400,\r\n        overflow: 'hidden',\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    buttonPadding: {\r\n        margin: \"20px\",\r\n    },\r\n\r\n\r\n}))\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NotAufPage = () => {\r\n    const {loading, request} = useHttp();\r\n    const [infoFormZan, setInfoFormZan] = useState([])\r\n    const [infoFormTrener, setInfoFormTrener] = useState([])\r\n    const [open, setOpen] = React.useState(false);\r\n    const [state, setState] = React.useState({\r\n        openModal: false,\r\n        stationNumber: 1,\r\n    });\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = infoFormZan.length;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    const steps = [\r\n        {\r\n            id: '0',\r\n            message: 'Welcome to react chatbot!',\r\n            trigger: '1',\r\n        },\r\n        {\r\n            id: '1',\r\n            message: 'Bye!',\r\n            end: true,\r\n        },\r\n    ];\r\n    const info = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzone', 'GET', null, {})\r\n            setInfoFormZan(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n    const infoTrener = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzonetreners', 'GET', null, {})\r\n            setInfoFormTrener(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        info()\r\n    }, [])\r\n    useEffect(() => {\r\n        infoTrener()\r\n    }, [])\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <AppBar position='fixed'>\r\n                    <Container fixed>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}> FitZone\r\n                            </Typography>\r\n                            <Box mr={2}>\r\n                                <Button component={Link} to=\"/login\" color=\"inherit\" align=\"left\">\r\n                                    Войти\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Button component={Link} to=\"/\" color=\"inherit\" align=\"left\">Регистрация</Button>\r\n                        </Toolbar>\r\n                    </Container>\r\n                </AppBar>\r\n                <Paper className={classes.mainFeaturesPost}>\r\n                    <Container fixed>\r\n                        <div className={classes.overlay}/>\r\n                        <Grid container>\r\n                            <Grid item md={6}>\r\n                                <div className={classes.mainFeaturesPostContent}>\r\n                                    <Typography\r\n                                        component=\"h1\"\r\n                                        variant=\"h3\"\r\n                                        color='inherit'\r\n                                        gutterBottom\r\n                                    >\r\n                                        Fitness\r\n                                    </Typography>\r\n                                    <Typography\r\n\r\n                                        variant='h5'\r\n                                        color='inherit'\r\n                                        paragraph\r\n                                    >\r\n                                        Lorem ipsum\r\n                                    </Typography>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </Paper>\r\n                <div className={classes.mainContent}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                        <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                            себя </Typography>\r\n                        <div className={classes.mainButtons}>\r\n                            <Grid container spacing={4} justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button component={Link} to=\"/\" variant=\"contained\" color='primary'>\r\n                                        Start now\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n\r\n                    <Grid container spacing={4}>\r\n                        <div className={classes.root} align=\"center\">\r\n                            {loading && <Loader/>}\r\n                            {!loading && infoFormZan.length != 0 && (\r\n                                <>\r\n                                    <div className={classes.root} align=\"center\">\r\n                                        <Typography variant=\"h4\">{infoFormZan[activeStep].nazvanie}</Typography>\r\n\r\n                                        <Button className={classes.buttonPadding} variant=\"outlined\" color=\"primary\"\r\n                                                onClick={handleClickOpen}>\r\n                                            Узнать больше\r\n                                        </Button>\r\n                                        <Dialog\r\n                                            open={open}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleClose}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle\r\n                                                id=\"alert-dialog-slide-title\">{infoFormZan[activeStep].nazvanie}</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {infoFormZan[activeStep].opisaniepodrobno}\r\n\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(infoFormZan[activeStep].datetime).format(\"dddd HH:MM\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={handleClose} color=\"primary\">\r\n                                                    ОК\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                    </div>\r\n                                    <img\r\n                                        className={classes.img}\r\n                                        src={infoFormZan[activeStep].img}\r\n                                        alt={infoFormZan[activeStep].idtrenera}\r\n                                    />\r\n                                    <MobileStepper\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        variant=\"text\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                            <Button size=\"small\" onClick={handleNext}\r\n                                                    disabled={activeStep === maxSteps - 1}>\r\n                                                Next\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> :\r\n                                                    <KeyboardArrowRight/>}\r\n                                            </Button>\r\n                                        }\r\n                                        backButton={\r\n                                            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowRight/> :\r\n                                                    <KeyboardArrowLeft/>}\r\n                                                Back\r\n                                            </Button>\r\n                                        }\r\n                                    />\r\n                                </>\r\n                            )}\r\n\r\n                        </div>\r\n                    </Grid>\r\n                </Container>\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                            infoFormTrener.map((card) => (\r\n\r\n                                <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                    <Card className={classes.card}>\r\n                                        <CardMedia className={classes.cardMedia}\r\n                                                   image={card.img}\r\n                                                   title=\"Image title\"/>\r\n                                        <CardContent className={classes.cardContent}>\r\n                                            <Typography variant=\"h5\" gutterBottom>\r\n                                                {card.fio_trener}\r\n                                            </Typography>\r\n                                            <Typography> Стаж работы:\r\n                                                {card.stag}\r\n                                            </Typography>\r\n                                            <Typography> Контактные данные:\r\n                                                {card.phone}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions>\r\n                                            <Button size=\"small\" color=\"primary\" onClick={handleClickOpenModal(card.idtrener)}>\r\n                                                Подробнее\r\n                                            </Button>\r\n                                            <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={state.openModal}>\r\n                                                <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                    <div className={classes.rootAvatar}>\r\n                                                    <Avatar src={infoFormTrener[(state.stationNumber)-1].img} />\r\n                                                    {infoFormTrener[(state.stationNumber)-1].fio_trener}\r\n                                                    </div>\r\n                                                </DialogTitle>\r\n                                                <DialogContent dividers>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber)-1].kategory}\r\n                                                    </Typography>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber)-1].opisanie}\r\n                                                    </Typography>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber)-1].citat}\r\n                                                    </Typography>\r\n                                                </DialogContent>\r\n                                                <DialogActions>\r\n                                                    <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                        Назад\r\n                                                    </Button>\r\n                                                </DialogActions>\r\n                                            </Dialog>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Container>\r\n            </main>\r\n            <div align=\"right\">\r\n                <ChatBot steps={steps}/>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js",["136","137","138","139","140","141"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NoutingPersonalTrenPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const {token} = useContext(AuthContext)\r\n    const curId = props.userId\r\n    const [noutingForm, setNoutingForm] = useState([{\r\n        idzanytie:'',nazvanie:'', fio_trener:'',idtrener:'', img:'',datatime:''\r\n    }])\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = React.useState({\r\n        openModal: false,\r\n        stationNumber: 1,\r\n    });\r\nconst handleDateChange=(date)=>{\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n}\r\n\r\n\r\n    const handleClickOpen = async (card,selectedDate) => {\r\n        try {\r\n            const fetched = await request(`/api/nouting/inserting/${curId}`, 'POST',{...card,selectedDate},{Authorization: `Bearer ${token}`})\r\n            console.log(\"\",fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        handleCloseModal()\r\n    };\r\n\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n\r\n\r\n    const nouting = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request(`/api/nouting/noutingpt/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            setNoutingForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        nouting()\r\n    }, [])\r\n    const classes = useStyles();\r\n    console.log(\"SelectedDate\", selectedDate)\r\n    console.log(\"NoutingForm\", noutingForm)\r\n    return(\r\n        <>\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && noutingForm.length != 1 && (\r\n                    <>\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                        noutingForm.map((card,index) => (\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card id={card.idzanytie} className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker\r\n                                                locale=\"ru\"\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                label=\"Дата\"\r\n                                                views={['year', 'month', 'date']}\r\n                                                value={selectedDate}\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                onChange={handleDateChange}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            /><KeyboardTimePicker\r\n                                            margin=\"normal\"\r\n                                            id=\"time-picker\"\r\n                                            label=\"Время\"\r\n                                            value={selectedDate}\r\n                                            format=\"HH:MM\"\r\n                                            onChange={handleDateChange}\r\n                                            KeyboardButtonProps={{\r\n                                                'aria-label': 'change time',\r\n                                            }}\r\n                                        />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button onClick={handleClickOpenModal(card.idzanytie)} size=\"small\" color=\"primary\">\r\n                                            ЗАПИСЬ {console.log(\"idzanytie\",card.idzanytie)}\r\n                                        </Button>\r\n\r\n                                        <Dialog\r\n                                            open={state.openModal}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleCloseModal}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle id=\"alert-dialog-slide-title\">Подтвердите запись</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {noutingForm[(state.stationNumber)-1].nazvanie}\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(selectedDate).format(\"LLLL\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={()=>handleClickOpen(noutingForm[(state.stationNumber)-1],selectedDate)} color=\"primary\">\r\n                                                    Запись\r\n                                                </Button>\r\n                                                <Button onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        <Button size=\"small\" color=\"primary\"  onClick={handleClickOpenModal(card.idzanytie)}>\r\n                                            УЗНАТЬ БОЛЬШЕ\r\n                                        </Button>\r\n                                        <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={state.openModal}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                {noutingForm[(state.stationNumber)-1].nazvanie}\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom>\r\n                                                    {noutingForm[(state.stationNumber)-1].opisaniepodrobno}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom>\r\n                                                    <PersonIcon/>\r\n                                                    Тренер: {noutingForm[(state.stationNumber)-1].fio_trener}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n\r\n                                </CardActions>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                        }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n</>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js",[],["142","143"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":13,"column":7,"nodeType":"150","messageId":"151","endLine":13,"endColumn":16},{"ruleId":"148","severity":1,"message":"152","line":2,"column":24,"nodeType":"150","messageId":"151","endLine":2,"endColumn":32},{"ruleId":"153","severity":1,"message":"154","line":31,"column":8,"nodeType":"155","endLine":31,"endColumn":10,"suggestions":"156"},{"ruleId":"153","severity":1,"message":"157","line":18,"column":8,"nodeType":"155","endLine":18,"endColumn":10,"suggestions":"158"},{"ruleId":"148","severity":1,"message":"159","line":20,"column":8,"nodeType":"150","messageId":"151","endLine":20,"endColumn":13},{"ruleId":"148","severity":1,"message":"160","line":34,"column":10,"nodeType":"150","messageId":"151","endLine":34,"endColumn":18},{"ruleId":"148","severity":1,"message":"161","line":42,"column":8,"nodeType":"150","messageId":"151","endLine":42,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":57,"column":5,"nodeType":"150","messageId":"151","endLine":57,"endColumn":9},{"ruleId":"148","severity":1,"message":"163","line":60,"column":7,"nodeType":"150","messageId":"151","endLine":60,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":190,"column":13,"nodeType":"166","messageId":"167","endLine":199,"endColumn":14},{"ruleId":"153","severity":1,"message":"168","line":217,"column":12,"nodeType":"155","endLine":217,"endColumn":35,"suggestions":"169"},{"ruleId":"153","severity":1,"message":"170","line":230,"column":12,"nodeType":"155","endLine":230,"endColumn":35,"suggestions":"171"},{"ruleId":"153","severity":1,"message":"170","line":243,"column":12,"nodeType":"155","endLine":243,"endColumn":35,"suggestions":"172"},{"ruleId":"153","severity":1,"message":"173","line":246,"column":12,"nodeType":"155","endLine":246,"endColumn":14,"suggestions":"174"},{"ruleId":"153","severity":1,"message":"175","line":249,"column":12,"nodeType":"155","endLine":249,"endColumn":14,"suggestions":"176"},{"ruleId":"153","severity":1,"message":"177","line":252,"column":12,"nodeType":"155","endLine":252,"endColumn":14,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":343,"column":56,"nodeType":"181","messageId":"182","endLine":343,"endColumn":58},{"ruleId":"179","severity":1,"message":"180","line":343,"column":81,"nodeType":"181","messageId":"182","endLine":343,"endColumn":83},{"ruleId":"179","severity":1,"message":"183","line":348,"column":45,"nodeType":"181","messageId":"182","endLine":348,"endColumn":47},{"ruleId":"179","severity":1,"message":"183","line":381,"column":49,"nodeType":"181","messageId":"182","endLine":381,"endColumn":51},{"ruleId":"179","severity":1,"message":"183","line":405,"column":45,"nodeType":"181","messageId":"182","endLine":405,"endColumn":47},{"ruleId":"148","severity":1,"message":"184","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":27},{"ruleId":"148","severity":1,"message":"185","line":1,"column":41,"nodeType":"150","messageId":"151","endLine":1,"endColumn":50},{"ruleId":"148","severity":1,"message":"186","line":1,"column":52,"nodeType":"150","messageId":"151","endLine":1,"endColumn":60},{"ruleId":"148","severity":1,"message":"187","line":2,"column":17,"nodeType":"150","messageId":"151","endLine":2,"endColumn":29},{"ruleId":"148","severity":1,"message":"188","line":7,"column":8,"nodeType":"150","messageId":"151","endLine":7,"endColumn":14},{"ruleId":"148","severity":1,"message":"189","line":8,"column":8,"nodeType":"150","messageId":"151","endLine":8,"endColumn":16},{"ruleId":"148","severity":1,"message":"190","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"191","line":2,"column":9,"nodeType":"150","messageId":"151","endLine":2,"endColumn":15},{"ruleId":"148","severity":1,"message":"192","line":2,"column":27,"nodeType":"150","messageId":"151","endLine":2,"endColumn":34},{"ruleId":"148","severity":1,"message":"193","line":2,"column":36,"nodeType":"150","messageId":"151","endLine":2,"endColumn":46},{"ruleId":"148","severity":1,"message":"194","line":2,"column":59,"nodeType":"150","messageId":"151","endLine":2,"endColumn":62},{"ruleId":"148","severity":1,"message":"195","line":18,"column":9,"nodeType":"150","messageId":"151","endLine":18,"endColumn":27},{"ruleId":"148","severity":1,"message":"196","line":18,"column":29,"nodeType":"150","messageId":"151","endLine":18,"endColumn":47},{"ruleId":"148","severity":1,"message":"197","line":18,"column":49,"nodeType":"150","messageId":"151","endLine":18,"endColumn":72},{"ruleId":"148","severity":1,"message":"198","line":19,"column":8,"nodeType":"150","messageId":"151","endLine":19,"endColumn":20},{"ruleId":"153","severity":1,"message":"199","line":166,"column":8,"nodeType":"155","endLine":166,"endColumn":10,"suggestions":"200"},{"ruleId":"179","severity":1,"message":"180","line":226,"column":48,"nodeType":"181","messageId":"182","endLine":226,"endColumn":50},{"ruleId":"179","severity":1,"message":"183","line":276,"column":49,"nodeType":"181","messageId":"182","endLine":276,"endColumn":51},{"ruleId":"148","severity":1,"message":"190","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"194","line":3,"column":88,"nodeType":"150","messageId":"151","endLine":3,"endColumn":91},{"ruleId":"148","severity":1,"message":"201","line":12,"column":8,"nodeType":"150","messageId":"151","endLine":12,"endColumn":16},{"ruleId":"148","severity":1,"message":"188","line":22,"column":8,"nodeType":"150","messageId":"151","endLine":22,"endColumn":14},{"ruleId":"148","severity":1,"message":"202","line":81,"column":21,"nodeType":"150","messageId":"151","endLine":81,"endColumn":26},{"ruleId":"148","severity":1,"message":"203","line":81,"column":37,"nodeType":"150","messageId":"151","endLine":81,"endColumn":47},{"ruleId":"153","severity":1,"message":"204","line":170,"column":8,"nodeType":"155","endLine":170,"endColumn":10,"suggestions":"205"},{"ruleId":"179","severity":1,"message":"180","line":223,"column":49,"nodeType":"181","messageId":"182","endLine":223,"endColumn":51},{"ruleId":"179","severity":1,"message":"183","line":268,"column":49,"nodeType":"181","messageId":"182","endLine":268,"endColumn":51},{"ruleId":"148","severity":1,"message":"206","line":32,"column":8,"nodeType":"150","messageId":"151","endLine":32,"endColumn":18},{"ruleId":"148","severity":1,"message":"207","line":160,"column":11,"nodeType":"150","messageId":"151","endLine":160,"endColumn":16},{"ruleId":"153","severity":1,"message":"208","line":194,"column":8,"nodeType":"155","endLine":194,"endColumn":10,"suggestions":"209"},{"ruleId":"153","severity":1,"message":"210","line":197,"column":8,"nodeType":"155","endLine":197,"endColumn":10,"suggestions":"211"},{"ruleId":"179","severity":1,"message":"180","line":275,"column":61,"nodeType":"181","messageId":"182","endLine":275,"endColumn":63},{"ruleId":"148","severity":1,"message":"212","line":19,"column":8,"nodeType":"150","messageId":"151","endLine":19,"endColumn":20},{"ruleId":"148","severity":1,"message":"202","line":90,"column":21,"nodeType":"150","messageId":"151","endLine":90,"endColumn":26},{"ruleId":"148","severity":1,"message":"203","line":90,"column":37,"nodeType":"150","messageId":"151","endLine":90,"endColumn":47},{"ruleId":"153","severity":1,"message":"213","line":141,"column":8,"nodeType":"155","endLine":141,"endColumn":17,"suggestions":"214"},{"ruleId":"153","severity":1,"message":"215","line":145,"column":8,"nodeType":"155","endLine":145,"endColumn":10,"suggestions":"216"},{"ruleId":"179","severity":1,"message":"180","line":200,"column":49,"nodeType":"181","messageId":"182","endLine":200,"endColumn":51},{"ruleId":"144","replacedBy":"217"},{"ruleId":"146","replacedBy":"218"},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["221"],"React Hook useCallback has a missing dependency: 'token'. Either include it or remove the dependency array.",["222"],"'Badge' is defined but never used.","'DataGrid' is defined but never used.","'Checkbox' is defined but never used.","'rows' is assigned a value but never used.","'formatter' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useCallback has missing dependencies: 'curRole' and 'props'. Either include them or remove the dependency array.",["223"],"React Hook useCallback has a missing dependency: 'adminForm'. Either include it or remove the dependency array.",["224"],["225"],"React Hook useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["226"],"React Hook useEffect has a missing dependency: 'admin'. Either include it or remove the dependency array.",["227"],"React Hook useEffect has a missing dependency: 'trener'. Either include it or remove the dependency array.",["228"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'linkMaterial' is defined but never used.","'Avatar' is defined but never used.","'ListItem' is defined but never used.","'useContext' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Box' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'DateFnsUtils' is defined but never used.","React Hook useEffect has a missing dependency: 'treners'. Either include it or remove the dependency array.",["229"],"'MenuItem' is defined but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'zanytie'. Either include it or remove the dependency array.",["230"],"'PersonIcon' is defined but never used.","'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'infoTrener'. Either include it or remove the dependency array.",["232"],"'ScheduleIcon' is defined but never used.","React Hook useCallback has missing dependencies: 'curId' and 'token'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has a missing dependency: 'nouting'. Either include it or remove the dependency array.",["234"],["219"],["220"],"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"241","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [loading]",{"range":"262","text":"263"},"Update the dependencies array to be: [token]",{"range":"264","text":"265"},"Update the dependencies array to be: [curId, request, token, curRole, props]",{"range":"266","text":"267"},"Update the dependencies array to be: [curId, request, token, adminForm]",{"range":"268","text":"269"},{"range":"270","text":"269"},"Update the dependencies array to be: [client]",{"range":"271","text":"272"},"Update the dependencies array to be: [admin]",{"range":"273","text":"274"},"Update the dependencies array to be: [trener]",{"range":"275","text":"276"},"Update the dependencies array to be: [treners]",{"range":"277","text":"278"},"Update the dependencies array to be: [zanytie]",{"range":"279","text":"280"},"Update the dependencies array to be: [info]",{"range":"281","text":"282"},"Update the dependencies array to be: [infoTrener]",{"range":"283","text":"284"},"Update the dependencies array to be: [curId, request, token]",{"range":"285","text":"286"},"Update the dependencies array to be: [nouting]",{"range":"287","text":"288"},[928,930],"[loading]",[619,621],"[token]",[7811,7834],"[curId, request, token, curRole, props]",[8429,8452],"[curId, request, token, adminForm]",[9051,9074],[9137,9139],"[client]",[9201,9203],"[admin]",[9266,9268],"[trener]",[5432,5434],"[treners]",[5631,5633],"[zanytie]",[5299,5301],"[info]",[5356,5358],"[infoTrener]",[4324,4333],"[curId, request, token]",[4387,4389],"[nouting]"]