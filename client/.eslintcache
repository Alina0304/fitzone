[{"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js":"1","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js":"2","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js":"3","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js":"4","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js":"5","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js":"6","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js":"7","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js":"8","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js":"9","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js":"10","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js":"11","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js":"12","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js":"13","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js":"14","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js":"15","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js":"16","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js":"17"},{"size":159,"mtime":1610885525171,"results":"18","hashOfConfig":"19"},{"size":2124,"mtime":1613762645168,"results":"20","hashOfConfig":"19"},{"size":1743,"mtime":1613758190513,"results":"21","hashOfConfig":"19"},{"size":5529,"mtime":1613758438555,"results":"22","hashOfConfig":"19"},{"size":1069,"mtime":1612895741515,"results":"23","hashOfConfig":"19"},{"size":202,"mtime":1611136113590,"results":"24","hashOfConfig":"19"},{"size":212,"mtime":1611422112175,"results":"25","hashOfConfig":"19"},{"size":914,"mtime":1611829372115,"results":"26","hashOfConfig":"19"},{"size":13404,"mtime":1611956758835,"results":"27","hashOfConfig":"19"},{"size":3041,"mtime":1611952688009,"results":"28","hashOfConfig":"19"},{"size":6379,"mtime":1613762575086,"results":"29","hashOfConfig":"19"},{"size":6384,"mtime":1612209021522,"results":"30","hashOfConfig":"19"},{"size":14558,"mtime":1613743251452,"results":"31","hashOfConfig":"19"},{"size":1327,"mtime":1613065739598,"results":"32","hashOfConfig":"19"},{"size":11897,"mtime":1613161034091,"results":"33","hashOfConfig":"19"},{"size":1813,"mtime":1613072944753,"results":"34","hashOfConfig":"19"},{"size":2013,"mtime":1613762613139,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"f5z9i0",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js",[],["83","84"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js",["85"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js",["86"],"import React from \"react\";\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\nimport {ClientPage} from \"./pages/ClientPage\"\r\nimport {TrenersPage} from \"./pages/TrenersPage\"\r\nimport {ZanytiyPage} from \"./pages/ZanytiyPage\";\r\nimport {NotAufPage} from \"./pages/NotAufPage\";\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {NoutingPersonalTrenPage} from \"./pages/NoutingPersonalTrenPage\";\r\n\r\n\r\nexport const useRoutes = isAuthenticated =>{\r\n    if(isAuthenticated){\r\n        return(\r\n            <Switch>\r\n                <Route path=\"/clientPage\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n                            <ClientPage userId={value.userId}/>\r\n                        }\r\n                    </AuthContext.Consumer>\r\n                </Route>\r\n                <Route path=\"/trenersPage\" exact>\r\n                    <TrenersPage />\r\n                </Route>\r\n                <Route path=\"/zanytiyPage\" exact>\r\n                    <ZanytiyPage />\r\n                </Route>\r\n                <Route path=\"/noutingpt\" exact>\r\n                    <AuthContext.Consumer>\r\n                        {value =>\r\n                            <NoutingPersonalTrenPage userId={value.userId}/>\r\n                        }\r\n                        </AuthContext.Consumer>\r\n                </Route>\r\n\r\n            </Switch>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                    <AuthPage />\r\n                </Route>\r\n                <Route path=\"/fitzone\" exact>\r\n                    <NotAufPage />\r\n                </Route>\r\n\r\n\r\n            </Switch>\r\n        )\r\n    }\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js",["87","88"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link} from \"react-router-dom\";\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useRoutes} from \"../routes\";\r\nimport {useAuth} from \"../hooks/auth.hook\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(/img/fitnes_1.jpg)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },  paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport const AuthPage = ({email,password,}) => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage();\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [form, setForm] = useState({\r\n        email: '', password: ''\r\n    })\r\n    useEffect(() => {\r\n        message(error);\r\n        clearError();\r\n    }, [error, message, clearError])\r\n    const changeHandler = event => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n    }\r\n    const classes = useStyles();\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            console.log(\"Data\", data);\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            console.log(\"Data\", data);\r\n            auth.login(data.token, data.userId)\r\n\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <CssBaseline/>\r\n            <Grid item xs={false} sm={4} md={7} className={classes.image}/>\r\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Инстинкт быть первым\r\n                    </Typography>\r\n\r\n                    <form className={classes.form}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Электронная почта\"\r\n                            name=\"email\"\r\n                            autoFocus\r\n\r\n                            onChange={changeHandler}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n\r\n                            onChange={changeHandler}\r\n                        />\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={loading}\r\n                            onClick={loginHandler}\r\n                            component={Link} to=\"/trenersPage\"\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    Забыли пароль?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"body2\"\r\n                                    onClick={registerHandler}\r\n                                    disabled={loading}>\r\n                                    \"Нет учетной записи? Регистрация\"\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Box mt={5}>\r\n\r\n                        </Box>\r\n                    </form>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js",["89"],"import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n       setLoading(true)\r\n        console.log(\"loading\", loading)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n           setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, request, error, clearError }\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js",["90"],"import {useState, useCallback, useEffect} from 'react'\r\n\r\n\r\nconst storageName='userData'\r\nexport const useAuth =()=>{\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId]=useState(null)\r\n\r\n    const login = useCallback((jwtToken, id)=>{\r\n        console.log('token', token)\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        localStorage.setItem(storageName, JSON.stringify({userId: id,token: jwtToken}))\r\n    }, [])\r\n    const logout =useCallback(()=>{\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const data=JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return {login, logout, token, userId,ready}\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js",["91","92","93","94","95"],"import React, {useCallback, useContext,useEffect, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport {Link} from \"react-router-dom\";\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from '../components/Loader'\r\nimport { DataGrid,} from '@material-ui/data-grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {Card, CardMedia} from \"@material-ui/core\";\r\n\r\n\r\n    function Copyright() {\r\n        return (\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                    Your Website\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        );\r\n    }\r\nlet rows=[]\r\nmoment.locale('ru');\r\nconst drawerWidth = 240;\r\nconst formatter = new Intl.DateTimeFormat(\"ru\", {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\"\r\n});\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        toolbar: {\r\n            paddingRight: 24, // keep right padding when drawer closed\r\n        },\r\n        toolbarIcon: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: '0 8px',\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        menuButtonHidden: {\r\n            display: 'none',\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        drawerPaper: {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerPaperClose: {\r\n            overflowX: 'hidden',\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            width: theme.spacing(7),\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9),\r\n            },\r\n        },\r\n        appBarSpacer: theme.mixins.toolbar,\r\n        content: {\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n        },\r\n        container: {\r\n            paddingTop: theme.spacing(4),\r\n            paddingBottom: theme.spacing(4),\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            display: 'flex',\r\n            overflow: 'auto',\r\n            flexDirection: 'column',\r\n        },\r\n        fixedHeight: {\r\n            height: 500,\r\n        },\r\n        cardMedia: {\r\n            paddingTop: \"101.25%\"\r\n        },\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    }));\r\n\r\n    export const ClientPage = (props) => {\r\n        const {token} = useContext(AuthContext)\r\n        const classes = useStyles();\r\n        const [open, setOpen] = React.useState(true);\r\n        const {loading, request} = useHttp();\r\n        const [user, setUser] = useState(null)\r\n        const curId = props.userId\r\n        const handleDrawerOpen = () => {\r\n            setOpen(true);\r\n        };\r\n        const handleDrawerClose = () => {\r\n            setOpen(false);\r\n        };\r\n        const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n        const [clientForm, setClientForm] = useState([{\r\n            id: '', FIO_cl: '', Age: '', Phone: '', id_abon: '', Activity: '', DateActivity: '', img: '',\r\n            idpt: '', idclent: '', idtrener: '', datatime: '', fio_trener:''\r\n        }])\r\n        const client = useCallback(async () => {\r\n            console.log(\"Before try\")\r\n            try {\r\n                console.log(\"CurId\", curId)\r\n                const fetched = await request(`/api/client/clientPage/${curId}`, 'GET', null, {\r\n                    Authorization: `Bearer ${token}`\r\n                })\r\n                console.log(\"Fetched\", fetched)\r\n                console.log(\"UserId\", fetched.result[0].id)\r\n                setClientForm(fetched.result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }, [request, token, curId])\r\n\r\n        useEffect(() => {\r\n            client()\r\n        }, [])\r\n        if (loading) {\r\n            return <Loader/>\r\n        }\r\n\r\n        console.log(\"ClientForm\", clientForm)\r\n        for (let i = 0; i <clientForm.length; i++){\r\n\r\n            rows[i]={\r\n                trenName: clientForm[i]['name'],\r\n                DateTime: clientForm[i]['datatime'],\r\n                trener: clientForm[i]['fio_trener'],\r\n            }\r\n        }\r\n        console.log(\"rows\", rows)\r\n\r\n\r\n\r\n        return (\r\n          <>\r\n            <div className={classes.root}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            {clientForm[0][\"FIO_cl\"]}\r\n                        </Typography>\r\n\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                                Клиент\r\n                            </Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                        </Box>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon/>\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n                >\r\n                <div className={classes.toolbarIcon}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                <ChevronLeftIcon/>\r\n\r\n                </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List> <ListItem button>\r\n                    <ListItemIcon>\r\n                        <FaceIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Изменить профиль\" />\r\n                </ListItem>\r\n                    <ListItem button component={Link} to=\"/noutingpt\">\r\n                    <ListItemIcon>\r\n                    <FitnessCenterIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Записаться\" />\r\n                    </ListItem>\r\n                    <ListItem button component={Link} to=\"/trenersPage\">\r\n                        <ListItemIcon>\r\n                            <HighlightOffIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Отменить\" />\r\n                    </ListItem></List>\r\n                <Divider/>\r\n                <List>{clientForm[0][\"Age\"]}</List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                <div className={classes.appBarSpacer}/>\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                <Grid container spacing={3}>\r\n\r\n                {/* Recent Deposits */}\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Card>\r\n                        <CardMedia className={classes.cardMedia}\r\n                                   image={clientForm[0][\"img\"]}\r\n                                   title=\"Image title\"/>\r\n                    </Card>\r\n                </Grid>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={8} lg={9}>\r\n                        <Paper className={fixedHeightPaper}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Название</TableCell>\r\n                                            <TableCell align=\"center\">Дата и время</TableCell>\r\n                                            <TableCell align=\"center\">Тренер</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rows.map((row) => (\r\n                                            <TableRow key={row.name}>\r\n                                                <TableCell align=\"center\">{row.trenName}</TableCell>\r\n                                                <TableCell align=\"center\">\r\n                                                    {moment(row.DateTime).format('LLLL')}</TableCell>\r\n                                                <TableCell align=\"center\">{row.trener}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Paper>\r\n                    </Grid>\r\n                {/* Recent Orders */}\r\n                <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\nаиычаиыаи\r\n                </Paper>\r\n                </Grid>\r\n                </Grid>\r\n                <Box pt={4}>\r\n                <Copyright/>\r\n                </Box>\r\n                </Container>\r\n                </main>\r\n\r\n            </div>\r\n</>\r\n\r\n        );\r\n    }\r\n\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js",["96","97"],"import React, {useContext} from 'react'\r\nimport {Link as linkMaterial, AppBar,Container, Toolbar,IconButton,Box,Typography}from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nexport const Navbar = () =>{\r\n    const history=useHistory()\r\n    const auth=useContext(AuthContext)\r\n    const classes = useStyles();\r\n\r\n    const logoutHandler=event=>{\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/')\r\n\r\n    }\r\n    return (\r\n        <AppBar position='fixed'>\r\n        <Container fixed>\r\n            <Toolbar>\r\n                <IconButton edge='start' color=\"inherit\" aria-label='menu' className={classes.menuButton}>\r\n                    <Avatar alt=\"Remy Sharp\" src=\"img/slid.jpg\" className={classes.large} />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}> Fitness\r\n                </Typography>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                        Клиент\r\n                    </Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                </Box>\r\n                <Button component={Link} to=\"/\" color=\"inherit\" align=\"center\" onClick={logoutHandler}>Выйти</Button>\r\n\r\n\r\n            </Toolbar>\r\n        </Container>\r\n    </AppBar>\r\n\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js",["98","99","100","101","102","103","104","105","106"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {AppBar,Container, Toolbar, IconButton, Typography,Box,Paper,Grid,Card,CardMedia,CardContent, CardActions} from \"@material-ui/core\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\n\r\nexport const TrenersPage = () => {\r\n    const {request} = useHttp();\r\n    const [trenerForm, setTrenerForm] = useState([{\r\n        id:'', fio:'',stag:'', phone:'', img:''}\r\n    ])\r\n\r\n    const treners = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Преобразование 1\", fetched.result[0].img)\r\n            setTrenerForm(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        treners()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n     return (\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" color='primary'>\r\n                                    Start now\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        trenerForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <Typography> Стаж работы:\r\n                                            {card.stag}\r\n                                        </Typography>\r\n                                        <Typography> Контактные данные:\r\n                                            {card.phone}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            View\r\n                                        </Button>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            Edit\r\n                                        </Button>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js",["107","108","109","110","111"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\nroot: {\r\n    flexGrow: 1\r\n},\r\nmenuButton: {\r\n    marginRight: theme.spacing(1)\r\n},\r\nButtons:{\r\n    position: \"center\"\r\n},\r\ntitle: {\r\n    flexGrow: 1\r\n},\r\n\r\nmainFeaturesPost: {\r\n    position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n},\r\noverlay: {\r\n    position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n},\r\nmainFeaturesPostContent: {\r\n    position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n},\r\ncardMedia: {\r\n    paddingTop: \"56.25%\"\r\n},\r\ncardContent: {\r\n    flexGrow: 1\r\n},\r\ncardGrid: {\r\n    marginTop: theme.spacing(4)\r\n}\r\n\r\n\r\n}))\r\n\r\nexport const ZanytiyPage = () =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [zanytieForm, setZanytieForm] = useState([])\r\n\r\n    const zanytie = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/zanytiy/zanytiyPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Выборка\",fetched.result[0].img)\r\n\r\n\r\n            setZanytieForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        zanytie()\r\n    }, [])\r\n    const classes = useStyles();\r\n    return(\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" color='primary'>\r\n                                    Start now\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button variant=\"outlined\" color='primary'>\r\n                                    Learn More\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        zanytieForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.opisanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.datetime}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            View\r\n                                        </Button>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            Edit\r\n                                        </Button>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n\r\n);\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js",["112","113","114","115","116","117"],"import React, {useEffect, useState, useCallback,Component} from 'react';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Container,\r\n    Grid, IconButton,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport moment from 'moment'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport {Loader} from \"../components/Loader\";\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n\r\n\r\nmoment.lang('ru');\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons: {\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    text: {\r\n        left: 10000000,\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        // position:\"right\",\r\n        padding: theme.spacing(20),\r\n        //: 300,\r\n\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    },\r\n    cover: {\r\n        width: 300,\r\n        length: 150,\r\n    },\r\n    rootswipe: {\r\n        maxWidth: 400,\r\n        flexGrow: 1,\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: theme.spacing(4),\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    img: {\r\n        height: 255,\r\n        display: 'block',\r\n        maxWidth: 400,\r\n        overflow: 'hidden',\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    buttonPadding:{\r\n        margin: \"20px\",\r\n    },\r\n\r\n\r\n}))\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NotAufPage = () => {\r\n    const {loading, request} = useHttp();\r\n    const [infoFormZan, setInfoFormZan] = useState([])\r\n    const [infoFormTrener, setInfoFormTrener] = useState([])\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = infoFormZan.length;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    const steps = [\r\n        {\r\n            id: '0',\r\n            message: 'Welcome to react chatbot!',\r\n            trigger: '1',\r\n        },\r\n        {\r\n            id: '1',\r\n            message: 'Bye!',\r\n            end: true,\r\n        },\r\n    ];\r\n    const info = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzone', 'GET', null, {})\r\n            setInfoFormZan(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n    const infoTrener = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzonetreners', 'GET', null, {})\r\n            setInfoFormTrener(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        info()\r\n    }, [])\r\n    useEffect(() => {\r\n        infoTrener()\r\n    }, [])\r\n\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <AppBar position='fixed'>\r\n                    <Container fixed>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}> FitZone\r\n                            </Typography>\r\n                            <Box mr={2}>\r\n                                <Button component={Link} to=\"/\" color=\"inherit\" align=\"left\">\r\n                                    Войти\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Button component={Link} to=\"/\" color=\"inherit\" align=\"left\">Регистрация</Button>\r\n                        </Toolbar>\r\n                    </Container>\r\n                </AppBar>\r\n                <Paper className={classes.mainFeaturesPost}>\r\n                    <Container fixed>\r\n                        <div className={classes.overlay}/>\r\n                        <Grid container>\r\n                            <Grid item md={6}>\r\n                                <div className={classes.mainFeaturesPostContent}>\r\n                                    <Typography\r\n                                        component=\"h1\"\r\n                                        variant=\"h3\"\r\n                                        color='inherit'\r\n                                        gutterBottom\r\n                                    >\r\n                                        Fitness\r\n                                    </Typography>\r\n                                    <Typography\r\n\r\n                                        variant='h5'\r\n                                        color='inherit'\r\n                                        paragraph\r\n                                    >\r\n                                        Lorem ipsum\r\n                                    </Typography>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </Paper>\r\n                <div className={classes.mainContent}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                        <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                            себя </Typography>\r\n                        <div className={classes.mainButtons}>\r\n                            <Grid container spacing={4} justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button component={Link} to=\"/\" variant=\"contained\" color='primary'>\r\n                                        Start now\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n\r\n                    <Grid container spacing={4}>\r\n                        <div className={classes.root} align=\"center\">\r\n                            {loading && <Loader/>}\r\n                            {!loading && infoFormZan.length!=0 && (\r\n                                <>\r\n                                <div className={classes.root} align=\"center\">\r\n                                        <Typography variant=\"h4\">{infoFormZan[activeStep].nazvanie}</Typography>\r\n\r\n                                    <Button className={classes.buttonPadding} variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                                        Узнать больше\r\n                                    </Button>\r\n                                    <Dialog\r\n                                        open={open}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        onClose={handleClose}\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">{infoFormZan[activeStep].nazvanie}</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                {infoFormZan[activeStep].opisanie}\r\n\r\n                                            </DialogContentText>\r\n                                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                            <AccessTimeIcon/>{moment(infoFormZan[activeStep].datetime).format(\"dddd HH:MM\")}\r\n                                                </DialogContentText>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                            <Button onClick={handleClose} color=\"primary\">\r\n                                                ОК\r\n                                            </Button>\r\n                                        </DialogActions>\r\n                                    </Dialog>\r\n                                </div>\r\n                                    <img\r\n                                        className={classes.img}\r\n                                        src={infoFormZan[activeStep].img}\r\n                                        alt={infoFormZan[activeStep].idtrenera}\r\n                                    />\r\n                                    <MobileStepper\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        variant=\"text\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                            <Button size=\"small\" onClick={handleNext}\r\n                                                    disabled={activeStep === maxSteps - 1}>\r\n                                                Next\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> :\r\n                                                    <KeyboardArrowRight/>}\r\n                                            </Button>\r\n                                        }\r\n                                        backButton={\r\n                                            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowRight/> :\r\n                                                    <KeyboardArrowLeft/>}\r\n                                                Back\r\n                                            </Button>\r\n                                        }\r\n                                    />\r\n                                    </>\r\n                            )}\r\n\r\n                        </div>\r\n                    </Grid>\r\n                </Container>\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                            infoFormTrener.map((card) => (\r\n\r\n                                <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                    <Card className={classes.card}>\r\n                                        <CardMedia className={classes.cardMedia}\r\n                                                   image={card.img}\r\n                                                   title=\"Image title\"/>\r\n                                        <CardContent className={classes.cardContent}>\r\n                                            <Typography variant=\"h5\" gutterBottom>\r\n                                                {card.fio_trener}\r\n                                            </Typography>\r\n                                            <Typography> Стаж работы:\r\n                                                {card.stag}\r\n                                            </Typography>\r\n                                            <Typography> Контактные данные:\r\n                                                {card.phone}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions>\r\n                                            <Button size=\"small\" color=\"primary\">\r\n                                                View\r\n                                            </Button>\r\n                                            <Button size=\"small\" color=\"primary\">\r\n                                                Edit\r\n                                            </Button>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Container>\r\n            </main>\r\n            <div align =\"right\">\r\n            <ChatBot steps={steps} />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js",["118","119","120","121","122"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NoutingPersonalTrenPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const {token} = useContext(AuthContext)\r\n    const curId = props.userId\r\n    const [noutingForm, setNoutingForm] = useState([{\r\n        idzanytie:'',nazvanie:'', fio_trener:'',idtrener:'', img:'',datatime:''\r\n    }])\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [open, setOpen] = React.useState({\r\n        open:false,\r\n        stationNumber:null,\r\n        stationData: []\r\n    });\r\nconst handleDateChange=(date)=>{\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n}\r\n    const handleClickOpen = async (card) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request(`/api/nouting/inserting/${curId}`, 'POST',{...card,selectedDate},{Authorization: `Bearer ${token}`})\r\n            console.log(\"\",fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    const handleClickOpenModal = stationNumber=>() => {\r\n        setOpen({open: true, stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setOpen({open:false});\r\n    };\r\n\r\n    const nouting = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request(`/api/nouting/noutingpt/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            setNoutingForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        nouting()\r\n    }, [])\r\n    const classes = useStyles();\r\n    console.log(\"SelectedDate\", selectedDate)\r\n    return(\r\n        <>\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        noutingForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card id={card.idzanytie} className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker\r\n                                                locale=\"ru\"\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                label=\"Дата\"\r\n                                                views={['year', 'month', 'date']}\r\n                                                value={selectedDate}\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                onChange={handleDateChange}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            /><KeyboardTimePicker\r\n                                            margin=\"normal\"\r\n                                            id=\"time-picker\"\r\n                                            label=\"Время\"\r\n                                            value={selectedDate}\r\n                                            format=\"HH:MM\"\r\n                                            onChange={handleDateChange}\r\n                                            KeyboardButtonProps={{\r\n                                                'aria-label': 'change time',\r\n                                            }}\r\n                                        />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button onClick={handleClickOpenModal(0)} size=\"small\" color=\"primary\">\r\n                                            ЗАПИСЬ {card.nazvanie}\r\n                                        </Button>\r\n                                        <Dialog\r\n                                            open={open}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleCloseModal}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle id=\"alert-dialog-slide-title\">fvddvdvf</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {card.opisanie}\r\n\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(card.datetime).format(\"dddd HH:MM\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={()=>handleClickOpen(card,selectedDate)} color=\"primary\">\r\n                                                    Запись\r\n                                                </Button>\r\n                                                <Button onClick={handleCloseModal} color=\"primary\">\r\n                                                    ОК\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            УЗНАТЬ БОЛЬШЕ\r\n                                        </Button>\r\n\r\n                                </CardActions>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n</>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js",[],["123","124"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js",["125","126","127","128","129","130","131","132","133","134","135","136"],"import React, {useContext} from 'react'\r\nimport {Link as linkMaterial, AppBar,Container, Toolbar,IconButton,Box,Typography}from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nexport const Footer = () =>{\r\n    const history=useHistory()\r\n    const auth=useContext(AuthContext)\r\n    const classes = useStyles();\r\n    return (\r\n       <footer>\r\n           <Typography variant=\"h6\" align=\"center\" gutterBottom> Footer</Typography>\r\n           <BottomNavigation\r\n               className={classes.root}>\r\n           </BottomNavigation>\r\n       </footer>\r\n\r\n    )\r\n}",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":13,"column":7,"nodeType":"143","messageId":"144","endLine":13,"endColumn":16},{"ruleId":"141","severity":1,"message":"145","line":2,"column":24,"nodeType":"143","messageId":"144","endLine":2,"endColumn":32},{"ruleId":"141","severity":1,"message":"146","line":18,"column":9,"nodeType":"143","messageId":"144","endLine":18,"endColumn":18},{"ruleId":"141","severity":1,"message":"147","line":19,"column":9,"nodeType":"143","messageId":"144","endLine":19,"endColumn":16},{"ruleId":"148","severity":1,"message":"149","line":31,"column":8,"nodeType":"150","endLine":31,"endColumn":10,"suggestions":"151"},{"ruleId":"148","severity":1,"message":"152","line":15,"column":8,"nodeType":"150","endLine":15,"endColumn":10,"suggestions":"153"},{"ruleId":"141","severity":1,"message":"154","line":33,"column":10,"nodeType":"143","messageId":"144","endLine":33,"endColumn":18},{"ruleId":"141","severity":1,"message":"155","line":58,"column":7,"nodeType":"143","messageId":"144","endLine":58,"endColumn":16},{"ruleId":"141","severity":1,"message":"156","line":158,"column":16,"nodeType":"143","messageId":"144","endLine":158,"endColumn":20},{"ruleId":"141","severity":1,"message":"157","line":158,"column":22,"nodeType":"143","messageId":"144","endLine":158,"endColumn":29},{"ruleId":"148","severity":1,"message":"158","line":189,"column":12,"nodeType":"150","endLine":189,"endColumn":14,"suggestions":"159"},{"ruleId":"141","severity":1,"message":"160","line":2,"column":17,"nodeType":"143","messageId":"144","endLine":2,"endColumn":29},{"ruleId":"141","severity":1,"message":"161","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":16},{"ruleId":"141","severity":1,"message":"162","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":26},{"ruleId":"141","severity":1,"message":"163","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":15},{"ruleId":"141","severity":1,"message":"164","line":2,"column":27,"nodeType":"143","messageId":"144","endLine":2,"endColumn":34},{"ruleId":"141","severity":1,"message":"165","line":2,"column":36,"nodeType":"143","messageId":"144","endLine":2,"endColumn":46},{"ruleId":"141","severity":1,"message":"166","line":2,"column":59,"nodeType":"143","messageId":"144","endLine":2,"endColumn":62},{"ruleId":"141","severity":1,"message":"167","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":19},{"ruleId":"141","severity":1,"message":"168","line":4,"column":8,"nodeType":"143","messageId":"144","endLine":4,"endColumn":14},{"ruleId":"141","severity":1,"message":"169","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":17},{"ruleId":"148","severity":1,"message":"170","line":85,"column":8,"nodeType":"150","endLine":85,"endColumn":10,"suggestions":"171"},{"ruleId":"141","severity":1,"message":"162","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":26},{"ruleId":"141","severity":1,"message":"172","line":60,"column":12,"nodeType":"143","messageId":"144","endLine":60,"endColumn":19},{"ruleId":"141","severity":1,"message":"173","line":60,"column":21,"nodeType":"143","messageId":"144","endLine":60,"endColumn":26},{"ruleId":"141","severity":1,"message":"174","line":60,"column":37,"nodeType":"143","messageId":"144","endLine":60,"endColumn":47},{"ruleId":"148","severity":1,"message":"175","line":83,"column":8,"nodeType":"150","endLine":83,"endColumn":10,"suggestions":"176"},{"ruleId":"141","severity":1,"message":"177","line":1,"column":49,"nodeType":"143","messageId":"144","endLine":1,"endColumn":58},{"ruleId":"141","severity":1,"message":"165","line":10,"column":11,"nodeType":"143","messageId":"144","endLine":10,"endColumn":21},{"ruleId":"141","severity":1,"message":"178","line":143,"column":11,"nodeType":"143","messageId":"144","endLine":143,"endColumn":16},{"ruleId":"148","severity":1,"message":"179","line":177,"column":8,"nodeType":"150","endLine":177,"endColumn":10,"suggestions":"180"},{"ruleId":"148","severity":1,"message":"181","line":180,"column":8,"nodeType":"150","endLine":180,"endColumn":10,"suggestions":"182"},{"ruleId":"183","severity":1,"message":"184","line":259,"column":60,"nodeType":"185","messageId":"186","endLine":259,"endColumn":62},{"ruleId":"141","severity":1,"message":"172","line":87,"column":12,"nodeType":"143","messageId":"144","endLine":87,"endColumn":19},{"ruleId":"141","severity":1,"message":"173","line":87,"column":21,"nodeType":"143","messageId":"144","endLine":87,"endColumn":26},{"ruleId":"141","severity":1,"message":"174","line":87,"column":37,"nodeType":"143","messageId":"144","endLine":87,"endColumn":47},{"ruleId":"148","severity":1,"message":"187","line":135,"column":8,"nodeType":"150","endLine":135,"endColumn":17,"suggestions":"188"},{"ruleId":"148","severity":1,"message":"189","line":139,"column":8,"nodeType":"150","endLine":139,"endColumn":10,"suggestions":"190"},{"ruleId":"137","replacedBy":"191"},{"ruleId":"139","replacedBy":"192"},{"ruleId":"141","severity":1,"message":"160","line":2,"column":17,"nodeType":"143","messageId":"144","endLine":2,"endColumn":29},{"ruleId":"141","severity":1,"message":"163","line":2,"column":31,"nodeType":"143","messageId":"144","endLine":2,"endColumn":37},{"ruleId":"141","severity":1,"message":"193","line":2,"column":38,"nodeType":"143","messageId":"144","endLine":2,"endColumn":47},{"ruleId":"141","severity":1,"message":"164","line":2,"column":49,"nodeType":"143","messageId":"144","endLine":2,"endColumn":56},{"ruleId":"141","severity":1,"message":"165","line":2,"column":57,"nodeType":"143","messageId":"144","endLine":2,"endColumn":67},{"ruleId":"141","severity":1,"message":"166","line":2,"column":68,"nodeType":"143","messageId":"144","endLine":2,"endColumn":71},{"ruleId":"141","severity":1,"message":"194","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":14},{"ruleId":"141","severity":1,"message":"195","line":4,"column":9,"nodeType":"143","messageId":"144","endLine":4,"endColumn":13},{"ruleId":"141","severity":1,"message":"168","line":7,"column":8,"nodeType":"143","messageId":"144","endLine":7,"endColumn":14},{"ruleId":"141","severity":1,"message":"161","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":16},{"ruleId":"141","severity":1,"message":"196","line":64,"column":11,"nodeType":"143","messageId":"144","endLine":64,"endColumn":18},{"ruleId":"141","severity":1,"message":"197","line":65,"column":11,"nodeType":"143","messageId":"144","endLine":65,"endColumn":15},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'useRoutes' is defined but never used.","'useAuth' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["200"],"React Hook useCallback has a missing dependency: 'token'. Either include it or remove the dependency array.",["201"],"'DataGrid' is defined but never used.","'formatter' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["202"],"'linkMaterial' is defined but never used.","'ListItem' is defined but never used.","'useContext' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Box' is defined but never used.","'CssBaseline' is defined but never used.","'Avatar' is defined but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'treners'. Either include it or remove the dependency array.",["203"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'zanytie'. Either include it or remove the dependency array.",["204"],"'Component' is defined but never used.","'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'infoTrener'. Either include it or remove the dependency array.",["206"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useCallback has missing dependencies: 'curId' and 'token'. Either include them or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'nouting'. Either include it or remove the dependency array.",["208"],["198"],["199"],"'Container' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'history' is assigned a value but never used.","'auth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [loading]",{"range":"227","text":"228"},"Update the dependencies array to be: [token]",{"range":"229","text":"230"},"Update the dependencies array to be: [client]",{"range":"231","text":"232"},"Update the dependencies array to be: [treners]",{"range":"233","text":"234"},"Update the dependencies array to be: [zanytie]",{"range":"235","text":"236"},"Update the dependencies array to be: [info]",{"range":"237","text":"238"},"Update the dependencies array to be: [infoTrener]",{"range":"239","text":"240"},"Update the dependencies array to be: [curId, request, token]",{"range":"241","text":"242"},"Update the dependencies array to be: [nouting]",{"range":"243","text":"244"},[928,930],"[loading]",[493,495],"[token]",[6908,6910],"[client]",[2221,2223],"[treners]",[1921,1923],"[zanytie]",[4703,4705],"[info]",[4760,4762],"[infoTrener]",[4086,4095],"[curId, request, token]",[4149,4151],"[nouting]"]