[{"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js":"1","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js":"2","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js":"3","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js":"4","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js":"5","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js":"6","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js":"7","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js":"8","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js":"9","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js":"10","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js":"11","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js":"12","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js":"13","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js":"14","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js":"15","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js":"16","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js":"17"},{"size":159,"mtime":1610885525171,"results":"18","hashOfConfig":"19"},{"size":2167,"mtime":1613847978249,"results":"20","hashOfConfig":"19"},{"size":2230,"mtime":1614510393181,"results":"21","hashOfConfig":"19"},{"size":5453,"mtime":1613847451317,"results":"22","hashOfConfig":"19"},{"size":1069,"mtime":1612895741515,"results":"23","hashOfConfig":"19"},{"size":202,"mtime":1611136113590,"results":"24","hashOfConfig":"19"},{"size":229,"mtime":1613846582074,"results":"25","hashOfConfig":"19"},{"size":1084,"mtime":1613847690563,"results":"26","hashOfConfig":"19"},{"size":13529,"mtime":1613847553355,"results":"27","hashOfConfig":"19"},{"size":3048,"mtime":1613852001024,"results":"28","hashOfConfig":"19"},{"size":6653,"mtime":1613849848102,"results":"29","hashOfConfig":"19"},{"size":18307,"mtime":1614504721702,"results":"30","hashOfConfig":"19"},{"size":14570,"mtime":1614509121843,"results":"31","hashOfConfig":"19"},{"size":1327,"mtime":1613065739598,"results":"32","hashOfConfig":"19"},{"size":14101,"mtime":1614344487088,"results":"33","hashOfConfig":"19"},{"size":1813,"mtime":1613072944753,"results":"34","hashOfConfig":"19"},{"size":1534,"mtime":1613852708212,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"f5z9i0",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js",[],["81","82"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js",["83"],"import  React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'materialize-css'\r\nimport {useRoutes} from \"./routes\";\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {useAuth} from \"./hooks/auth.hook\";\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {Navbar} from \"./components/Navbar\";\r\nimport {Loader} from \"./components/Loader\";\r\nimport {Footer} from \"./components/Footer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nfunction App() {\r\n    const {token, login,role, logout, userId,ready}=useAuth()\r\n    console.log(token)\r\n    console.log('role1', role)\r\n    let isAuthenticated = !!token\r\n    console.log(isAuthenticated)\r\n    const routes = useRoutes(isAuthenticated)\r\n    if(!ready)\r\n    {\r\n        return <Loader />\r\n    }\r\nreturn(\r\n    <AuthContext.Provider value={{token, logout, login, userId, role, isAuthenticated}}>\r\n    <Router>\r\n        {isAuthenticated && <Navbar/>}\r\n        <div className='container'>\r\n            {routes}\r\n        </div>\r\n        <Footer/>\r\n    </Router>\r\n    </AuthContext.Provider>\r\n\r\n)\r\n}\r\nexport default App","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js",["84"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js",["85"],"import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n       setLoading(true)\r\n        console.log(\"loading\", loading)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n           setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, request, error, clearError }\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js",["86"],"import {useState, useCallback, useEffect} from 'react'\r\n\r\n\r\nconst storageName='userData'\r\nexport const useAuth =()=>{\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId]=useState(null)\r\n    const [role, setUserRole]=useState(null)\r\n\r\n    const login = useCallback((jwtToken, id, role)=>{\r\n        console.log('token', token)\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setUserRole(role)\r\n        console.log('role', role)\r\n        localStorage.setItem(storageName, JSON.stringify({userId: id,token: jwtToken, role: role}))\r\n    }, [])\r\n    const logout =useCallback(()=>{\r\n        setToken(null)\r\n        setUserId(null)\r\n        setUserRole(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const data=JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n            login(data.token, data.userId, data.role)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return {login, logout, token, userId,ready, role}\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js",["87","88","89","90","91","92"],"import React, {useCallback, useContext,useEffect, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport {Link} from \"react-router-dom\";\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from '../components/Loader'\r\nimport { DataGrid,} from '@material-ui/data-grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {Card, CardMedia} from \"@material-ui/core\";\r\n\r\n\r\n    function Copyright() {\r\n        return (\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                    Your Website\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        );\r\n    }\r\nlet rows=[]\r\nmoment.locale('ru');\r\nconst drawerWidth = 240;\r\nconst formatter = new Intl.DateTimeFormat(\"ru\", {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\"\r\n});\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        toolbar: {\r\n            paddingRight: 24, // keep right padding when drawer closed\r\n        },\r\n        toolbarIcon: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: '0 8px',\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        menuButtonHidden: {\r\n            display: 'none',\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        drawerPaper: {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerPaperClose: {\r\n            overflowX: 'hidden',\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            width: theme.spacing(7),\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9),\r\n            },\r\n        },\r\n        appBarSpacer: theme.mixins.toolbar,\r\n        content: {\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n        },\r\n        container: {\r\n            paddingTop: theme.spacing(4),\r\n            paddingBottom: theme.spacing(4),\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            display: 'flex',\r\n            overflow: 'auto',\r\n            flexDirection: 'column',\r\n        },\r\n        fixedHeight: {\r\n            height: 500,\r\n        },\r\n        cardMedia: {\r\n            paddingTop: \"101.25%\"\r\n        },\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    }));\r\n\r\n    export const ClientPage = (props) => {\r\n        const {token} = useContext(AuthContext)\r\n        const classes = useStyles();\r\n        const [open, setOpen] = React.useState(true);\r\n        const {loading, request} = useHttp();\r\n        const [user, setUser] = useState(null)\r\n        const curId = props.userId\r\n        const curRole= props.role\r\n        const handleDrawerOpen = () => {\r\n            setOpen(true);\r\n        };\r\n        const handleDrawerClose = () => {\r\n            setOpen(false);\r\n        };\r\n        const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n        const [clientForm, setClientForm] = useState([{\r\n            id: '', FIO_cl: '', Age: '', Phone: '', id_abon: '', Activity: '', DateActivity: '', img: '',\r\n            idpt: '', idclent: '', idtrener: '', datatime: '', fio_trener:''\r\n        }])\r\n        const client = useCallback(async () => {\r\n            console.log(\"Before try\")\r\n            try {\r\n                console.log(\"CurId\", curId)\r\n                const fetched = await request(`/api/client/clientPage/${curId}`, 'GET', null, {\r\n                    Authorization: `Bearer ${token}`\r\n                })\r\n                console.log(\"Fetched\", fetched)\r\n                console.log(\"Role\",curRole)\r\n                console.log(\"props\", props)\r\n                console.log(\"UserId\", fetched.result[0].id)\r\n                setClientForm(fetched.result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }, [request, token, curId])\r\n\r\n        useEffect(() => {\r\n            client()\r\n        }, [])\r\n        if (loading) {\r\n            return <Loader/>\r\n        }\r\n\r\n        console.log(\"ClientForm\", clientForm)\r\n        for (let i = 0; i <clientForm.length; i++){\r\n\r\n            rows[i]={\r\n                trenName: clientForm[i]['name'],\r\n                DateTime: clientForm[i]['datatime'],\r\n                trener: clientForm[i]['fio_trener'],\r\n            }\r\n        }\r\n        console.log(\"rows\", rows)\r\n\r\n\r\n\r\n        return (\r\n          <>\r\n            <div className={classes.root}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            {clientForm[0][\"FIO_cl\"]}\r\n                        </Typography>\r\n\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                                Клиент\r\n                            </Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                        </Box>\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge badgeContent={4} color=\"secondary\">\r\n                                <NotificationsIcon/>\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n                >\r\n                <div className={classes.toolbarIcon}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                <ChevronLeftIcon/>\r\n\r\n                </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List> <ListItem button>\r\n                    <ListItemIcon>\r\n                        <FaceIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Изменить профиль\" />\r\n                </ListItem>\r\n                    <ListItem button component={Link} to=\"/noutingpt\">\r\n                    <ListItemIcon>\r\n                    <FitnessCenterIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Записаться\" />\r\n                    </ListItem>\r\n                    <ListItem button component={Link} to=\"/trenersPage\">\r\n                        <ListItemIcon>\r\n                            <HighlightOffIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Отменить\" />\r\n                    </ListItem></List>\r\n                <Divider/>\r\n                <List>{clientForm[0][\"Age\"]}</List>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                <div className={classes.appBarSpacer}/>\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                <Grid container spacing={3}>\r\n\r\n                {/* Recent Deposits */}\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Card>\r\n                        <CardMedia className={classes.cardMedia}\r\n                                   image={clientForm[0][\"img\"]}\r\n                                   title=\"Image title\"/>\r\n                    </Card>\r\n                </Grid>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={8} lg={9}>\r\n                        <Paper className={fixedHeightPaper}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Название</TableCell>\r\n                                            <TableCell align=\"center\">Дата и время</TableCell>\r\n                                            <TableCell align=\"center\">Тренер</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rows.map((row) => (\r\n                                            <TableRow key={row.name}>\r\n                                                <TableCell align=\"center\">{row.trenName}</TableCell>\r\n                                                <TableCell align=\"center\">\r\n                                                    {moment(row.DateTime).format('LLLL')}</TableCell>\r\n                                                <TableCell align=\"center\">{row.trener}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Paper>\r\n                    </Grid>\r\n                {/* Recent Orders */}\r\n                <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\nаиычаиыаи\r\n                </Paper>\r\n                </Grid>\r\n                </Grid>\r\n                <Box pt={4}>\r\n                <Copyright/>\r\n                </Box>\r\n                </Container>\r\n                </main>\r\n\r\n            </div>\r\n</>\r\n\r\n        );\r\n    }\r\n\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js",["93","94"],"import React, {useContext} from 'react'\r\nimport {Link as linkMaterial, AppBar,Container, Toolbar,IconButton,Box,Typography}from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nexport const Navbar = () =>{\r\n    const history=useHistory()\r\n    const auth=useContext(AuthContext)\r\n    const classes = useStyles();\r\n\r\n    const logoutHandler=event=>{\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/fitzone')\r\n\r\n    }\r\n    return (\r\n        <AppBar position='fixed'>\r\n        <Container fixed>\r\n            <Toolbar>\r\n                <IconButton edge='start' color=\"inherit\" aria-label='menu' className={classes.menuButton}>\r\n                    <Avatar alt=\"Remy Sharp\" src=\"img/slid.jpg\" className={classes.large} />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}> Fitness\r\n                </Typography>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                        Клиент\r\n                    </Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                </Box>\r\n                <Button component={Link} to=\"/\" color=\"inherit\" align=\"center\" onClick={logoutHandler}>Выйти</Button>\r\n\r\n\r\n            </Toolbar>\r\n        </Container>\r\n    </AppBar>\r\n\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js",["95","96","97","98","99","100","101"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {AppBar,Container, Toolbar, IconButton, Typography,Box,Paper,Grid,Card,CardMedia,CardContent, CardActions} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\n\r\nexport const TrenersPage = (props) => {\r\n    const {request} = useHttp();\r\n    const curRole=props.role\r\n    const [trenerForm, setTrenerForm] = useState([{\r\n        id:'', fio:'',stag:'', phone:'', img:''}\r\n    ])\r\n\r\n    const treners = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Преобразование 1\", fetched.result[0].img)\r\n            setTrenerForm(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        treners()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n     return (\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" color='primary'>\r\n                                    Start now\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        trenerForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <Typography> Стаж работы:\r\n                                            {card.stag}\r\n                                        </Typography>\r\n                                        <Typography> Контактные данные:\r\n                                            {card.phone}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            Подробно\r\n                                        </Button>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            Редактировать\r\n                                        </Button>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js",["102","103","104","105","106","107","108","109","110","111"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography, Box} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Loader} from \"../components/Loader\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\nroot: {\r\n    flexGrow: 1\r\n},\r\nmenuButton: {\r\n    marginRight: theme.spacing(1)\r\n},\r\nButtons:{\r\n    position: \"center\"\r\n},\r\ntitle: {\r\n    flexGrow: 1\r\n},\r\n\r\nmainFeaturesPost: {\r\n    position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n},\r\noverlay: {\r\n    position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n},\r\nmainFeaturesPostContent: {\r\n    position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n},\r\ncardMedia: {\r\n    paddingTop: \"56.25%\"\r\n},\r\ncardContent: {\r\n    flexGrow: 1\r\n},\r\ncardGrid: {\r\n    marginTop: theme.spacing(4)\r\n},\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 100,\r\n    },\r\n\r\n\r\n}))\r\n\r\nexport const ZanytiyPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [zanytieForm, setZanytieForm] = useState([])\r\n    const curRole=props.role\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = useState({open: false, stationNumber: 1,});\r\n    const [currency, setCurrency] = useState('');\r\n    const [field, setField]=useState()\r\n\r\n    const handleChange = (event) => {\r\n        setCurrency(event.target.value);\r\n    };\r\n\r\n    const handleChangeField = (event) => {\r\n        console.log(\"value\", event.target.value)\r\n        setField(event.target.value);\r\n    };\r\n    const handleOpen = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n    const handleDateChange=(date)=>{\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n    const handleClickOpen = async (field,selectedDate) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request(`/api/zanytiy/zanytiyPage`, 'POST',{field,selectedDate})\r\n            console.log(\"\",fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n    const zanytie = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/zanytiy/zanytiyPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Выборка\",fetched.result[0].img)\r\n\r\n\r\n            setZanytieForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        zanytie()\r\n    }, [])\r\n    const classes = useStyles();\r\n    return(\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" color='primary'>\r\n                                    Start now\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button variant=\"outlined\" color='primary'>\r\n                                    Learn More\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && zanytieForm.length != 0 && (\r\n                    <>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        zanytieForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.opisanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.datetime}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\">\r\n                                            Подробно\r\n                                        </Button>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                            <Button size=\"small\" color=\"primary\" onClick={handleOpen(card.idzanytie)}>\r\n                                                Редактировать\r\n                                            </Button>\r\n                                                <Dialog open={state.openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                                    <DialogTitle id=\"form-dialog-title\">Редактировать {zanytieForm[(state.stationNumber)-1].nazvanie}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Редактировать тренировку\r\n                                                        </DialogContentText>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                        <TextField\r\n                                                            autoFocus\r\n                                                            onChange={handleChangeField}\r\n                                                            value={field}\r\n                                                            margin=\"dense\"\r\n                                                            id=\"name\"\r\n                                                            label=\"Название тренировки\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].nazvanie}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                            </FormControl>\r\n                                                        <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Тренер</FormHelperText>\r\n                                                        <NativeSelect\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].fio_trener}\r\n                                                            inputProps={{\r\n                                                                id: 'fio_trener',\r\n                                                            }}\r\n                                                        >\r\n                                                            {zanytieForm.map((option) => (\r\n                                                                <option value={option.fio_trener} key=\r\n                                                                    {option.idtrenera}>\r\n                                                                    {option.fio_trener}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </NativeSelect>\r\n                                                        </FormControl>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                            <TextField\r\n                                                                autoFocus\r\n                                                               margin=\"dense\"\r\n                                                                style={{width: 95}}\r\n                                                                id=\"numberzal\"\r\n                                                                label=\"Номер зала\"\r\n                                                                defaultValue={zanytieForm[(state.stationNumber)-1].numberzal}\r\n                                                                fullWidth\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        </div>\r\n                                                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardDatePicker\r\n                                                                        locale=\"ru\"\r\n                                                                        margin=\"normal\"\r\n                                                                        id=\"date-picker-dialog\"\r\n                                                                        label=\"Дата\"\r\n                                                                        views={['year', 'month', 'date']}\r\n                                                                        value={selectedDate}\r\n                                                                        format=\"dd/MM/yyyy\"\r\n                                                                        onChange={handleDateChange}\r\n                                                                        KeyboardButtonProps={{\r\n                                                                            'aria-label': 'change date',\r\n                                                                        }}\r\n                                                                    />\r\n                                                                        </FormControl>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardTimePicker\r\n                                                                    margin=\"normal\"\r\n                                                                    id=\"time-picker\"\r\n                                                                    label=\"Время\"\r\n                                                                    value={selectedDate}\r\n                                                                    format=\"HH:MM\"\r\n                                                                    onChange={handleDateChange}\r\n                                                                    KeyboardButtonProps={{\r\n                                                                        'aria-label': 'change time',\r\n                                                                    }}\r\n                                                                />\r\n                                                                    </FormControl>\r\n                                                                </MuiPickersUtilsProvider>\r\n                                                </DialogContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                    <FormHelperText>Краткое описание</FormHelperText>\r\n                                                    <TextareaAutosize\r\n                                                        rowsMax={5}\r\n\r\n                                                        aria-label=\"Описание программы\"\r\n                                                        placeholder=\"Maximum 4 rows\"\r\n                                                        defaultValue={zanytieForm[(state.stationNumber)-1].opisanie}\r\n                                                    />\r\n                                                    </FormControl>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Подробное описание</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n\r\n                                                            aria-label=\"Описание программы\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].opisaniepodrobno}\r\n                                                        />\r\n                                                    </FormControl>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} color=\"primary\">\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                        <Button onClick={()=>handleClickOpen(field,selectedDate)} color=\"primary\">\r\n                                                            {console.log('ZanForm',zanytieForm[(state.stationNumber)-1])}\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n\r\n);\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js",["112","113","114","115"],"import React, {useEffect, useState, useCallback} from 'react';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport moment from 'moment'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport {Loader} from \"../components/Loader\";\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n\r\nmoment.lang('ru');\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons: {\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    text: {\r\n        left: 10000000,\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        // position:\"right\",\r\n        padding: theme.spacing(20),\r\n        //: 300,\r\n\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    },\r\n    cover: {\r\n        width: 300,\r\n        length: 150,\r\n    },\r\n    rootswipe: {\r\n        maxWidth: 400,\r\n        flexGrow: 1,\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: theme.spacing(4),\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    img: {\r\n        height: 255,\r\n        display: 'block',\r\n        maxWidth: 400,\r\n        overflow: 'hidden',\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    buttonPadding: {\r\n        margin: \"20px\",\r\n    },\r\n\r\n\r\n}))\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NotAufPage = () => {\r\n    const {loading, request} = useHttp();\r\n    const [infoFormZan, setInfoFormZan] = useState([])\r\n    const [infoFormTrener, setInfoFormTrener] = useState([])\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = infoFormZan.length;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    const steps = [\r\n        {\r\n            id: '0',\r\n            message: 'Welcome to react chatbot!',\r\n            trigger: '1',\r\n        },\r\n        {\r\n            id: '1',\r\n            message: 'Bye!',\r\n            end: true,\r\n        },\r\n    ];\r\n    const info = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzone', 'GET', null, {})\r\n            setInfoFormZan(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n    const infoTrener = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzonetreners', 'GET', null, {})\r\n            setInfoFormTrener(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        info()\r\n    }, [])\r\n    useEffect(() => {\r\n        infoTrener()\r\n    }, [])\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <AppBar position='fixed'>\r\n                    <Container fixed>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}> FitZone\r\n                            </Typography>\r\n                            <Box mr={2}>\r\n                                <Button component={Link} to=\"/login\" color=\"inherit\" align=\"left\">\r\n                                    Войти\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Button component={Link} to=\"/\" color=\"inherit\" align=\"left\">Регистрация</Button>\r\n                        </Toolbar>\r\n                    </Container>\r\n                </AppBar>\r\n                <Paper className={classes.mainFeaturesPost}>\r\n                    <Container fixed>\r\n                        <div className={classes.overlay}/>\r\n                        <Grid container>\r\n                            <Grid item md={6}>\r\n                                <div className={classes.mainFeaturesPostContent}>\r\n                                    <Typography\r\n                                        component=\"h1\"\r\n                                        variant=\"h3\"\r\n                                        color='inherit'\r\n                                        gutterBottom\r\n                                    >\r\n                                        Fitness\r\n                                    </Typography>\r\n                                    <Typography\r\n\r\n                                        variant='h5'\r\n                                        color='inherit'\r\n                                        paragraph\r\n                                    >\r\n                                        Lorem ipsum\r\n                                    </Typography>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </Paper>\r\n                <div className={classes.mainContent}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                        <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                            себя </Typography>\r\n                        <div className={classes.mainButtons}>\r\n                            <Grid container spacing={4} justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button component={Link} to=\"/\" variant=\"contained\" color='primary'>\r\n                                        Start now\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n\r\n                    <Grid container spacing={4}>\r\n                        <div className={classes.root} align=\"center\">\r\n                            {loading && <Loader/>}\r\n                            {!loading && infoFormZan.length != 0 && (\r\n                                <>\r\n                                    <div className={classes.root} align=\"center\">\r\n                                        <Typography variant=\"h4\">{infoFormZan[activeStep].nazvanie}</Typography>\r\n\r\n                                        <Button className={classes.buttonPadding} variant=\"outlined\" color=\"primary\"\r\n                                                onClick={handleClickOpen}>\r\n                                            Узнать больше\r\n                                        </Button>\r\n                                        <Dialog\r\n                                            open={open}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleClose}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle\r\n                                                id=\"alert-dialog-slide-title\">{infoFormZan[activeStep].nazvanie}</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {infoFormZan[activeStep].opisanie}\r\n\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(infoFormZan[activeStep].datetime).format(\"dddd HH:MM\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={handleClose} color=\"primary\">\r\n                                                    ОК\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                    </div>\r\n                                    <img\r\n                                        className={classes.img}\r\n                                        src={infoFormZan[activeStep].img}\r\n                                        alt={infoFormZan[activeStep].idtrenera}\r\n                                    />\r\n                                    <MobileStepper\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        variant=\"text\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                            <Button size=\"small\" onClick={handleNext}\r\n                                                    disabled={activeStep === maxSteps - 1}>\r\n                                                Next\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> :\r\n                                                    <KeyboardArrowRight/>}\r\n                                            </Button>\r\n                                        }\r\n                                        backButton={\r\n                                            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowRight/> :\r\n                                                    <KeyboardArrowLeft/>}\r\n                                                Back\r\n                                            </Button>\r\n                                        }\r\n                                    />\r\n                                </>\r\n                            )}\r\n\r\n                        </div>\r\n                    </Grid>\r\n                </Container>\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                            infoFormTrener.map((card) => (\r\n\r\n                                <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                    <Card className={classes.card}>\r\n                                        <CardMedia className={classes.cardMedia}\r\n                                                   image={card.img}\r\n                                                   title=\"Image title\"/>\r\n                                        <CardContent className={classes.cardContent}>\r\n                                            <Typography variant=\"h5\" gutterBottom>\r\n                                                {card.fio_trener}\r\n                                            </Typography>\r\n                                            <Typography> Стаж работы:\r\n                                                {card.stag}\r\n                                            </Typography>\r\n                                            <Typography> Контактные данные:\r\n                                                {card.phone}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions>\r\n                                            <Button size=\"small\" color=\"primary\">\r\n                                                Подробнее\r\n                                            </Button>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Container>\r\n            </main>\r\n            <div align=\"right\">\r\n                <ChatBot steps={steps}/>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js",["116","117","118","119","120","121"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NoutingPersonalTrenPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const {token} = useContext(AuthContext)\r\n    const curId = props.userId\r\n    const [noutingForm, setNoutingForm] = useState([{\r\n        idzanytie:'',nazvanie:'', fio_trener:'',idtrener:'', img:'',datatime:''\r\n    }])\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = React.useState({\r\n        openModal: false,\r\n        stationNumber: 1,\r\n    });\r\nconst handleDateChange=(date)=>{\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n}\r\n\r\n\r\n    const handleClickOpen = async (card,selectedDate) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request(`/api/nouting/inserting/${curId}`, 'POST',{...card,selectedDate},{Authorization: `Bearer ${token}`})\r\n            console.log(\"\",fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        handleCloseModal()\r\n    };\r\n\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n\r\n\r\n    const nouting = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request(`/api/nouting/noutingpt/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            setNoutingForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        nouting()\r\n    }, [])\r\n    const classes = useStyles();\r\n    console.log(\"SelectedDate\", selectedDate)\r\n    console.log(\"NoutingForm\", noutingForm)\r\n    return(\r\n        <>\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    Fitness\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Lorem ipsum\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Learn more\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && noutingForm.length != 1 && (\r\n                    <>\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                        noutingForm.map((card,index) => (\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card id={card.idzanytie} className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker\r\n                                                locale=\"ru\"\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                label=\"Дата\"\r\n                                                views={['year', 'month', 'date']}\r\n                                                value={selectedDate}\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                onChange={handleDateChange}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            /><KeyboardTimePicker\r\n                                            margin=\"normal\"\r\n                                            id=\"time-picker\"\r\n                                            label=\"Время\"\r\n                                            value={selectedDate}\r\n                                            format=\"HH:MM\"\r\n                                            onChange={handleDateChange}\r\n                                            KeyboardButtonProps={{\r\n                                                'aria-label': 'change time',\r\n                                            }}\r\n                                        />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button onClick={handleClickOpenModal(card.idzanytie)} size=\"small\" color=\"primary\">\r\n                                            ЗАПИСЬ {console.log(\"idzanytie\",card.idzanytie)}\r\n                                        </Button>\r\n\r\n                                        <Dialog\r\n                                            open={state.openModal}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleCloseModal}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle id=\"alert-dialog-slide-title\">Подтвердите запись</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {noutingForm[(state.stationNumber)-1].nazvanie}\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(selectedDate).format(\"LLLL\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={()=>handleClickOpen(noutingForm[(state.stationNumber)-1],selectedDate)} color=\"primary\">\r\n                                                    Запись\r\n                                                </Button>\r\n                                                <Button onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        <Button size=\"small\" color=\"primary\"  onClick={handleClickOpenModal(card.idzanytie)}>\r\n                                            УЗНАТЬ БОЛЬШЕ\r\n                                        </Button>\r\n                                        <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={state.openModal}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                {noutingForm[(state.stationNumber)-1].nazvanie}\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom>\r\n                                                    {noutingForm[(state.stationNumber)-1].opisaniepodrobno}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom>\r\n                                                    <PersonIcon/>\r\n                                                    Тренер: {noutingForm[(state.stationNumber)-1].fio_trener}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n\r\n                                </CardActions>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                        }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n</>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js",[],["122","123"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":13,"column":7,"nodeType":"130","messageId":"131","endLine":13,"endColumn":16},{"ruleId":"128","severity":1,"message":"132","line":2,"column":24,"nodeType":"130","messageId":"131","endLine":2,"endColumn":32},{"ruleId":"133","severity":1,"message":"134","line":31,"column":8,"nodeType":"135","endLine":31,"endColumn":10,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"137","line":18,"column":8,"nodeType":"135","endLine":18,"endColumn":10,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"139","line":33,"column":10,"nodeType":"130","messageId":"131","endLine":33,"endColumn":18},{"ruleId":"128","severity":1,"message":"140","line":58,"column":7,"nodeType":"130","messageId":"131","endLine":58,"endColumn":16},{"ruleId":"128","severity":1,"message":"141","line":158,"column":16,"nodeType":"130","messageId":"131","endLine":158,"endColumn":20},{"ruleId":"128","severity":1,"message":"142","line":158,"column":22,"nodeType":"130","messageId":"131","endLine":158,"endColumn":29},{"ruleId":"133","severity":1,"message":"143","line":188,"column":12,"nodeType":"135","endLine":188,"endColumn":35,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"145","line":192,"column":12,"nodeType":"135","endLine":192,"endColumn":14,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"147","line":2,"column":17,"nodeType":"130","messageId":"131","endLine":2,"endColumn":29},{"ruleId":"128","severity":1,"message":"148","line":8,"column":8,"nodeType":"130","messageId":"131","endLine":8,"endColumn":16},{"ruleId":"128","severity":1,"message":"149","line":1,"column":16,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"150","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":15},{"ruleId":"128","severity":1,"message":"151","line":2,"column":27,"nodeType":"130","messageId":"131","endLine":2,"endColumn":34},{"ruleId":"128","severity":1,"message":"152","line":2,"column":36,"nodeType":"130","messageId":"131","endLine":2,"endColumn":46},{"ruleId":"128","severity":1,"message":"153","line":2,"column":59,"nodeType":"130","messageId":"131","endLine":2,"endColumn":62},{"ruleId":"133","severity":1,"message":"154","line":83,"column":8,"nodeType":"135","endLine":83,"endColumn":10,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":162,"column":49,"nodeType":"158","messageId":"159","endLine":162,"endColumn":51},{"ruleId":"128","severity":1,"message":"149","line":1,"column":16,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"153","line":3,"column":88,"nodeType":"130","messageId":"131","endLine":3,"endColumn":91},{"ruleId":"128","severity":1,"message":"160","line":12,"column":8,"nodeType":"130","messageId":"131","endLine":12,"endColumn":16},{"ruleId":"128","severity":1,"message":"161","line":78,"column":21,"nodeType":"130","messageId":"131","endLine":78,"endColumn":26},{"ruleId":"128","severity":1,"message":"162","line":78,"column":37,"nodeType":"130","messageId":"131","endLine":78,"endColumn":47},{"ruleId":"128","severity":1,"message":"163","line":83,"column":12,"nodeType":"130","messageId":"131","endLine":83,"endColumn":20},{"ruleId":"128","severity":1,"message":"164","line":86,"column":11,"nodeType":"130","messageId":"131","endLine":86,"endColumn":23},{"ruleId":"133","severity":1,"message":"165","line":136,"column":8,"nodeType":"135","endLine":136,"endColumn":10,"suggestions":"166"},{"ruleId":"156","severity":1,"message":"167","line":194,"column":49,"nodeType":"158","messageId":"159","endLine":194,"endColumn":51},{"ruleId":"156","severity":1,"message":"157","line":220,"column":49,"nodeType":"158","messageId":"159","endLine":220,"endColumn":51},{"ruleId":"128","severity":1,"message":"168","line":142,"column":11,"nodeType":"130","messageId":"131","endLine":142,"endColumn":16},{"ruleId":"133","severity":1,"message":"169","line":176,"column":8,"nodeType":"135","endLine":176,"endColumn":10,"suggestions":"170"},{"ruleId":"133","severity":1,"message":"171","line":179,"column":8,"nodeType":"135","endLine":179,"endColumn":10,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"167","line":257,"column":61,"nodeType":"158","messageId":"159","endLine":257,"endColumn":63},{"ruleId":"128","severity":1,"message":"173","line":19,"column":8,"nodeType":"130","messageId":"131","endLine":19,"endColumn":20},{"ruleId":"128","severity":1,"message":"161","line":90,"column":21,"nodeType":"130","messageId":"131","endLine":90,"endColumn":26},{"ruleId":"128","severity":1,"message":"162","line":90,"column":37,"nodeType":"130","messageId":"131","endLine":90,"endColumn":47},{"ruleId":"133","severity":1,"message":"174","line":142,"column":8,"nodeType":"135","endLine":142,"endColumn":17,"suggestions":"175"},{"ruleId":"133","severity":1,"message":"176","line":146,"column":8,"nodeType":"135","endLine":146,"endColumn":10,"suggestions":"177"},{"ruleId":"156","severity":1,"message":"167","line":201,"column":49,"nodeType":"158","messageId":"159","endLine":201,"endColumn":51},{"ruleId":"124","replacedBy":"178"},{"ruleId":"126","replacedBy":"179"},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["182"],"React Hook useCallback has a missing dependency: 'token'. Either include it or remove the dependency array.",["183"],"'DataGrid' is defined but never used.","'formatter' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'curRole' and 'props'. Either include them or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["185"],"'linkMaterial' is defined but never used.","'ListItem' is defined but never used.","'useContext' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Box' is defined but never used.","React Hook useEffect has a missing dependency: 'treners'. Either include it or remove the dependency array.",["186"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MenuItem' is defined but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","'currency' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'zanytie'. Either include it or remove the dependency array.",["187"],"Expected '!==' and instead saw '!='.","'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'infoTrener'. Either include it or remove the dependency array.",["189"],"'ScheduleIcon' is defined but never used.","React Hook useCallback has missing dependencies: 'curId' and 'token'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'nouting'. Either include it or remove the dependency array.",["191"],["180"],["181"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},"Update the dependencies array to be: [loading]",{"range":"212","text":"213"},"Update the dependencies array to be: [token]",{"range":"214","text":"215"},"Update the dependencies array to be: [curId, request, token, curRole, props]",{"range":"216","text":"217"},"Update the dependencies array to be: [client]",{"range":"218","text":"219"},"Update the dependencies array to be: [treners]",{"range":"220","text":"221"},"Update the dependencies array to be: [zanytie]",{"range":"222","text":"223"},"Update the dependencies array to be: [info]",{"range":"224","text":"225"},"Update the dependencies array to be: [infoTrener]",{"range":"226","text":"227"},"Update the dependencies array to be: [curId, request, token]",{"range":"228","text":"229"},"Update the dependencies array to be: [nouting]",{"range":"230","text":"231"},[928,930],"[loading]",[619,621],"[token]",[6945,6968],"[curId, request, token, curRole, props]",[7033,7035],"[client]",[2096,2098],"[treners]",[4054,4056],"[zanytie]",[4680,4682],"[info]",[4737,4739],"[infoTrener]",[4350,4359],"[curId, request, token]",[4413,4415],"[nouting]"]