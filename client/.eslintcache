[{"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js":"1","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js":"2","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js":"3","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js":"4","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js":"5","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js":"6","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js":"7","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js":"8","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js":"9","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js":"10","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js":"11","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js":"12","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js":"13","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js":"14","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js":"15","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js":"16","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js":"17","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Diagram.js":"18","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ResetPage.js":"19","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ResetPageNewPassword.js":"20","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\AlertPass.js":"21","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\PayForm.js":"22","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\RegistrationPage.js":"23","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\LongingAbonPage.js":"24","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\PayInfo.js":"25","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutPage.js":"26","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\GoogleMaps.js":"27","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ChatBot.js":"28","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ChangePage.js":"29","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\TrensCalendar.js":"30"},{"size":158,"mtime":1621802396561,"results":"31","hashOfConfig":"32"},{"size":1199,"mtime":1621770953052,"results":"33","hashOfConfig":"32"},{"size":4830,"mtime":1621770355096,"results":"34","hashOfConfig":"32"},{"size":5840,"mtime":1621770207348,"results":"35","hashOfConfig":"32"},{"size":1382,"mtime":1621770809168,"results":"36","hashOfConfig":"32"},{"size":202,"mtime":1611136113590,"results":"37","hashOfConfig":"32"},{"size":247,"mtime":1620641190412,"results":"38","hashOfConfig":"32"},{"size":1460,"mtime":1621770712781,"results":"39","hashOfConfig":"32"},{"size":35193,"mtime":1622300881400,"results":"40","hashOfConfig":"32"},{"size":3003,"mtime":1622305081847,"results":"41","hashOfConfig":"32"},{"size":22940,"mtime":1622124313122,"results":"42","hashOfConfig":"32"},{"size":21833,"mtime":1622476528214,"results":"43","hashOfConfig":"32"},{"size":21004,"mtime":1621420456258,"results":"44","hashOfConfig":"32"},{"size":1327,"mtime":1613065739598,"results":"45","hashOfConfig":"32"},{"size":19076,"mtime":1622470380347,"results":"46","hashOfConfig":"32"},{"size":1813,"mtime":1613072944753,"results":"47","hashOfConfig":"32"},{"size":1328,"mtime":1621428798148,"results":"48","hashOfConfig":"32"},{"size":2456,"mtime":1621518978082,"results":"49","hashOfConfig":"32"},{"size":5176,"mtime":1621600145481,"results":"50","hashOfConfig":"32"},{"size":5689,"mtime":1621598753517,"results":"51","hashOfConfig":"32"},{"size":845,"mtime":1618689734561,"results":"52","hashOfConfig":"32"},{"size":1877,"mtime":1620162589547,"results":"53","hashOfConfig":"32"},{"size":18021,"mtime":1620652234866,"results":"54","hashOfConfig":"32"},{"size":13823,"mtime":1620826003016,"results":"55","hashOfConfig":"32"},{"size":11764,"mtime":1621599133017,"results":"56","hashOfConfig":"32"},{"size":15410,"mtime":1622296605651,"results":"57","hashOfConfig":"32"},{"size":1298,"mtime":1621413788533,"results":"58","hashOfConfig":"32"},{"size":1548,"mtime":1621421013532,"results":"59","hashOfConfig":"32"},{"size":8698,"mtime":1621544322339,"results":"60","hashOfConfig":"32"},{"size":1561,"mtime":1622479293985,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"f5z9i0",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"64"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\index.js",[],["140","141"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\App.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\routes.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\AuthPage.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\http.hook.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\message.hook.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\hooks\\auth.hook.js",["142"],"import {useState, useCallback, useEffect} from 'react'\r\n\r\n//инициализация хранилища\r\nconst storageName='userData'\r\nexport const useAuth =()=>{\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId]=useState(null)\r\n    const [role, setUserRole]=useState(null)\r\n    const [email, setUserEmail]=useState(null)\r\n\r\n    //логика авторизации пользователя\r\n    const login = useCallback((jwtToken, id, role, email)=>{\r\n        console.log('token', token)\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setUserRole(role)\r\n        setUserEmail(email)\r\n        console.log('role', role)\r\n        localStorage.setItem(storageName, JSON.stringify({userId: id,token: jwtToken, role: role, email:email}))\r\n    }, [])\r\n    //логика выхода пользователя из системы\r\n    const logout =useCallback(()=>{\r\n        setToken(null)\r\n        setUserId(null)\r\n        setUserRole(null)\r\n        setUserEmail(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    //обработка данных\r\n    useEffect(()=>{\r\n        const data=JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n            login(data.token, data.userId, data.role, data.email)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return {login, logout, token, userId,ready, role, email}\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ClientPage.js",["143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport {Link, Route, useHistory} from \"react-router-dom\";\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from '../components/Loader'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {Card, CardActions, CardMedia} from \"@material-ui/core\";\r\nimport {Diagram} from \"../components/Diagram\";\r\nimport {PayForm} from \"../components/PayForm\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport BuildIcon from '@material-ui/icons/Build';\r\nimport HttpsIcon from '@material-ui/icons/Https';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\n\r\nmoment.locale('ru');\r\nconst drawerWidth = 240;\r\nconst formatter = new Intl.DateTimeFormat(\"ru\", {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\"\r\n});\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    large: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 'auto',\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"101.25%\"\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n        height: 'auto',\r\n    },\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(3),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 500,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paperModal: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n}));\r\n\r\nexport const ClientPage = (props) => {\r\n    const {token} = useContext(AuthContext)\r\n    const auth=useContext(AuthContext)\r\n    const {loading, request} = useHttp();\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const curId = props.userId\r\n    const curRole = props.role\r\n    const history = useHistory()\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    const [clientForm, setClientForm] = useState([{}])\r\n    const [adminForm, setAdminForm] = useState([{}])\r\n    const [payInfo, setPayInfo] = useState([{}])\r\n    const [payModal, setPayModal] = useState(false)\r\n    const [changeModal, setChangeModal] = useState(false)\r\n    const [rowsClient, setRowsClient] = useState([{id:1}])\r\n    const [rowsAdmin, setRowsAdmin] = useState([{id:1}])\r\n    const [rowsTrener, setRowsTrener] = useState([{id:1}])\r\n    const [rowsRoles, setRowsRoles] = useState([{id:1}])\r\n    const [rowsAllClients, setRowsAllClients] = useState([{id:1}])\r\n    const [newRole, setNewRole] = useState()\r\n    const [allRoles, setRoles] = useState([{}])\r\n    const [select, setSelect] = useState([])\r\n\r\n    const columns = [\r\n        { field: 'FIO_cl', headerName: 'ФИО клиента', width: 150 },\r\n        { field: 'nazvanie', headerName: 'Название', width: 150 },\r\n        { field: 'fio_trener', headerName: 'ФИО тренера', width:150 },\r\n        { field: 'datatime', headerName: 'Дата и время', width: 150},\r\n        {\r\n            field: 'status',\r\n            headerName: 'Статус',\r\n            width: 120,\r\n        },\r\n    ];\r\n    const logoutHandler = event => {\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/fitzone')\r\n    };\r\n\r\n    const changeRoleOpen = () => {\r\n        setChangeModal(true);\r\n    };\r\n\r\n    const changeRoleClose = () => {\r\n        setChangeModal(false);\r\n        roles()\r\n    };\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleModalPayOpen = () => {\r\n        setPayModal(true);\r\n    };\r\n    const handleModalPayСlose = () => {\r\n        setPayModal(false);\r\n    };\r\n    const handleChangeRole = (event) => {\r\n        setNewRole(event.target.value);\r\n    };\r\n\r\n    const submitTren = async (id, statusNew) => {\r\n        console.log(\"card\", id)\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/admin/updating/${curId}`, 'POST', {\r\n            ...select,\r\n                statusNew\r\n            }, {Authorization: `Bearer ${token}`})\r\n            console.log(\"\", fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        switch (curRole) {\r\n            case 'admin':\r\n                admin()\r\n                break\r\n            case 'tren':\r\n                trener()\r\n                break\r\n            case 'cl':\r\n                client()\r\n        }\r\n    }\r\n\r\n    const client = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/client/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log('ИНформация о пользователе', fetched.result)\r\n            setClientForm(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n\r\n    const clientsTren = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/clientstren/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log('ИНформация о пользователе111', fetched.result)\r\n            setRowsClient(fetched.result)\r\n            //setClientsTrenForm(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n\r\n    const admin = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/admin/${curId}`, 'GET', null, {Authorization: `Bearer ${token}`})\r\n           // setAdminForm(fetched.result)\r\n            setRowsAdmin(fetched.result)\r\n            console.log(\"!!!\",adminForm)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n    const trener = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/trener/${curId}`, 'GET', null, {Authorization: `Bearer ${token}`})\r\n            setRowsTrener(fetched.result)\r\n            //setTrenerForm(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n    const roles = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/roles`, 'GET', null, {})\r\n            setRowsRoles(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const allrole = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/registration/role`, 'GET', null, {})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setRoles(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const changeRole = async (select, newRole) => {\r\n        changeRoleClose()\r\n        allrole()\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/roles/change`, 'POST', {...select, newRole}, {})\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    const allClientsInfo = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/client/clientPage/allclientsinfo`, 'GET', null, {})\r\n            console.log(\"12346\",fetched.result)\r\n            setRowsAllClients(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    },[])\r\n\r\n        useEffect(() => {\r\n            admin()\r\n            roles()\r\n            allrole()\r\n        }, [])\r\n        useEffect(() => {\r\n            trener()\r\n        }, [])\r\n        useEffect(() => {\r\n            client()\r\n            clientsTren()\r\n        }, [])\r\n    useEffect(() => {\r\n       allClientsInfo()\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\nconsole.log(\"PayInfo\", payInfo)\r\n    return (\r\n            <div className={classes.root}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    {loading && <Loader/>}\r\n                    {!loading && clientForm.length != 0 && (\r\n                        <>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            {clientForm[0][\"FIO_cl\"]}\r\n                        </Typography>\r\n\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                                Клиент\r\n                            </Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                        </Box>\r\n                        <Box mr={2}>\r\n                            <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые\r\n                                тренировки</Button>\r\n                        </Box>\r\n                        <Button component={Link} to=\"/fitzone\" color=\"inherit\" align=\"center\"\r\n                                onClick={logoutHandler}>Выйти</Button>\r\n                    </Toolbar>\r\n                        </>\r\n                    )}\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon/>\r\n\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List>\r\n                        <ListItem button component={Link} to=\"/change \">\r\n                            <ListItemIcon>\r\n                                <BuildIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Редактировать\"/>\r\n                        </ListItem>\r\n                        <ListItem button component={Link} to=\"/changepassword \">\r\n                            <ListItemIcon>\r\n                                <HttpsIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Смена пароля\"/>\r\n                        </ListItem>\r\n                        {curRole=='cl' && (\r\n                            <>\r\n                            <ListItem button component={Link} to=\"/longingabon\">\r\n                                <ListItemIcon>\r\n                                    <FaceIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Продлить абонемент\"/>\r\n                            </ListItem>\r\n                            <ListItem button component={Link} to=\"/noutingpt\">\r\n                                <ListItemIcon>\r\n                                    <FitnessCenterIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Записаться\"/>\r\n                            </ListItem>\r\n                            </>\r\n                        )}\r\n                        {curRole=='admin' && (\r\n                            <>\r\n                        <ListItem button component={Link} to=\"/registration\">\r\n                            <ListItemIcon>\r\n                                <BorderColorIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Зарегестрировать\"/>\r\n                        </ListItem>\r\n                                <ListItem button component={Link} to=\"/offlinepay\">\r\n                                    <ListItemIcon>\r\n                                        <AccountBalanceWalletIcon />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Оплатить\"/>\r\n                                </ListItem>\r\n                            <ListItem button component={Link} to=\"/nout\">\r\n                            <ListItemIcon>\r\n                            <BorderColorIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Запись\"/>\r\n                            </ListItem>\r\n                        </>\r\n                        )}\r\n                    </List>\r\n                    <Divider/>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer}/>\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            {loading && <Loader/>}\r\n                            {!loading && clientForm.length != 0 && (\r\n\r\n                            <Grid item xs={12} md={4} lg={3}>\r\n                                <Card>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={clientForm[0][\"img\"]}\r\n                                               title=\"Image title\"/>\r\n                                </Card>\r\n                            </Grid>\r\n\r\n                                )}\r\n                            {/* Chart */}\r\n                            <Grid item xs={12} md={8} lg={9}>\r\n                                {loading && <Loader/>}\r\n                                {!loading && (rowsAdmin.length > 1 || rowsClient.length >1 || rowsTrener.length>1) && (\r\n                                        <Paper className={fixedHeightPaper}>\r\n                                            <TableContainer component={Paper}>\r\n                                                <Table className={classes.table} size=\"small\"\r\n                                                       aria-label=\"a dense table\">\r\n                                                    {curRole == 'admin' && rowsAdmin.length >1 && (\r\n                                                        <div>\r\n                                                            <div style={{height: 400, width: '100%'}}>\r\n                                                                    <DataGrid rows={rowsAdmin} columns={columns}\r\n                                                                              pageSize={5} checkboxSelection onRowSelected={(x) => setSelect(x.data)}/>\r\n                                                        </div>\r\n                                                            <div align=\"right\">\r\n                                                                <Button onClick={()=>submitTren(select, \"Подтверждено\")}>Подтвердить</Button>\r\n                                                                <Button onClick={()=>submitTren(select, \"Не подтверждено\")}>Отменить</Button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        )}\r\n                                                    {curRole == 'cl' && rowsClient.length>1 && (\r\n                                                        <>\r\n                                                            <Typography variant='h5'>Мои персональные тренировки</Typography>\r\n                                                            <div align=\"right\">\r\n                                                                <div align=\"right\">\r\n                                                                    <Button onClick={handleModalPayOpen}>Оплатить</Button>\r\n                                                                </div>\r\n                                                                <Dialog\r\n                                                                    open={payModal}\r\n                                                                    keepMounted\r\n                                                                    onClose={handleModalPayСlose}\r\n                                                                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                                                                    aria-describedby=\"alert-dialog-slide-description\"\r\n                                                                >\r\n                                                                    <DialogTitle id=\"alert-dialog-slide-title\">Оплата персональной тренировки</DialogTitle>\r\n                                                                    <DialogContent>\r\n                                                                        <PayForm type={\"Оплата персональной тренировки\"} sum={select.sumkoplate}/>\r\n                                                                    </DialogContent>\r\n                                                                    <DialogActions>\r\n                                                                        <Button onClick={handleModalPayСlose} color=\"primary\">\r\n                                                                            Позже\r\n                                                                        </Button>\r\n                                                                    </DialogActions>\r\n                                                                 </Dialog>\r\n                                                            </div>\r\n                                                            <div style={{height: 400, width: '100%'}}>\r\n                                                                <DataGrid rows={rowsClient} columns={[\r\n                                                                    { field: 'fio_trener', headerName: 'ФИО тренера', width: 150 },\r\n                                                                    { field: 'nazvanie', headerName: 'Название', width: 150 },\r\n                                                                    { field: 'datatime', headerName: 'Дата и время', width: 150},\r\n                                                                    { field: 'status', headerName: 'Статус', width: 150,},\r\n                                                                    { field: 'oplacheno', headerName: 'Оплачено', width: 100,},\r\n                                                                    { field: 'sumkoplate', headerName: 'Сумма к оплате', width: 120,},]}\r\n                                                                          pageSize={5} checkboxSelection onRowSelected={(x) => setSelect(x.data)}/>\r\n                                                            </div>\r\n                                                            <div align=\"right\">\r\n                                                                <Button onClick={()=>submitTren(select, \"Подтверждено\")}>Подтвердить</Button>\r\n                                                                <Button onClick={()=>submitTren(select, \"Не подтверждено\")}>Отменить</Button>\r\n                                                            </div>\r\n\r\n                                                        </>\r\n                                                    )}\r\n                                                    {curRole == 'tren' && rowsTrener.length>1 && (\r\n                                                        <>\r\n                                                            <Typography variant='h5'>Сведения о проводимых персональных тренировках</Typography>\r\n                                                            <div style={{height: 400, width: '100%'}}>\r\n                                                                <DataGrid rows={rowsTrener} columns={[\r\n                                                                    { field: 'FIO_cl', headerName: 'ФИО клиента', width: 150 },\r\n                                                                    { field: 'nazvanie', headerName: 'Название', width: 150 },\r\n                                                                    { field: 'datatime', headerName: 'Дата и время', width: 150},\r\n                                                                    { field: 'status', headerName: 'Статус', width: 120,},\r\n                                                                   ]}\r\n                                                                          pageSize={5} checkboxSelection onRowSelected={(x) => setSelect(x.data)}/>\r\n                                                            </div>\r\n                                                            <div align=\"right\">\r\n                                                                <Button onClick={()=>submitTren(select, \"Подтверждено\")}>Подтвердить</Button>\r\n                                                                <Button onClick={()=>submitTren(select, \"Не подтверждено\")}>Отменить</Button>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Table>\r\n                                            </TableContainer>\r\n                                        </Paper>\r\n                                )}\r\n                            </Grid>\r\n                            {loading && <Loader/>}\r\n                            {!loading && allRoles.length != 0 && curRole == 'admin' && (\r\n                                <>\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n\r\n                                            <Diagram/>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Paper className={classes.paper}>\r\n                                            <Typography variant='h5'>Уровень доступа</Typography>\r\n                                            <div style={{height: 400, width: '100%'}}>\r\n                                                <DataGrid rows={rowsRoles} columns={[\r\n                                                    { field: 'FIO_cl', headerName: 'ФИО клиента', width: 150 },\r\n                                                    { field: 'email', headerName: 'email', width: 150 },\r\n                                                    { field: 'role', headerName: 'Уровень доступа', width: 150},\r\n                                                ]}\r\n                                                          pageSize={5} checkboxSelection onRowSelected={(x) => setSelect(x.data)}/>\r\n                                            </div>\r\n                                            <div align=\"right\">\r\n                                                <Button onClick={changeRoleOpen}>Сменить уровень доступа</Button>\r\n                                                <Dialog onClose={changeRoleClose} aria-labelledby=\"customized-dialog-title\" open={changeModal}>\r\n                                                    <DialogTitle id=\"customized-dialog-title\" onClose={changeRoleClose}>\r\n                                                        <div className={classes.rootAvatar}>\r\n                                                            <Typography gutterBottom paragraph>Вы действительно хотите выделить пользователю {select.FIO_cl} другой уровень прав?</Typography>\r\n                                                        </div>\r\n                                                    </DialogTitle>\r\n                                                    <DialogContent dividers>\r\n                                                        <main className={classes.layout}>\r\n                                                            <Paper className={classes.paperModal}>\r\n                                                                <Grid container spacing={3}>\r\n                                                                    <Grid item xs={12} md={6}>\r\n                                                                        <TextField disabled id=\"standard-disabled\" label=\"ФИО пользователя\" defaultValue={select.FIO_cl} />\r\n                                                                    </Grid>\r\n                                                                    <Grid item xs={12} md={6}>\r\n                                                                        <TextField disabled id=\"standard-disabled\" label=\"email\" defaultValue={select.email} />\r\n                                                                    </Grid>\r\n                                                                    <Grid item xs={12} md={6}>\r\n                                                                        <FormHelperText required>Уровень доступа</FormHelperText>\r\n                                                                        <NativeSelect className={classes.select}\r\n                                                                                      defaultValue={allRoles[0].role}\r\n                                                                                      inputProps={{\r\n                                                                                          id: 'role',\r\n                                                                                      }}\r\n                                                                                      onChange={handleChangeRole}\r\n                                                                        >\r\n                                                                            {allRoles.map((option) => (\r\n                                                                                <option value={option.role} key=\r\n                                                                                    {option.role}>\r\n                                                                                    {option.role}\r\n                                                                                </option>\r\n                                                                            ))}\r\n                                                                        </NativeSelect>\r\n                                                                    </Grid>\r\n                                                                </Grid>\r\n                                                            </Paper>\r\n                                                        </main>\r\n                                                    </DialogContent>\r\n                                                    <DialogActions>\r\n                                                        <Button autoFocus onClick={()=>changeRole(select, newRole)} color=\"primary\">\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                        <Button autoFocus onClick={changeRoleClose} color=\"primary\">\r\n                                                            Назад\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </div>\r\n                                        </Paper>\r\n                                    </Grid> \r\n                            </>\r\n                            )}\r\n\r\n                        </Grid>\r\n                        {(curRole == 'admin' || curRole == 'tren') && (\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Grid item xs={12}>\r\n                                    <Paper className={classes.paper}>\r\n                                        <Typography variant='h5'>Сведения о клиентах</Typography>\r\n                                        <div style={{height: 400, width: '100%'}}>\r\n                                            <DataGrid rows={rowsAllClients} columns={[\r\n                                                { field: 'FIO_cl', headerName: 'ФИО клиента', width: 150 },\r\n                                                { field: 'Phone', headerName: 'Контактный телефон', width: 150 },\r\n                                                { field: 'Age', headerName: 'Дата рождения', width: 150},\r\n                                                { field: 'type', headerName: 'Тип абонемента', width: 150},\r\n                                                { field: 'srok', headerName: 'Срок действия в днях', width: 150},\r\n                                                { field: 'Activity', headerName: 'Активность абонемента', width: 150},\r\n                                                { field: 'DateActivity', type:'date', headerName: 'Дата начала действия', width: 150},\r\n                                                { field: 'endOfActivity',type:'date', headerName: 'Дата окончания действия', width: 150},\r\n                                            ]}\r\n                                                      pageSize={5} />\r\n                                        </div>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Paper>\r\n                        )}\r\n                    </Container>\r\n                </main>\r\n\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Navbar.js",["169","170","171","172","173","174"],"import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {Link as linkMaterial, AppBar,Container, Toolbar,IconButton,Box,Typography}from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        //backgroundImage: \"C:\\\\Users\\\\Alina\\\\WebstormProjects\\\\fittest\\\\src\\\\slider-1.jpg\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nexport const Navbar = () =>{\r\n    const history=useHistory()\r\n    const auth=useContext(AuthContext)\r\n    const classes = useStyles();\r\n\r\n    const logoutHandler=event=>{\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/fitzone')\r\n\r\n    }\r\n    return (\r\n        <AppBar position='fixed'>\r\n        <Container fixed>\r\n            <Toolbar>\r\n                <IconButton edge='start' color=\"inherit\" aria-label='menu' className={classes.menuButton}>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}> FitZone\r\n                </Typography>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/clientPage\" color=\"inherit\" align=\"left\">\r\n                        Личный кабинет\r\n                    </Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                <Button component={Link} to=\"/trenersPage\" color=\"inherit\" align=\"left\">Тренеры</Button>\r\n                </Box>\r\n                <Box mr={2}>\r\n                    <Button component={Link} to=\"/zanytiyPage\" color=\"inherit\" align=\"left\">Групповые тренировки</Button>\r\n                </Box>\r\n                <Button component={Link} to=\"/\" color=\"inherit\" align=\"center\" onClick={logoutHandler}>Выйти</Button>\r\n\r\n\r\n            </Toolbar>\r\n        </Container>\r\n    </AppBar>\r\n\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\TrenersPage.js",["175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {AppBar,Container, Toolbar, IconButton, Typography,Box,Paper,Grid,Card,CardMedia,CardContent, CardActions} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Loader} from \"../components/Loader\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        height: theme.spacing (15),\r\n        padding: theme.spacing(8),\r\n        width: \"auto\",\r\n        backgroundImage: 'url(img/trenerspage.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    select:{\r\n        marginTop:theme.spacing(2)\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\n\r\nexport const TrenersPage = (props) => {\r\n    const {request,loading} = useHttp();\r\n    const curRole=props.role\r\n    const [trenerForm, setTrenerForm] = useState([{}])\r\n    const [name, setName]=useState()\r\n    const [stag, setStag]=useState()\r\n    const [phone, setPhone]=useState()\r\n    const [kategory, setKategory]=useState()\r\n    const [opisanie, setOpisanie]=useState()\r\n    const [citat, setCitat]=useState()\r\n    const [trener, setIdTrener]=useState()\r\n    const [state, setState] = useState({openModal: false, stationNumber: 1});\r\n    const [stateDelete, setStateDelete] = useState({openModalDelete: false, stationNumber: 1});\r\n    const [statePodrobno, setStatePodrobno] = React.useState({\r\n        openModalPodrobno: false,\r\n        stationNumber: 1,\r\n    });\r\n\r\n    const handleChangeName =(event) => {\r\n        setName(event.target.value)\r\n    };\r\n    const handleChangeStag = (event) => {\r\n        setStag(event.target.value);\r\n    };\r\n    const handleChangePhone =(event) => {\r\n        setPhone(event.target.value)\r\n    };\r\n    const handleChangeKategory =(event) => {\r\n        setKategory(event.target.value)\r\n    };\r\n    const handleChangeOpisanie =(event) => {\r\n        setOpisanie(event.target.value)\r\n    };\r\n    const handleChangeCitat =(event) => {\r\n        setCitat(event.target.value)\r\n    };\r\n\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        setStatePodrobno({openModalPodrobno:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setStatePodrobno({openModalPodrobno:false,stationNumber: 1});\r\n    };\r\n\r\n    const handleClickOpen = async (name, stag, phone, kategory, opisanie, citat, trener) => {\r\n        //setOpen(true);\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'POST',{name, stag, phone, kategory, opisanie, citat, trener})\r\n            console.log(\"\",fetched)\r\n            handleClose()\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    const handleOpen = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n        setName(trenerForm[stationNumber-1].fio_trener)\r\n        setStag(trenerForm[stationNumber-1].stag)\r\n        setPhone(trenerForm[stationNumber-1].phone)\r\n        setKategory(trenerForm[stationNumber-1].kategory)\r\n        setOpisanie(trenerForm[stationNumber-1].opisanie)\r\n        setCitat(trenerForm[stationNumber-1].citat)\r\n        setIdTrener(stationNumber)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n        treners()\r\n    };\r\n\r\n    const handleOpenDelete = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setStateDelete({openModalDelete:true,stationNumber: stationNumber});\r\n\r\n    };\r\n\r\n    const handleCloseDelete = () => {\r\n        setStateDelete({openModalDelete:false,stationNumber: 1});\r\n        treners()\r\n    };\r\n    const treners = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Преобразование 1\", fetched.result[0].img)\r\n            setTrenerForm(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        treners()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n     return (\r\n        <main>\r\n            {loading && <Loader/>}\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    FitZone\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Рядом с Вами всегда профессионалы!\r\n                                </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color='primary'\r\n                                    component={Link} to=\"/noutingpt\">\r\n                                    Начать сейчас\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && trenerForm.length != 0 && (\r\n                    <>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        trenerForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <Typography> Стаж работы:\r\n                                            {card.stag}\r\n                                        </Typography>\r\n                                        <Typography> Контактные данные:\r\n                                            {card.phone}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\" onClick={handleClickOpenModal(card.idtrener)}>\r\n                                            Подробно\r\n                                        </Button>\r\n                                        <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={statePodrobno.openModalPodrobno}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                <div className={classes.rootAvatar}>\r\n                                                    <Avatar src={trenerForm[(statePodrobno.stationNumber)-1].img} />\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].fio_trener}\r\n                                                </div>\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].kategory}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].opisanie}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {trenerForm[(statePodrobno.stationNumber)-1].citat}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                                <Button size=\"small\" color=\"primary\" onClick={handleOpen(card.idtrener)}>\r\n                                                    Редактировать\r\n                                                </Button>\r\n                                                <Dialog open={state.openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                                    <DialogTitle id=\"form-dialog-title\">Редактировать {trenerForm[(state.stationNumber)-1].fio_trener}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Редактировать тренера\r\n                                                        </DialogContentText>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangeName}\r\n                                                                    value={name}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"name\"\r\n                                                                    label=\"ФИО тренера\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].fio_trener}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangeStag}\r\n                                                                    value={stag}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"stag\"\r\n                                                                    label=\"Стаж работы\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].stag}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    onChange={handleChangePhone}\r\n                                                                    value={phone}\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"phone\"\r\n                                                                    label=\"Контактный телефон\"\r\n                                                                    defaultValue={trenerForm[(state.stationNumber)-1].phone}\r\n                                                                    fullWidth\r\n                                                                />\r\n                                                            </FormControl>\r\n                                                            <NativeSelect className={classes.select}\r\n                                                                defaultValue={trenerForm[(state.stationNumber)-1].kategory}\r\n                                                                inputProps={{\r\n                                                                    id: 'kategory',\r\n                                                                }}\r\n                                                                onChange={handleChangeKategory}\r\n                                                            >\r\n                                                                {trenerForm.map((option) => (\r\n                                                                    <option value={option.kategory} key=\r\n                                                                        {option.idtrener}>\r\n                                                                        {option.kategory}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </NativeSelect>\r\n                                                        </div>\r\n\r\n                                                    </DialogContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Информация о тренере</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeOpisanie}\r\n                                                            aria-label=\"Информация о тренере\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={trenerForm[(state.stationNumber)-1].opisanie}\r\n                                                        />\r\n                                                    </FormControl>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Мотивация</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeCitat}\r\n                                                            aria-label=\"Мотивация\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={trenerForm[(state.stationNumber)-1].citat}\r\n                                                        />\r\n                                                    </FormControl>\r\n\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} color=\"primary\">\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                        <Button onClick={()=>handleClickOpen(name, stag, phone, kategory, opisanie, citat, trener)} color=\"primary\">\r\n                                                            {console.log('ZanForm',trenerForm[(state.stationNumber)-1])}\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                                <Button size=\"small\" color=\"primary\" onClick={handleOpenDelete(card.idtrener)}>\r\n                                                    Удалить\r\n                                                </Button>\r\n                                                <Dialog\r\n                                                    open={stateDelete.openModalDelete}\r\n                                                    onClose={handleCloseDelete}\r\n                                                    aria-labelledby=\"delete-dialog-title\"\r\n                                                >\r\n                                                    <DialogTitle id=\"delete-dialog-title\">Удалить {trenerForm[(state.stationNumber)-1].fio_trener}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Вы действительно хотите удалить тренера {trenerForm[(state.stationNumber)-1].fio_trener}?\r\n                                                            Восстановление информации будет невозможно.\r\n                                                        </DialogContentText>\r\n                                                    </DialogContent>\r\n                                                    <DialogActions>\r\n                                                        <Button autoFocus onClick={handleCloseDelete} color=\"primary\">\r\n                                                            Удалить\r\n                                                        </Button>\r\n                                                        <Button onClick={handleCloseDelete} color=\"primary\" autoFocus>\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ZanytiyPage.js",["188","189","190","191","192","193","194","195","196"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography, Box} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Loader} from \"../components/Loader\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport moment from \"moment\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {MyCalendar} from \"../components/TrensCalendar\";\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\nroot: {\r\n    flexGrow: 1\r\n},\r\nmenuButton: {\r\n    marginRight: theme.spacing(1)\r\n},\r\nButtons:{\r\n    position: \"center\"\r\n},\r\ntitle: {\r\n    flexGrow: 1\r\n},\r\n\r\nmainFeaturesPost: {\r\n    position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n},\r\noverlay: {\r\n    position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n},\r\nmainFeaturesPostContent: {\r\n    position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n},\r\ncardMedia: {\r\n    paddingTop: \"56.25%\"\r\n},\r\ncardContent: {\r\n    flexGrow: 1\r\n},\r\ncardGrid: {\r\n    marginTop: theme.spacing(4)\r\n},\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 100,\r\n    },\r\n    fixedHeight: {\r\n        height: 'auto',\r\n    },\r\n\r\n\r\n}))\r\n\r\nexport const ZanytiyPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [zanytieForm, setZanytieForm] = useState([])\r\n    const curRole=props.role\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = useState({openModal: false, stationNumber: 1,});\r\n    const [statePodrobno, setStatePodrobno] = useState({openModalPodrobno: false, stationNumber: 1,});\r\n    const [name, setName]=useState()\r\n    const [number, setNumber]=useState()\r\n    const [trener, setTrener] = useState();\r\n    const [opisanie, setOpisanie] = useState();\r\n    const [opodrobno, setOpodrobno] = useState();\r\n    const [idzanytie, setIdZanytie] = useState();\r\n\r\n\r\n    const handleChangeName =(event) => {\r\n       setName(event.target.value)\r\n\r\n    };\r\n    const handleChangeNumber = (event) => {\r\n        setNumber(event.target.value);\r\n    };\r\n\r\n    const handleChangeTrener = (event) => {\r\n        setTrener(event.target.value);\r\n    };\r\n    const handleChangeOpisanie = (event) => {\r\n        setOpisanie(event.target.value);\r\n    };\r\n\r\n    const handleChangeOpodrobno = (event) => {\r\n        setOpodrobno(event.target.value);\r\n    };\r\n    const handleOpenPodrobno = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setStatePodrobno({openModalPodrobno:true,stationNumber: stationNumber});\r\n    };\r\n    const handleOpen = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n        setName(zanytieForm[stationNumber-1].nazvanie)\r\n        setNumber(zanytieForm[stationNumber-1].numberzal)\r\n        setSelectedDate(zanytieForm[stationNumber-1].datetime)\r\n        setTrener(zanytieForm[stationNumber-1].idtrenera)\r\n        setOpisanie(zanytieForm[stationNumber-1].opisanie)\r\n        setOpodrobno(zanytieForm[stationNumber-1].opisaniepodrobno)\r\n        setIdZanytie(stationNumber)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n        zanytie()\r\n    };\r\n    const handleClosePodrobno = () => {\r\n        setStatePodrobno({openModalPodrobno:false,stationNumber: 1});\r\n    };\r\n    const handleDateChange=(date)=>{\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n    const handleClickOpen = async (name, number, trener, opisanie, opisaniepodrobno, selectedDate, idzanytie) => {\r\n        try {\r\n            const fetched = await request(`/api/zanytiy/zanytiyPage`, 'POST',{name, number, trener, opisanie, opisaniepodrobno, selectedDate, idzanytie})\r\n            console.log(\"\",fetched)\r\n            handleClose()\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n    const zanytie = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/zanytiy/zanytiyPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            console.log(\"Выборка\",fetched.result[0].img)\r\n\r\n\r\n            setZanytieForm(fetched.result)\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        zanytie()\r\n    }, [])\r\n    const classes = useStyles();\r\n    return(\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    FitZone\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Прививаем любовь к спорту с первого шага!\r\n                                </Typography>\r\n                                <Button variant=\"contained\" color='secondary'>\r\n                                    Начать сейчас\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Paper className={classes.fixedHeight}>\r\n              <MyCalendar />\r\n                </Paper>\r\n                {loading && <Loader/>}\r\n                {!loading && zanytieForm.length != 0 && (\r\n                    <>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        zanytieForm.map((card) => (\r\n\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.opisanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            <AccessTimeIcon/>{moment(card.datetime).format(\"LLLL\")}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button size=\"small\" color=\"primary\" onClick={handleOpenPodrobno(card.idzanytie)}>\r\n                                            Подробно\r\n                                        </Button>\r\n                                        <Dialog onClose={handleClosePodrobno} aria-labelledby=\"customized-dialog-title\" open={statePodrobno.openModalPodrobno}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleClosePodrobno}>\r\n                                                    {zanytieForm[(statePodrobno.stationNumber)-1].nazvanie}\r\n\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {zanytieForm[(statePodrobno.stationNumber)-1].opisaniepodrobno}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {moment(zanytieForm[(statePodrobno.stationNumber)-1].datetime).format('LLLL')}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleClosePodrobno} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        {curRole=='admin' && (\r\n                                            <>\r\n                                            <Button size=\"small\" color=\"primary\" onClick={handleOpen(card.idzanytie)}>\r\n                                                Редактировать\r\n                                            </Button>\r\n                                                <Dialog open={state.openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                                    <DialogTitle id=\"form-dialog-title\">Редактировать {zanytieForm[(state.stationNumber)-1].nazvanie}</DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText>\r\n                                                            Редактировать тренировку\r\n                                                        </DialogContentText>\r\n                                                        <div>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                        <TextField\r\n                                                            autoFocus\r\n                                                            onChange={handleChangeName}\r\n                                                            value={name}\r\n                                                            margin=\"dense\"\r\n                                                            id=\"name\"\r\n                                                            label=\"Название тренировки\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].nazvanie}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                            </FormControl>\r\n                                                        <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Тренер</FormHelperText>\r\n                                                        <NativeSelect\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].idtrenera}\r\n                                                            inputProps={{\r\n                                                                id: 'fio_trener',\r\n                                                            }}\r\n                                                            onChange={handleChangeTrener}\r\n                                                        >\r\n                                                            {zanytieForm.map((option) => (\r\n                                                                <option value={option.idtrenera} key=\r\n                                                                    {option.idtrenera}>\r\n                                                                    {option.fio_trener}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </NativeSelect>\r\n                                                        </FormControl>\r\n                                                            <FormControl className={classes.formControl}>\r\n                                                            <TextField\r\n                                                                autoFocus\r\n                                                               margin=\"dense\"\r\n                                                                onChange={handleChangeNumber}\r\n                                                                value={number}\r\n                                                                style={{width: 95}}\r\n                                                                id=\"numberzal\"\r\n                                                                label=\"Номер зала\"\r\n                                                                defaultValue={zanytieForm[(state.stationNumber)-1].numberzal}\r\n                                                                fullWidth\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        </div>\r\n                                                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardDatePicker\r\n                                                                        locale=\"ru\"\r\n                                                                        margin=\"normal\"\r\n                                                                        id=\"date-picker-dialog\"\r\n                                                                        label=\"Дата\"\r\n                                                                        views={['year', 'month', 'date']}\r\n                                                                        value={selectedDate}\r\n                                                                        format=\"dd/MM/yyyy\"\r\n                                                                        onChange={handleDateChange}\r\n                                                                        KeyboardButtonProps={{\r\n                                                                            'aria-label': 'change date',\r\n                                                                        }}\r\n                                                                    />\r\n                                                                        </FormControl>\r\n                                                                    <FormControl className={classes.formControl}>\r\n                                                                    <KeyboardTimePicker\r\n                                                                    margin=\"normal\"\r\n                                                                    id=\"time-picker\"\r\n                                                                    label=\"Время\"\r\n                                                                    value={selectedDate}\r\n                                                                    format=\"HH:MM\"\r\n                                                                    onChange={handleDateChange}\r\n                                                                    KeyboardButtonProps={{\r\n                                                                        'aria-label': 'change time',\r\n                                                                    }}\r\n                                                                />\r\n                                                                    </FormControl>\r\n                                                                </MuiPickersUtilsProvider>\r\n                                                </DialogContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                    <FormHelperText>Краткое описание</FormHelperText>\r\n                                                    <TextareaAutosize\r\n                                                        rowsMax={5}\r\n                                                        onChange={handleChangeOpisanie}\r\n                                                        aria-label=\"Описание программы\"\r\n                                                        placeholder=\"Maximum 4 rows\"\r\n                                                        defaultValue={zanytieForm[(state.stationNumber)-1].opisanie}\r\n                                                    />\r\n                                                    </FormControl>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <FormHelperText>Подробное описание</FormHelperText>\r\n                                                        <TextareaAutosize\r\n                                                            rowsMax={5}\r\n                                                            onChange={handleChangeOpodrobno}\r\n                                                            aria-label=\"Описание программы\"\r\n                                                            placeholder=\"Maximum 4 rows\"\r\n                                                            defaultValue={zanytieForm[(state.stationNumber)-1].opisaniepodrobno}\r\n                                                        />\r\n                                                    </FormControl>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} color=\"primary\">\r\n                                                            Отменить\r\n                                                        </Button>\r\n                                                        <Button onClick={()=>handleClickOpen(name, number, trener, opisanie, opodrobno, selectedDate,idzanytie)} color=\"primary\">\r\n                                                            {console.log('ZanForm',zanytieForm[(state.stationNumber)-1])}\r\n                                                            Изменить\r\n                                                        </Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </>\r\n                                        )}\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n\r\n);\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NotAufPage.js",["197","198","199","200"],"import React, {useEffect, useState, useCallback} from 'react';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {ChatBotComponent} from '../components/ChatBot';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport moment from 'moment'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport {Loader} from \"../components/Loader\";\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {GoogleMap} from \"../components/GoogleMaps\";\r\n\r\n\r\nmoment.lang('ru');\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons: {\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    text: {\r\n        left: 10000000,\r\n    },\r\n    rootAvatar: {\r\n        display: 'flex',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        height: theme.spacing (28),\r\n        padding: theme.spacing(40),\r\n        width: \"auto\",\r\n        backgroundImage: 'url(img/slid.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        // position: \"centre\",\r\n        padding: theme.spacing(40),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        // position:\"right\",\r\n        padding: theme.spacing(20),\r\n        //: 300,\r\n\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    },\r\n    cover: {\r\n        width: 300,\r\n        length: 150,\r\n    },\r\n    rootswipe: {\r\n        maxWidth: 400,\r\n        flexGrow: 1,\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: theme.spacing(4),\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    img: {\r\n        height: 255,\r\n        display: 'block',\r\n        maxWidth: 400,\r\n        overflow: 'hidden',\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    buttonPadding: {\r\n        margin: \"20px\",\r\n    },\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n\r\n}))\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NotAufPage = () => {\r\n    const {loading, request} = useHttp();\r\n    const [infoFormZan, setInfoFormZan] = useState([])\r\n    const [infoFormTrener, setInfoFormTrener] = useState([])\r\n    const [open, setOpen] = React.useState(false);\r\n    const [state, setState] = React.useState({\r\n        openModal: false,\r\n        stationNumber: 1,\r\n    });\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleClickOpenModal = stationNumber =>()=> {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = infoFormZan.length;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const info = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzone', 'GET', null, {})\r\n            setInfoFormZan(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n    const infoTrener = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/notauf/fitzonetreners', 'GET', null, {})\r\n            setInfoFormTrener(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        info()\r\n    }, [])\r\n    useEffect(() => {\r\n        infoTrener()\r\n    }, [])\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <AppBar position='fixed'>\r\n                    <Container fixed>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}> FitZone\r\n                            </Typography>\r\n                            <Box mr={2}>\r\n                                <Button component={Link} to=\"/login\" color=\"inherit\" align=\"left\">\r\n                                    Войти\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Button component={Link} to=\"/registration\" color=\"inherit\" align=\"left\">Регистрация</Button>\r\n                        </Toolbar>\r\n                    </Container>\r\n                </AppBar>\r\n                <Paper className={classes.mainFeaturesPost}>\r\n                    <Container fixed>\r\n                        <div className={classes.overlay}/>\r\n                        <Grid container>\r\n                            <Grid item md={6}>\r\n                                {/*<div className={classes.mainFeaturesPostContent}>*/}\r\n                                    <Typography\r\n                                        component=\"h1\"\r\n                                        variant=\"h3\"\r\n                                        color='inherit'\r\n                                        gutterBottom\r\n                                    >\r\n                                        FitZone\r\n                                    </Typography>\r\n                                    <Typography\r\n\r\n                                        variant='h5'\r\n                                        color='inherit'\r\n                                        paragraph\r\n                                    >\r\n                                       Сеть фитнес-клубов №1\r\n                                    </Typography>\r\n                                    <Typography\r\n\r\n                                        variant='h5'\r\n                                        color='inherit'\r\n                                        paragraph\r\n                                    >\r\n                                        Выбирая нас вы выбираете лучшее для себя и свеого здоровья!\r\n                                    </Typography>\r\n                                {/*</div>*/}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </Paper>\r\n                <div className={classes.mainContent}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone</Typography>\r\n                        <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                            себя </Typography>\r\n                        <div className={classes.mainButtons}>\r\n                            <Grid container spacing={4} justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button component={Link} to=\"/login\" variant=\"contained\" color='primary'>\r\n                                        Начать сейчас\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n\r\n                    <Grid container spacing={4}>\r\n                        <div className={classes.root} align=\"center\">\r\n                            {loading && <Loader/>}\r\n                            {!loading && infoFormZan.length != 0 && (\r\n                                <>\r\n                                    <div className={classes.root} align=\"center\">\r\n                                        <Typography variant=\"h4\">{infoFormZan[activeStep].nazvanie}</Typography>\r\n\r\n                                        <Button className={classes.buttonPadding} variant=\"outlined\" color=\"primary\"\r\n                                                onClick={handleClickOpen}>\r\n                                            Узнать больше\r\n                                        </Button>\r\n                                        <Dialog\r\n                                            open={open}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleClose}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle\r\n                                                id=\"alert-dialog-slide-title\">{infoFormZan[activeStep].nazvanie}</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {infoFormZan[activeStep].opisaniepodrobno}\r\n\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(infoFormZan[activeStep].datetime).format(\"dddd HH:MM\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={handleClose} color=\"primary\">\r\n                                                    ОК\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                    </div>\r\n                                    <img\r\n                                        className={classes.img}\r\n                                        src={infoFormZan[activeStep].img}\r\n                                        alt={infoFormZan[activeStep].idtrenera}\r\n                                    />\r\n                                    <MobileStepper\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        variant=\"text\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                            <Button size=\"small\" onClick={handleNext}\r\n                                                    disabled={activeStep === maxSteps - 1}>\r\n                                                Next\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> :\r\n                                                    <KeyboardArrowRight/>}\r\n                                            </Button>\r\n                                        }\r\n                                        backButton={\r\n                                            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                                {theme.direction === 'rtl' ? <KeyboardArrowRight/> :\r\n                                                    <KeyboardArrowLeft/>}\r\n                                                Back\r\n                                            </Button>\r\n                                        }\r\n                                    />\r\n                                </>\r\n                            )}\r\n\r\n                        </div>\r\n                    </Grid>\r\n                </Container>\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                            infoFormTrener.map((card) => (\r\n\r\n                                <Grid item key={card} xs={12} sm={6} md={4}>\r\n                                    <Card className={classes.card}>\r\n                                        <CardMedia className={classes.cardMedia}\r\n                                                   image={card.img}\r\n                                                   title=\"Image title\"/>\r\n                                        <CardContent className={classes.cardContent}>\r\n                                            <Typography variant=\"h5\" gutterBottom>\r\n                                                {card.fio_trener}\r\n                                            </Typography>\r\n                                            <Typography> Стаж работы:\r\n                                                {card.stag}\r\n                                            </Typography>\r\n                                            <Typography> Контактные данные:\r\n                                                {card.phone}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions>\r\n                                            <Button size=\"small\" color=\"primary\" onClick={handleClickOpenModal(card.idtrener)}>\r\n                                                Подробнее\r\n                                            </Button>\r\n                                            <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={state.openModal}>\r\n                                                <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                                                    <div className={classes.rootAvatar}>\r\n                                                    <Avatar src={infoFormTrener[(state.stationNumber-1)].img} />\r\n                                                    {infoFormTrener[(state.stationNumber-1)].fio_trener}\r\n                                                    {console.log(\"Station number\", state.stationNumber)}\r\n                                                    </div>\r\n                                                </DialogTitle>\r\n                                                <DialogContent dividers>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber-1)].kategory}\r\n                                                    </Typography>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber-1)].opisanie}\r\n                                                    </Typography>\r\n                                                    <Typography gutterBottom paragraph>\r\n                                                        {infoFormTrener[(state.stationNumber-1)].citat}\r\n                                                    </Typography>\r\n                                                </DialogContent>\r\n                                                <DialogActions>\r\n                                                    <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                                        Назад\r\n                                                    </Button>\r\n                                                </DialogActions>\r\n                                            </Dialog>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Container>\r\n                    <Paper className={classes.paper}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                            <GoogleMap/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <div align=\"right\">\r\n                                <Typography variant=\"h3\" gutterBottom>\r\n                                    Где мы находимся?\r\n                                </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        Фитнес-клуб располагается в центре города по адресу:\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        г.Воронеж, площадь Университетская, 1\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                    Часы работы:\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" gutterBottom>\r\n                                   Понедельник-пятница: 8:00-23:00\r\n                                </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        Выходные и праздничные дни: 9:00-21:00\r\n                                    </Typography>\r\n                                    <Typography variant=\"h1\" gutterBottom>\r\n\r\n                                    </Typography>\r\n                                    <Typography variant=\"h3\" gutterBottom>\r\n                                        Как с нами связаться?\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        телефон: +79805409223\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        эл. почта: fitzone.sender@ya.com\r\n                                    </Typography>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n            <div align=\"right\">\r\n                <ChatBotComponent />\r\n            </div>\r\n            </main>\r\n        </>\r\n    );\r\n\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Loader.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutingPersonalTrenPage.js",["201","202","203","204","205"],"import React, {useContext, useEffect, useState,useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActions, CardContent, CardMedia, Container, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    Buttons:{\r\n        position: \"center\"\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    mainFeaturesPost: {\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n        backgroundImage: 'url(/img/grupptren.jpg)',\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"centre\"\r\n\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundOverlay: \"rgba(0,0,0,0,.3)\"\r\n    },\r\n    mainFeaturesPostContent: {\r\n        position: \"centre\",\r\n        padding: theme.spacing(6),\r\n        marginTop: theme.spacing(8)\r\n\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n\r\n\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport const NoutingPersonalTrenPage = (props) =>{\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const {token} = useContext(AuthContext)\r\n    const curId = props.userId\r\n    const [resultCount, setResultCount]=useState(true);\r\n    console.log(\"CurId\", curId)\r\n    const curEmail=props.email\r\n    console.log(\"Email\", curEmail)\r\n    const [noutingForm, setNoutingForm] = useState([{\r\n        idzanytie:'',nazvanie:'', fio_trener:'',idtrener:'', img:'',datatime:''\r\n    }])\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [state, setState] = useState({openModal: false,stationNumber: 1,});\r\n    const [more, setMore] = useState({openModalMore: false,stationNumber: 1,});\r\n    const [alert, setAlert]=useState([])\r\n    const handleDateChange=(date)=>{\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n    }\r\n\r\n    const handleClickOpen = async (card,selectedDate,curEmail) => {\r\n            try {\r\n                const fetched = await request(`/api/nouting/inserting/${curId}`, 'POST', {\r\n                    ...card,\r\n                    selectedDate,\r\n                    curEmail\r\n                }, {Authorization: `Bearer ${token}`})\r\n                console.log(\"\", fetched)\r\n\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        try {\r\n            const fetched = await request(`/api/nouting/insertingtwo/${curId}`, 'POST', {\r\n                ...card,\r\n                selectedDate,\r\n            }, {Authorization: `Bearer ${token}`})\r\n            console.log(\"\", fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n            handleCloseModal()\r\n    };\r\n\r\n    const handleClickOpenModal = async (stationNumber,card,selectedDate) => {\r\n        console.log(\"stationNumber\",stationNumber )\r\n        setState({openModal:true,stationNumber: stationNumber});\r\n       try {\r\n           console.log(\"ТУТТ\")\r\n            const fetched = await request(`/api/nouting/selecttrenerpt`, 'POST',{...card,selectedDate},{Authorization: `Bearer ${token}`})\r\n            console.log(\"Поймали\",fetched)\r\n           if (fetched.resultCount>0)\r\n               setResultCount(false);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setState({openModal:false,stationNumber: 1});\r\n    };\r\n\r\n    const handleClickOpenMore = stationNumber =>()=> {\r\n        console.log(\"StationNumber\", stationNumber)\r\n        setMore({openModalMore:true,stationNumber: stationNumber});\r\n    };\r\n\r\n    const handleCloseMore = () => {\r\n        setMore({openModalMore:false,stationNumber: 1});\r\n    };\r\n\r\n    const handleAlertOpen = () => {\r\n        setAlert(true);\r\n    };\r\n\r\n    const handleAlertClose = () => {\r\n        setAlert(false);\r\n        handleCloseModal()\r\n    };\r\n\r\n\r\n    const nouting = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request(`/api/nouting/noutingpt`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            setNoutingForm(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n\r\n    useEffect(() => {\r\n        nouting()\r\n    }, [])\r\n    const classes = useStyles();\r\n    console.log(\"SelectedDate\", selectedDate)\r\n    console.log(\"NoutingForm\", noutingForm)\r\n    return(\r\n        <>\r\n        <main>\r\n            <Paper className={classes.mainFeaturesPost}>\r\n                <Container fixed>\r\n                    <div className={classes.overlay}/>\r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturesPostContent}>\r\n                                <Typography\r\n                                    component=\"h1\"\r\n                                    variant=\"h3\"\r\n                                    color='inherit'\r\n                                    gutterBottom\r\n                                >\r\n                                    FitZone\r\n                                </Typography>\r\n                                <Typography\r\n\r\n                                    variant='h5'\r\n                                    color='inherit'\r\n                                    paragraph\r\n                                >\r\n                                    Персональный тренинг - луший путь к результату!\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align='center' color=\"textPrimary\" gutterBottom> FitZone\r\n                        right </Typography>\r\n                    <Typography variant=\"h5\" align='center' color=\"textSecondary\" paragraph> Начни сегодня. Начни с\r\n                        себя </Typography>\r\n                    <div className={classes.mainButtons}>\r\n                        <Grid container spacing={4} justify=\"center\">\r\n                            <Grid item>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {loading && <Loader/>}\r\n                {!loading && noutingForm.length != 1 && (\r\n                    <>\r\n                    <Grid container spacing={4}>\r\n                        {\r\n                        noutingForm.map((card,index) => (\r\n                            <Grid item key={card} xs={12} sm={6} md={4} spacing={3}>\r\n                                <Card id={card.idzanytie} className={classes.card}>\r\n                                    <CardMedia className={classes.cardMedia}\r\n                                               image={card.img}\r\n                                               title=\"Image title\"/>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.nazvanie}\r\n                                        </Typography>\r\n                                        <Typography>\r\n                                            {card.fio_trener}\r\n                                        </Typography>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker\r\n                                                locale=\"ru\"\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                label=\"Дата\"\r\n                                                views={['year', 'month', 'date']}\r\n                                                value={selectedDate}\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                onChange={handleDateChange}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            /><KeyboardTimePicker\r\n                                            margin=\"normal\"\r\n                                            id=\"time-picker\"\r\n                                            label=\"Время\"\r\n                                            value={selectedDate}\r\n                                            format=\"HH:MM\"\r\n                                            onChange={handleDateChange}\r\n                                            KeyboardButtonProps={{\r\n                                                'aria-label': 'change time',\r\n                                            }}\r\n                                        />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        <Button onClick={()=>handleClickOpenModal(card.idzanytie, noutingForm[(state.stationNumber)-1], selectedDate)} size=\"small\" color=\"primary\">\r\n                                            ЗАПИСЬ {console.log(\"idzanytie\",card.idzanytie)}\r\n                                        </Button>\r\n\r\n                                        <Dialog\r\n                                            open={state.openModal}\r\n                                            TransitionComponent={Transition}\r\n                                            keepMounted\r\n                                            onClose={handleCloseModal}\r\n                                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                                            aria-describedby=\"alert-dialog-slide-description\"\r\n                                        >\r\n                                            <DialogTitle id=\"alert-dialog-slide-title\">Подтвердите запись</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    {noutingForm[(state.stationNumber)-1].nazvanie}\r\n                                                </DialogContentText>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <AccessTimeIcon/>{moment(selectedDate).format(\"LLLL\")}\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                {console.log(\"RESULT\", resultCount)}\r\n                                                {resultCount ? (\r\n                                                        <Button\r\n                                                            onClick={() => handleClickOpen(noutingForm[(state.stationNumber) - 1], selectedDate, curEmail)}\r\n                                                            color=\"primary\">\r\n                                                            Запись\r\n                                                        </Button>)\r\n                                                    : (\r\n                                                        <>\r\n                                                            <Button onClick={() => handleAlertOpen()} color=\"primary\">\r\n                                                                Запись\r\n                                                            </Button>\r\n                                                            <Dialog\r\n                                                                open={alert}\r\n                                                                onClose={handleAlertClose}\r\n                                                                aria-labelledby=\"alert-dialog-title\"\r\n                                                                aria-describedby=\"alert-dialog-description\"\r\n                                                            >\r\n                                                                <DialogTitle\r\n                                                                    id=\"alert-dialog-title\">{\"Данное время уже занято\"}</DialogTitle>\r\n                                                                <DialogContent>\r\n                                                                    <DialogContentText id=\"alert-dialog-description\">\r\n                                                                        Выбранное время для записи уже занято. Пожалуйста, выберете другое время или свяжитесь с нами по телефону для записи.\r\n                                                                        тел: 895742024621\r\n                                                                    </DialogContentText>\r\n                                                                </DialogContent>\r\n                                                                <DialogActions>\r\n                                                                    <Button onClick={handleAlertClose} color=\"primary\">\r\n                                                                        Закрыть\r\n                                                                    </Button>\r\n                                                                </DialogActions>\r\n                                                            </Dialog>\r\n                                                        </>\r\n                                                    )}\r\n                                                <Button onClick={handleCloseModal} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n                                        <Button size=\"small\" color=\"primary\" onClick={handleClickOpenMore(card.idzanytie)}>\r\n                                            Подробно\r\n                                        </Button>\r\n                                        <Dialog onClose={handleCloseMore} aria-labelledby=\"customized-dialog-title\" open={more.openModalMore}>\r\n                                            <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseMore}>\r\n                                                <div className={classes.rootAvatar}>\r\n                                                    <Avatar src={noutingForm[(more.stationNumber-1)].img} />\r\n                                                    {noutingForm[(more.stationNumber-1)].nazvanie}\r\n                                                </div>\r\n                                            </DialogTitle>\r\n                                            <DialogContent dividers>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    <PersonIcon fontSize=\"large\" />{noutingForm[(more.stationNumber-1)].fio_trener}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    <ScheduleIcon fontSize=\"large\"/>\r\n                                                    {moment(noutingForm[(more.stationNumber-1)].datatime).format(\"dddd, HH:MM\")}\r\n                                                </Typography>\r\n                                                <Typography gutterBottom paragraph>\r\n                                                    {noutingForm[(more.stationNumber-1)].opisaniepodrobno}\r\n                                                </Typography>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button autoFocus onClick={handleCloseMore} color=\"primary\">\r\n                                                    Назад\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </Dialog>\r\n\r\n                                </CardActions>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        ))\r\n                        }\r\n                </Grid>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </main>\r\n</>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ModalWindow.js",[],["206","207"],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Footer.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\Diagram.js",["208","209","210","211","212","213","214","215","216"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { LineChart, Line, Bar, BarChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"./Loader\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    diagramm: {\r\n        display: \"\",\r\n        maxWidth: \"900\",\r\n    },\r\n}));\r\n\r\nexport const Diagram=()=>{\r\n    const {loading, request} = useHttp();\r\n    const [trenerAndClient, setTrenerClient] = useState([{}])\r\n    const [trenerovkaData, setTrenData] = useState([{}])\r\n\r\n    const data = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/diagramm/diagramTrenerClient', 'GET', null, {})\r\n            console.log(\"Fetched\",fetched)\r\n            setTrenerClient(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    const trenData = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/diagramm/diagramTrenData', 'GET', null, {})\r\n\r\n            setTrenData(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [request])\r\n\r\n    useEffect(() => {\r\n        data()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        trenData()\r\n    }, [])\r\n\r\nconsole.log(\"trenerClient\", trenerAndClient)\r\n    console.log(\"trenerovkaData\", trenerovkaData)\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main>\r\n            {loading && <Loader/>}\r\n            {!loading && trenerAndClient.length != 0 && (\r\n                <>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">Тренер-персональные тренировки</Typography>\r\n                    <div>\r\n                        <BarChart width={600} height={300} data={trenerAndClient}>\r\n                            <XAxis dataKey=\"FIO_cl\" stroke=\"#8884d8\"/>\r\n                            <YAxis/>\r\n                            <Tooltip/>\r\n                            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\"/>\r\n                            <Bar dataKey=\"Всего\" fill=\"#8884d8\" barSize={30}/>\r\n                        </BarChart>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </main>\r\n    );\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ResetPage.js",["217","218","219","220","221","222","223","224"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {CardActions} from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '93vh',\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport const ResetPage = () => {\r\n    const {request,loading} = useHttp();\r\n    const [email, setEmail]=useState()\r\n    const [state, setState]=useState(false)\r\n    const handleChangeEmail =(event) => {\r\n        setEmail(event.target.value)\r\n        console.log(\"event.target.value\", event.target.value)\r\n    };\r\n    const handleCloseModal = () => {\r\n        setState(false);\r\n    };\r\n    const handleOpenModal = () => {\r\n        setState(true);\r\n    };\r\n    const reset = async () => {\r\n        handleOpenModal()\r\n        try {\r\n            const data = await request('/api/reset/inputemail', 'POST', {email})\r\n            console.log(\"Data\", data);\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Смена пароля\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        onChange={handleChangeEmail}\r\n                    />\r\n                    <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={reset}\r\n                    >\r\n                       Восстановить доступ\r\n                    </Button>\r\n                    <Dialog onClose={handleCloseModal} aria-labelledby=\"customized-dialog-title\" open={state}>\r\n                        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseModal}>\r\n                            <Typography variant='h5' gutterBottom>\r\n                                Запрос на смену пароля\r\n                            </Typography>\r\n                        </DialogTitle>\r\n                        <DialogContent dividers>\r\n                            <Typography gutterBottom paragraph>\r\n                               На указанный адрес электронной почты: {email} выслана ссылка для смены пароля.\r\n                            </Typography>\r\n                            <Typography gutterBottom paragraph>\r\n                               Если Вам не пришло письмо, пожалуйста, проверьте папку СПАМ и корректность адреса электрронной почты.\r\n                            </Typography>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button autoFocus onClick={handleCloseModal} color=\"primary\">\r\n                                ОК\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n        </Grid>\r\n    );\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ResetPageNewPassword.js",["225","226","227","228"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Link} from \"react-router-dom\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {AlertPass} from \"../components/AlertPass\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {height: '93vh',},\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport const ResetPageNewPassword = (props) => {\r\n    const [id, setId] = useState()\r\n    const [tokenLoader, setTokenLoader] = useState(true)\r\n    const {request, loading} = useHttp();\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [pass, setPass] = useState()\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleChangePassword = (event) => {\r\n        setPass(event.target.value)\r\n        console.log(\"event.target.value\", event.target.value)\r\n    };\r\n\r\n    const newPass = async () => {\r\n        try {\r\n            const data = await request(`/api/reset/inputpass`, 'POST', {pass})\r\n            console.log(\"Data\", data);\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    useEffect(async () => {\r\n        try {\r\n            const data = await request(`/api/user/token/${props.match.params.token}`, 'GET')\r\n            console.log(\"Data\", data);\r\n            setId(data.id)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setTokenLoader(false)\r\n        }\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {tokenLoader\r\n                ? <Loader/>\r\n                : !id\r\n                    ?\r\n                    <Grid container component=\"main\" className={classes.root}>\r\n                        <AlertPass/>\r\n                    </Grid>\r\n                    : (\r\n                        <Grid container component=\"main\" className={classes.root}>\r\n                        <Container component=\"main\" maxWidth=\"xs\">\r\n                            <CssBaseline/>\r\n                            <div className={classes.paper}>\r\n                                <Avatar className={classes.avatar}>\r\n                                    <LockIcon/>\r\n                                </Avatar>\r\n                                <Typography component=\"h1\" variant=\"h5\">\r\n                                    Восстановление пароля\r\n                                </Typography>\r\n                                <form className={classes.form} noValidate>\r\n                                    <div align=\"center\">\r\n                                        <InputLabel htmlFor=\"standard-adornment-password\">Пароль</InputLabel>\r\n                                        <Input\r\n                                            id=\"standard-adornment-password\"\r\n                                            type={showPassword ? 'text' : 'password'}\r\n                                            onChange={handleChangePassword}\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClickShowPassword}\r\n                                                    >\r\n                                                        {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <Button\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.submit}\r\n                                        onClick={newPass}\r\n                                        component={Link} to=\"/\"\r\n                                    >\r\n                                        Восстановить доступ\r\n                                    </Button>\r\n                                </form>\r\n                            </div>\r\n                        </Container>\r\n                        </Grid>\r\n                    )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\AlertPass.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\PayForm.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\RegistrationPage.js",["229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {CardContent} from \"@material-ui/core\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {PhotoCamera} from \"@material-ui/icons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport {PayForm} from \"../components/PayForm\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        marginTop: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nexport const RegistrationPage = (props) => {\r\n    const curRole=props.role\r\n    const upload = document.getElementById(\"upload\");\r\n    const {request, loading} = useHttp();\r\n    const [abonements, setAbonements] = useState([{}])\r\n    const [email, setEmail] = useState()\r\n    const [password, setPass] = useState()\r\n    const [name, setName] = useState()\r\n    const [phone, setPhone] = useState()\r\n    const [idabon, setIdAbon] = useState()\r\n    const [sumAndId, setSumAndId] = useState([{}])\r\n    const [sroki, setSroki] = useState([{}])\r\n    const [roles, setRoles] = useState([{}])\r\n    const [file, setFile] = useState()\r\n    const [sr, setSr] = useState()\r\n    const [newRole, setNewRole] = useState()\r\n    const [check, setCheck] = useState(false)\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [selectedActiveDate, setSelecteActiveDate] = useState(new Date());\r\n    const [payModal, setPayModal] = useState(false)\r\n\r\n    const handleClosePay = () => {\r\n        setPayModal(false);\r\n    };\r\n    const handleDateChange = (date) => {\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n    const handleDateActiveChange = (date) => {\r\n        console.log(date);\r\n        setSelecteActiveDate(date);\r\n    }\r\n    const handleChangeAbon = (event) => {\r\n        setIdAbon(event.target.value);\r\n    }\r\n    const handleChangeSrok = (event) => {\r\n        setSr(event.target.value);\r\n    }\r\n    const handleChangeName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    const handleChangePhone = (event) => {\r\n        setPhone(event.target.value);\r\n    }\r\n    const handleChangeEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handleChangePass = (event) => {\r\n        setPass(event.target.value);\r\n    }\r\n    const handleChangeCheck = () => {\r\n        setCheck(!check);\r\n    };\r\n    const handleChangeRole = (event) => {\r\n        setNewRole(event.target.value);\r\n    };\r\n    const abons = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/registration/abonstype', 'GET', null, {})\r\n            console.log(\"Fetched\", fetched)\r\n            console.log(\"Преобразование 1\", fetched.result[0].img)\r\n            setAbonements(fetched.result)\r\n\r\n        } catch (e) {\r\n        }\r\n    }, [request])\r\n    const srok = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/registration/sroki`, 'GET', null, {})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setSroki(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const registrate = async (email, password, name, phone, date, idabon, img, summ, active) => {\r\n        setPayModal(true)\r\n        console.log(img, \"img\")\r\n       const result = await toBase64(img)\r\n        console.log(\"Form data\", result)\r\n        try{\r\n           const fetched = await request(`/api/auth/register`, 'POST', {data: result, fileName: img.name, email,\r\n               password,\r\n               name,\r\n               phone,\r\n               date,\r\n               idabon,\r\n               summ,\r\n               active})\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n    }\r\n    const findAbon = async (idabon, sr) => {\r\n        idabon == undefined ? idabon = abonements[0].id : idabon = idabon\r\n        sr == undefined ? sr = sroki[0].srok : sr = sr\r\n        try {\r\n            const fetched = await request(`/api/abonpay/findnew`, 'POST', {idabon, sr})\r\n            console.log(\"findabon\", fetched.result)\r\n            setSumAndId(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    const allrole = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/registration/role`, 'GET', null, {})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setRoles(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const toBase64 = file => new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n    const handleCapture = () => {\r\n            console.log(upload.files)\r\n        if (upload.files.length>0)\r\n            setFile(upload.files[0])\r\n    };\r\n    useEffect(() => {\r\n        srok()\r\n    }, [])\r\n    useEffect(() => {\r\n        abons()\r\n    }, [])\r\n    useEffect(() => {\r\n        if (curRole=='admin')\r\n        allrole()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                    Регистрация нового клиента\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Заполните необходимую информацию:\r\n                </Typography>\r\n                {loading && <Loader/>}\r\n                {!loading && abonements.length != 0 && (\r\n                    <>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"email\" defaultValue=\"example@ya.com\"\r\n                                           onChange={handleChangeEmail}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required type=\"password\" id=\"standard-disabled\" label=\"Пароль\"\r\n                                           defaultValue=\"123456789\" onChange={handleChangePass}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"ФИО клиента\"\r\n                                           defaultValue=\"ФИО клиента\" onChange={handleChangeName}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"Контактный телфон\"\r\n                                           defaultValue=\"Контактный телефон\" onChange={handleChangePhone}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        locale=\"ru\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-dialog\"\r\n                                        required\r\n                                        label=\"Дата Рождения\"\r\n                                        views={['year', 'month', 'date']}\r\n                                        value={selectedDate}\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        onChange={handleDateChange}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n                            {loading && <Loader/>}\r\n                            {!loading && curRole==='admin' && roles.length!=0 && (\r\n                                <>\r\n                                <Grid item xs={12} md={6}>\r\n                                    <FormHelperText required>Уровень доступа</FormHelperText>\r\n                                    <NativeSelect className={classes.select}\r\n                                                  defaultValue={roles[0].role}\r\n                                                  inputProps={{\r\n                                                      id: 'role',\r\n                                                  }}\r\n                                                  onChange={handleChangeRole}\r\n                                    >\r\n                                        {roles.map((option) => (\r\n                                            <option value={option.role} key=\r\n                                                {option.role}>\r\n                                                {option.role}\r\n                                            </option>\r\n                                        ))}\r\n                                    </NativeSelect>\r\n                                </Grid>\r\n                                </>\r\n                            )\r\n                            }\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Тип абонемента</FormHelperText>\r\n                                <NativeSelect\r\n                                    defaultValue={abonements[0].id}\r\n                                    onChange={handleChangeAbon}\r\n                                >\r\n                                    {abonements.map((option) => (\r\n                                        <Tooltip title={option.opisanie}>\r\n                                            <option value={option.id} key=\r\n                                                {option.id}>\r\n                                                {option.type}\r\n                                            </option>\r\n                                        </Tooltip>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText required>Загрузить фото</FormHelperText>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    className={classes.input}\r\n                                    id=\"upload\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    onChange={handleCapture}\r\n                                    style={{display: 'none'}}\r\n                                />\r\n                                <label htmlFor=\"upload\" >\r\n                                    <Button variant=\"contained\" component=\"span\">\r\n                                        Загрузить\r\n                                    </Button>\r\n                                </label>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText required>Длительность в днях</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                              defaultValue={sroki[0].srok}\r\n                                              inputProps={{\r\n                                                  id: 'srok',\r\n                                              }}\r\n                                              onChange={handleChangeSrok}\r\n                                >\r\n                                    {sroki.map((option) => (\r\n                                        <option value={option.srok} key=\r\n                                            {option.srok}>\r\n                                            {option.srok}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormControlLabel className={classes.formControl}\r\n                                                  value=\"bottom\"\r\n                                                  control={<Checkbox className={classes.checkbox}\r\n                                                                     color=\"primary\"\r\n                                                                     onChange={handleChangeCheck}\r\n                                                  />}\r\n                                                  label=\"Активировать абонемент позже?\"\r\n                                                  labelPlacement=\"top\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                {check && (\r\n                                    <>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker\r\n                                                locale=\"ru\"\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                label=\"Дата активации\"\r\n                                                views={['year', 'month', 'date']}\r\n                                                value={selectedDate}\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                onChange={handleDateActiveChange}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </>\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Button onClick={() => {\r\n                                    findAbon(idabon, sr);\r\n                                    registrate(email, password, name, phone, selectedDate, sumAndId[0].id, file, sumAndId[0].summ, selectedActiveDate)\r\n                                }} color=\"primary\">\r\n                                    РЕГИСТРАЦИЯ\r\n                                </Button>\r\n                                    <>\r\n                                    <Dialog\r\n                                        open={payModal}\r\n                                        onClose={handleClosePay}\r\n                                        aria-labelledby=\"responsive-dialog-title\"\r\n                                    >\r\n                                        <DialogTitle\r\n                                            id=\"responsive-dialog-title\">{\"Выберите подходящий способ оплаты\"}</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText>\r\n                                                <PayForm type={\"Покупка абонемента\"} sum={sumAndId[0].summ}/>\r\n                                            </DialogContentText>\r\n                                        </DialogContent>\r\n                                    </Dialog>\r\n                                    </>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </main>\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\LongingAbonPage.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {CardContent} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {PayForm} from \"../components/PayForm\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    formControl: {\r\n        marginLeft: theme.spacing(0),\r\n    },\r\n    checkbox:{\r\n        marginLeft: theme.spacing(0),\r\n        marginTop: theme.spacing(0.5)\r\n    },\r\n}));\r\n\r\nexport const LongingAbonPage = (props) => {\r\n    const classes = useStyles();\r\n    const {token} = useContext(AuthContext)\r\n    const {loading, request} = useHttp();\r\n    const curId = props.userId\r\n    const curRole = props.role\r\n    const [curFio, setCurFio] = useState([{}])\r\n    const [clients, setClients]=useState([{}])\r\n    const [abonements, setAbonements]=useState([{}])\r\n    const [sroki, setSroki]=useState([{}])\r\n    const [summaAndId, setSummaAndId]=useState([{}])\r\n    const [sr, setSr]=useState()\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const curDate=new Date()\r\n    const [cl, setcl]=useState(curId)\r\n    const [ab, setAb]=useState()\r\n    const [check, setCheck]=useState(false)\r\n    const [payModal, setPayModal] = useState(false)\r\n\r\n\r\n    const handleChangeClient = (event) => {\r\n        setcl(event.target.value);\r\n    };\r\n    const handleChangeAbonement = (event) => {\r\n        setAb(event.target.value);\r\n    };\r\n    const handleChangeCheck = () => {\r\n        setCheck(!check);\r\n    };\r\n    const handleDateChange=(date)=>{\r\n        setSelectedDate(date);\r\n    }\r\n    const handleChangeSrok=(event)=>{\r\n        setSr(event.target.value);\r\n    }\r\n    const handleClosePay = () => {\r\n        setPayModal(false);\r\n    };\r\n    const handleClickLonging=async (idcl, idabon,summ,date, sdate) => {\r\n        setPayModal(true);\r\n        try {\r\n            const fetched = await request(`/api/abonpay/updating`, 'POST',{idcl, idabon,summ,date, sdate})\r\n            console.log(\"\",fetched)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n    const findAbon = async (idabon, sr) => {\r\n        idabon == undefined ? idabon=abonements[0].id : idabon=idabon\r\n        sr == undefined ? sr=sroki[0].srok: sr=sr\r\n        try {\r\n            const fetched = await request(`/api/abonpay/findnew`, 'POST',{idabon, sr})\r\n            console.log(\"findabon\",fetched.result)\r\n            setSummaAndId(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        handleClickLonging(cl,summaAndId[0].id,summaAndId[0].summ,curDate,selectedDate)\r\n    }\r\n    const allClient = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/abonpay/allclients', 'GET', null, {})\r\n            console.log(\"Выборка\",fetched.result)\r\n            setClients(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const client = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/abonpay/curclient/${curId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(\"Фамилия текущая\", fetched.result)\r\n            setCurFio(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const abonement = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/abonpay/abonements`, 'GET', null, {})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setAbonements(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const srok = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/abonpay/sroki`, 'GET', null, {})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setSroki(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        curRole == 'admin' ? allClient() : client()\r\n    }, [])\r\n    useEffect(() => {\r\n        abonement()\r\n    }, [])\r\n    useEffect(() => {\r\n        srok()\r\n    }, [])\r\n\r\n    return (\r\n        <main className={classes.layout}>\r\n            {loading && <Loader/>}\r\n            {!loading && (curFio.length !== 0 || clients.length!==0) && sroki.length!==0 && abonements.length!=0 &&(\r\n                <>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                            Продление абонемента\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Заполните необходимую информацию\r\n                        </Typography>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                                {(curRole=='cl' || curRole=='tren') && (\r\n                                    <>\r\n                                        <FormHelperText>ФИО клиента</FormHelperText>\r\n                                        <TextField disabled id=\"standard-disabled\" label={curFio[0].FIO_cl} />\r\n                                    </>\r\n                                )}\r\n                                {curRole=='admin' && (\r\n                                    <>\r\n                                        <FormHelperText>Клиент</FormHelperText>\r\n                                        <NativeSelect className={classes.select}\r\n                                            defaultValue={clients[0].FIO_cl}\r\n                                            inputProps={{\r\n                                            id: 'id',\r\n                                        }}\r\n                                            onChange={handleChangeClient}\r\n                                            >\r\n                                            {clients.map((option) => (\r\n                                                <option value={option.id} key=\r\n                                                    {option.id}>\r\n                                                    {option.FIO_cl}\r\n                                                </option>\r\n                                            ))}\r\n                                    </NativeSelect>\r\n                                    </>\r\n                                )}\r\n                            </Grid>\r\n                                <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Тип абонемента</FormHelperText>\r\n\r\n                                <NativeSelect className={classes.select}\r\n                                              defaultValue={abonements[0].type}\r\n                                              inputProps={{\r\n                                                  id: 'id',\r\n                                              }}\r\n                                              onChange={handleChangeAbonement}\r\n                                >\r\n                                    {abonements.map((option) => (\r\n                                        <Tooltip title={option.opisanie}>\r\n                                        <option value={option.id} key=\r\n                                            {option.id}>\r\n                                            {option.type}\r\n                                        </option>\r\n                                        </Tooltip>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                                    <FormHelperText>Длительность в днях</FormHelperText>\r\n                                    <NativeSelect className={classes.select}\r\n                                                  defaultValue={sroki[0].srok}\r\n                                                  inputProps={{\r\n                                                      id: 'srok',\r\n                                                  }}\r\n                                                  onChange={handleChangeSrok}\r\n                                    >\r\n                                        {sroki.map((option) => (\r\n                                                <option value={option.srok} key=\r\n                                                    {option.srok}>\r\n                                                    {option.srok}\r\n                                                </option>\r\n                                        ))}\r\n                                    </NativeSelect>\r\n                                </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormControlLabel className={classes.formControl}\r\n                                    value=\"bottom\"\r\n                                    control={<Checkbox className={classes.checkbox}\r\n                                        color=\"primary\"\r\n                                        onChange={handleChangeCheck}\r\n                                    />}\r\n                                    label=\"Активировать абонемент позже?\"\r\n                                    labelPlacement=\"top\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                {check && (\r\n                                    <>\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                        <KeyboardDatePicker\r\n                                            locale=\"ru\"\r\n                                            margin=\"normal\"\r\n                                            id=\"date-picker-dialog\"\r\n                                            label=\"Дата активации\"\r\n                                            views={['year', 'month', 'date']}\r\n                                            value={selectedDate}\r\n                                            format=\"dd/MM/yyyy\"\r\n                                            onChange={handleDateChange}\r\n                                            KeyboardButtonProps={{\r\n                                                'aria-label': 'change date',\r\n                                            }}\r\n                                        />\r\n                                    </MuiPickersUtilsProvider>\r\n                                    </>\r\n                                )}\r\n                            </Grid>\r\n                            <Button onClick={()=>findAbon(ab, sr)} color=\"primary\">\r\n                                ПРОДЛИТЬ\r\n                            </Button>\r\n                            <Dialog\r\n                                open={payModal}\r\n                                onClose={handleClosePay}\r\n                                aria-labelledby=\"responsive-dialog-title\"\r\n                            >\r\n                                <DialogTitle id=\"responsive-dialog-title\">{\"Выберите подходящий способ оплаты\"}</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText>\r\n                                        <PayForm type={\"Оплата продления абонемента\"} sum={summaAndId[0].summ}/>\r\n                                    </DialogContentText>\r\n                                </DialogContent>\r\n                            </Dialog>\r\n                        </Grid>\r\n                    </Paper>\r\n                </>\r\n            )}\r\n        </main>\r\n    )\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\PayInfo.js",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {CardActions, CardContent} from \"@material-ui/core\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {PhotoCamera} from \"@material-ui/icons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport {PayForm} from \"../components/PayForm\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 850,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        marginTop: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nexport const PayInfo = (props) => {\r\n    const classes = useStyles();\r\n    const {token} = useContext(AuthContext)\r\n    const {loading, request} = useHttp();\r\n    let fl=false\r\n    const [clients, setClients]=useState([{}])\r\n    const [rows, setRows]=useState([{id:1}])\r\n    const oplata=[{id: 1, type:\"абонемент\"}, {id:2, type:\"персональная тренировка\"}]\r\n    const [select, setSelect]=useState([{}])\r\n    const [cl, setcl]=useState(1)\r\n    const [op, setop]=useState(1)\r\n\r\n    const handleChangeClient = (event) => {\r\n        setcl(event.target.value);\r\n    };\r\n    const handleChangeOplata = (event) => {\r\n        fl=true\r\n        setop(event.target.value);\r\n        console.log(op)\r\n    };\r\n\r\n    const allClient = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/abonpay/allclients', 'GET', null, {})\r\n            console.log(\"Выборка\",fetched.result)\r\n            setClients(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n\r\n        }\r\n    }, [])\r\n    const abonsTable=async(cl,op) => {\r\n        fl=true\r\n        console.log(\"fvdfg\")\r\n        if (op==1) {\r\n            try {\r\n                const fetched = await request(`/api/payinfo/aboutclientabon`, 'POST', {cl})\r\n                console.log(\"Fetcheddata\", fetched.result)\r\n                setRows(fetched.result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n       if(op==2){\r\n            try {\r\n                const fetched = await request(`/api/payinfo/aboutclientpt`, 'POST', {cl})\r\n                console.log(\"Fetcheddata\", fetched.result)\r\n                setRows(fetched.result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        console.log(\"Вывод\")\r\n    }\r\n    const pay=async(cl,op, select) => {\r\n        console.log(\"!\",select)\r\n        if (op==1) {\r\n            try {\r\n                const fetched = await request(`/api/payinfo/payabon`, 'POST', {cl, ...select})\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        else {\r\n            try {\r\n                const fetched = await request(`/api/payinfo/paypt`, 'POST', {cl, ...select})\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        console.log(\"Вывод\")\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n       allClient()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                    Внести сведения об оплате\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Заполните необходимую информацию:\r\n                </Typography>\r\n                {loading && <Loader/>}\r\n                {!loading && clients.length != 0 && (\r\n                    <>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Клиент</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                              // defaultValue={clients[0].FIO_cl}\r\n                                              inputProps={{\r\n                                                  id: 'id',\r\n                                              }}\r\n                                              onChange={handleChangeClient}\r\n                                >\r\n                                    {clients.map((option) => (\r\n                                        <option value={option.id} key=\r\n                                            {option.id}>\r\n                                            {option.FIO_cl}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Клиент</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                              defaultValue={oplata[0].type}\r\n                                              inputProps={{\r\n                                                  id: 'id',\r\n                                              }}\r\n                                              onChange={handleChangeOplata}\r\n                                >\r\n                                    {oplata.map((option) => (\r\n                                        <option value={option.id} key=\r\n                                            {option.id}>\r\n                                            {option.type}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Button onClick={()=>abonsTable(cl,op)}>Найти</Button>\r\n                                <div style={{height: 280, width: '100%'}}>\r\n                                        {op == 1 ?\r\n                                            <DataGrid rows={rows}\r\n                                                      columns={[{\r\n                                                          field: 'FIO_cl',\r\n                                                          headerName: 'ФИО клиента',\r\n                                                          width: 150\r\n                                                      },\r\n                                                          {\r\n                                                              field: 'srok',\r\n                                                              headerName: 'Срок действия в днях',\r\n                                                              width: 200\r\n                                                          },\r\n                                                          {field: 'type', headerName: 'Тип', width: 100},\r\n                                                          {\r\n                                                              field: 'sumkoplate',\r\n                                                              headerName: 'Сумма к олпате',\r\n                                                              width: 120,\r\n                                                          },\r\n                                                          {\r\n                                                              field: 'oplacheno',\r\n                                                              headerName: 'Оплачено',\r\n                                                              width: 120,\r\n                                                          },]} pageSize={5} onRowSelected={(x) => setSelect(x.data)}/>\r\n                                            :\r\n                                            <DataGrid rows={rows}\r\n                                                      columns={[{\r\n                                                          field: 'nazvanie',\r\n                                                          headerName: 'Название ',\r\n                                                          width: 150\r\n                                                      },\r\n                                                          {field: 'fio_trener', headerName: 'ФИО тренера', width: 150},\r\n                                                          {field: 'datatime', headerName: 'Дата и время', width: 150},\r\n                                                          {field: 'status', headerName: 'Статус', width: 100},\r\n                                                          {\r\n                                                              field: 'sumkoplate',\r\n                                                              headerName: 'Сумма к олпате',\r\n                                                              width: 120,\r\n                                                          },\r\n                                                          {\r\n                                                              field: 'oplacheno',\r\n                                                              headerName: 'Оплачено',\r\n                                                              width: 120,\r\n                                                          }]} pageSize={5}\r\n                                                      onRowSelected={(x) => setSelect(x.data)}/>\r\n                                    }\r\n                                </div>\r\n                            <Button onClick={() =>pay(cl, op, select)} component={Link} to=\"/offlinepay\">Оплатить</Button>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </main>\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\NoutPage.js",["312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {CardActions, CardContent} from \"@material-ui/core\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {PhotoCamera} from \"@material-ui/icons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport {PayForm} from \"../components/PayForm\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport moment from \"moment\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        marginTop: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nexport const NoutPage = () => {\r\n    const classes = useStyles();\r\n    const {loading, request} = useHttp();\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [clients, setClients]=useState([{}])\r\n    const [treners, setTreners]=useState([{}])\r\n    const [zanytie, setZaytie]=useState([{}])\r\n    const [state, setState]=useState(false)\r\n    const [resultCount, setResultCount]=useState(true)\r\n    const [cl, setcl]=useState(1)\r\n    const [zan, setzan]=useState(1)\r\n    const [sum, setSum]=useState(1)\r\n    const [tren, settren]=useState(1)\r\n\r\n    const handleDateChange=(date)=>{\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n    const handleChangeClient = (event) => {\r\n        setcl(event.target.value);\r\n    };\r\n    const handleChangeZanytie = (event) => {\r\n        setzan(event.target.value);\r\n    };\r\n    const handleChangeTrener = (event) => {\r\n        settren(event.target.value);\r\n    };\r\n    const handleCloseModal = () => {\r\n        setState(false);\r\n    };\r\n    const insertingInfo = async (cl,tren,selectedDate,zan) => {\r\n        try {\r\n            const fetched = await request(`/api/nout/insertingpt`, 'POST', {cl, tren, selectedDate,zan}, {})\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    const handleClickOpenModal = async (idtrener,selectedDate,zan) => {\r\n        setState(true);\r\n        try {\r\n            const fetched = await request(`/api/nouting/selecttrenerpt`, 'POST',{idtrener, selectedDate},{})\r\n            if (fetched.resultCount>0)\r\n                setResultCount(false);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        try {\r\n            const fetched = await request(`/api/nouting/selectsum`, 'POST',{zan},{})\r\n            setSum(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    };\r\n\r\n    const allClient = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/abonpay/allclients', 'GET', null, {})\r\n            console.log(\"Выборка\",fetched.result)\r\n            setClients(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n\r\n        }\r\n    }, [])\r\n    const allZanytie = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/nouting/noutingpt`, 'GET', null, {})\r\n            console.log(\"Fetched\",fetched)\r\n            setZaytie(fetched.result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [])\r\n    const allTreners = useCallback(async () => {\r\n        console.log(\"Before try\")\r\n        try {\r\n            const fetched = await request('/api/trener/trenersPage', 'GET', null, {\r\n\r\n            })\r\n            console.log(\"Fetched\",fetched)\r\n            setTreners(fetched.result)\r\n\r\n        } catch (e) {}\r\n    }, [])\r\n    const pay = async (sum, zan, tren, cl, selectedDate) => {\r\n        insertingInfo(cl,tren,selectedDate,zan)\r\n        try {\r\n            const fetched = await request(`/api/nout/insertingtwo`, 'POST', {cl, tren, sum}, {})\r\n            console.log(\"\", fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        try {\r\n            const fetched = await request(`/api/nout/insertingthree`, 'POST', {}, {})\r\n            console.log(\"\", fetched)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        handleCloseModal()\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        allClient()\r\n    }, [])\r\n    useEffect(() => {\r\n        allZanytie()\r\n    }, [])\r\n    useEffect(() => {\r\n        allTreners()\r\n    }, [])\r\n\r\n    return (\r\n        <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                    Запись на персональную тренировку\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Заполните необходимую информацию:\r\n                </Typography>\r\n                {loading && <Loader/>}\r\n                {!loading && clients.length != 0 && treners.length!=0 && zanytie.length!=0 &&(\r\n                    <>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Клиент</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                     defaultValue={clients[0].FIO_cl}\r\n                                              inputProps={{\r\n                                                  id: 'id',\r\n                                              }}\r\n                                              onChange={handleChangeClient}\r\n                                >\r\n                                    {clients.map((option) => (\r\n                                        <option value={option.id} key=\r\n                                            {option.id}>\r\n                                            {option.FIO_cl}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Тренировка</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                              defaultValue={zanytie[0].nazvanie}\r\n                                              inputProps={{\r\n                                                  id: 'idzanytie',\r\n                                              }}\r\n                                              onChange={handleChangeZanytie}\r\n                                >\r\n                                    {zanytie.map((option) => (\r\n                                        <option value={option.idzanytie} key=\r\n                                            {option.idzanytie}>\r\n                                            {option.nazvanie}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <KeyboardDatePicker\r\n                                    locale=\"ru\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-dialog\"\r\n                                    label=\"Дата\"\r\n                                    views={['year', 'month', 'date']}\r\n                                    value={selectedDate}\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    onChange={handleDateChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                /><KeyboardTimePicker\r\n                                margin=\"normal\"\r\n                                id=\"time-picker\"\r\n                                label=\"Время\"\r\n                                value={selectedDate}\r\n                                format=\"HH:MM\"\r\n                                onChange={handleDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change time',\r\n                                }}\r\n                            />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText>Тренер</FormHelperText>\r\n                                <NativeSelect className={classes.select}\r\n                                              defaultValue={treners[0].fio_trener}\r\n                                              inputProps={{\r\n                                                  id: 'idtrener',\r\n                                              }}\r\n                                              onChange={handleChangeTrener}\r\n                                >\r\n                                    {treners.map((option) => (\r\n                                        <option value={option.idtrener} key=\r\n                                            {option.idtrener}>\r\n                                            {option.fio_trener}\r\n                                        </option>\r\n                                    ))}\r\n                                </NativeSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Button component={Link} to=\"/clientPage\">Назад</Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Button onClick={()=>handleClickOpenModal(tren, selectedDate)}>Записать</Button>\r\n                                <Dialog\r\n                                    open={state}\r\n                                    keepMounted\r\n                                    onClose={handleCloseModal}\r\n                                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                                    aria-describedby=\"alert-dialog-slide-description\"\r\n                                >\r\n                                    {resultCount==false ? (\r\n                                        <>\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">Выбранное вами время уже\r\n                                            занято</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                            </DialogContentText>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                        <Button onClick={handleCloseModal}>\r\n                                        Попробовать снова\r\n                                        </Button>\r\n                                        )}\r\n                                        <Button onClick={handleCloseModal} color=\"primary\">\r\n                                        Назад\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                        </>\r\n                                        )\r\n                                        :\r\n                                        (\r\n                                            <>\r\n                                            <DialogTitle id=\"alert-dialog-slide-title\">Оплата персональной тренировки</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                                    <Typography gutterBottom paragraph>Внесите сведения об оплате наличными сейчас, нажав \"Оплатить\"</Typography>\r\n                                                </DialogContentText>\r\n                                            </DialogContent>\r\n                                            <DialogActions>\r\n                                                <Button onClick={()=>insertingInfo(cl,tren,selectedDate,zan)} component={Link} to=\"/clientPage\">\r\n                                                    Позже\r\n                                                </Button>\r\n                                                <Button onClick={()=>pay(sum, zan, tren, cl, selectedDate)} component={Link} to=\"/clientPage\">\r\n                                                    Оплатить\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            </>\r\n                                        )\r\n                                    }\r\n                                </Dialog>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </main>\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\GoogleMaps.js",["344"],"import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\n\r\nconst AnyReactComponent = ({ text }) => (\r\n    <div style={{\r\n        color: 'white',\r\n        background: 'red',\r\n        padding: '15px 10px',\r\n        display: 'inline-flex',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '100%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }}>\r\n        {text}\r\n    </div>\r\n);\r\nexport const GoogleMap=()=>{\r\n    const defaultProps = {\r\n        center: {\r\n            lat: 51.65633,\r\n            lng: 39.20608,\r\n        },\r\n        zoom: 15\r\n    };\r\n\r\n return (\r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    // bootstrapURLKeys={{ key:' \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",' }}\r\n                    defaultCenter={defaultProps.center}\r\n                    defaultZoom={defaultProps.zoom}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={51.656334}\r\n                        lng={39.206089}\r\n                        text=\"Мы здесь!\"\r\n                    />\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n}\r\n","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\ChatBot.js",[],"C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\pages\\ChangePage.js",["345","346","347","348","349","350","351","352","353","354","355","356"],"import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Link,} from \"react-router-dom\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(30),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        marginTop: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nexport const ChangePage = (props) => {\r\n    const {token} = useContext(AuthContext)\r\n    const curId=props.userId\r\n    console.log(\"текущий\",curId)\r\n    const upload = document.getElementById(\"upload\");\r\n    const {request, loading} = useHttp();\r\n    const [client, setClient] = useState([{}])\r\n    const [email, setEmail] = useState()\r\n    const [name, setName] = useState()\r\n    const [phone, setPhone] = useState()\r\n    const [password, setPassword] = useState()\r\n    const [file, setFile] = useState()\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [Modal, setModal] = useState(false)\r\n\r\n    const handleCloseModal = () => {\r\n        setModal(false);\r\n    };\r\n    const handleDateChange = (date) => {\r\n        console.log(date);\r\n        setSelectedDate(date);\r\n    }\r\n\r\n    const handleChangeName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    const handleChangePhone = (event) => {\r\n        setPhone(event.target.value);\r\n    }\r\n    const handleChangeEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const curCient = useCallback(async () => {\r\n        console.log(\"Функция\")\r\n        try {\r\n            const fetched = await request(`/api/changing/clientinfo/${curId}`, 'GET', null, {Authorization: `Bearer ${token}`})\r\n            console.log(\"F,jytvtyns\", fetched.result)\r\n            setClient(fetched.result)\r\n            setEmail(fetched.result[0].email)\r\n            setName(fetched.result[0].FIO_cl)\r\n            setPhone(fetched.result[0].Phone)\r\n            setSelectedDate(fetched.result[0].Age)\r\n            setFile(fetched.result[0].img)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [request, token, curId])\r\n    const changing = async (id,email,name, phone, date, img) => {\r\n       setModal(true)\r\n        console.log(img, \"img\")\r\n        const result = await toBase64(img)\r\n        console.log(\"Form data\", result)\r\n        try{\r\n            const fetched = await request(`/api/changing/changeinfo`, 'POST', {data: result, fileName: img.name, id,email,\r\n                name,\r\n                phone,\r\n                date})\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n    }\r\n    const toBase64 = file => new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n    const handleCapture = () => {\r\n        console.log(upload.files)\r\n        if (upload.files.length>0)\r\n            setFile(upload.files[0])\r\n    };\r\n    useEffect(() => {\r\n        curCient()\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                    Редактирование личного кабинета\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Заполните необходимую информацию:\r\n                </Typography>\r\n                {loading && <Loader/>}\r\n                {!loading && client.length != 0 && (\r\n                    <>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"email\" value={email} defaultValue={email}\r\n                                           onChange={handleChangeEmail}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"ФИО клиента\" value={name}\r\n                                           defaultValue={client.FIO_cl} onChange={handleChangeName}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField required id=\"standard-disabled\" label=\"Контактный телфон\" value={phone}\r\n                                           defaultValue={client.Phone} onChange={handleChangePhone}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        locale=\"ru\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-dialog\"\r\n                                        required\r\n                                        label=\"Дата Рождения\"\r\n                                        views={['year', 'month', 'date']}\r\n                                        defaultValue={client.Age}\r\n                                        value={selectedDate}\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        onChange={handleDateChange}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <FormHelperText required>Загрузить фото</FormHelperText>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    className={classes.input}\r\n                                    id=\"upload\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    onChange={handleCapture}\r\n                                    style={{display: 'none'}}\r\n                                />\r\n                                <label htmlFor=\"upload\" >\r\n                                    <Button variant=\"contained\" component=\"span\">\r\n                                        Загрузить\r\n                                    </Button>\r\n                                </label>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={6}>\r\n                                <Button component={Link} to=\"/clientPage\" onClick={() => {changing(curId,email, name, phone, selectedDate,file)\r\n                                }} color=\"primary\">\r\n                                    ВНЕСТИ ИЗМЕНЕНИЯ\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </main>\r\n    )\r\n}","C:\\Users\\Alina\\WebstormProjects\\testfit3\\client\\src\\components\\TrensCalendar.js",["357","358","359","360","361"],{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":21,"column":8,"nodeType":"368","endLine":21,"endColumn":10,"suggestions":"369"},{"ruleId":"370","severity":1,"message":"371","line":26,"column":15,"nodeType":"372","messageId":"373","endLine":26,"endColumn":20},{"ruleId":"370","severity":1,"message":"374","line":32,"column":15,"nodeType":"372","messageId":"373","endLine":32,"endColumn":26},{"ruleId":"370","severity":1,"message":"375","line":51,"column":7,"nodeType":"372","messageId":"373","endLine":51,"endColumn":16},{"ruleId":"370","severity":1,"message":"376","line":179,"column":23,"nodeType":"372","messageId":"373","endLine":179,"endColumn":35},{"ruleId":"370","severity":1,"message":"377","line":180,"column":21,"nodeType":"372","messageId":"373","endLine":180,"endColumn":31},{"ruleId":"378","severity":1,"message":"379","line":246,"column":9,"nodeType":"380","messageId":"381","endLine":255,"endColumn":10},{"ruleId":"366","severity":1,"message":"382","line":292,"column":8,"nodeType":"368","endLine":292,"endColumn":31,"suggestions":"383"},{"ruleId":"366","severity":1,"message":"384","line":309,"column":8,"nodeType":"368","endLine":309,"endColumn":10,"suggestions":"385"},{"ruleId":"366","severity":1,"message":"384","line":318,"column":8,"nodeType":"368","endLine":318,"endColumn":10,"suggestions":"386"},{"ruleId":"370","severity":1,"message":"387","line":323,"column":19,"nodeType":"372","messageId":"373","endLine":323,"endColumn":26},{"ruleId":"366","severity":1,"message":"384","line":336,"column":7,"nodeType":"368","endLine":336,"endColumn":9,"suggestions":"388"},{"ruleId":"366","severity":1,"message":"389","line":342,"column":12,"nodeType":"368","endLine":342,"endColumn":14,"suggestions":"390"},{"ruleId":"366","severity":1,"message":"391","line":345,"column":12,"nodeType":"368","endLine":345,"endColumn":14,"suggestions":"392"},{"ruleId":"366","severity":1,"message":"393","line":349,"column":12,"nodeType":"368","endLine":349,"endColumn":14,"suggestions":"394"},{"ruleId":"366","severity":1,"message":"395","line":352,"column":8,"nodeType":"368","endLine":352,"endColumn":10,"suggestions":"396"},{"ruleId":"397","severity":1,"message":"398","line":363,"column":52,"nodeType":"399","messageId":"400","endLine":363,"endColumn":54},{"ruleId":"397","severity":1,"message":"401","line":425,"column":33,"nodeType":"399","messageId":"400","endLine":425,"endColumn":35},{"ruleId":"397","severity":1,"message":"401","line":441,"column":33,"nodeType":"399","messageId":"400","endLine":441,"endColumn":35},{"ruleId":"397","severity":1,"message":"398","line":471,"column":60,"nodeType":"399","messageId":"400","endLine":471,"endColumn":62},{"ruleId":"397","severity":1,"message":"401","line":490,"column":62,"nodeType":"399","messageId":"400","endLine":490,"endColumn":64},{"ruleId":"397","severity":1,"message":"401","line":502,"column":62,"nodeType":"399","messageId":"400","endLine":502,"endColumn":64},{"ruleId":"397","severity":1,"message":"401","line":544,"column":62,"nodeType":"399","messageId":"400","endLine":544,"endColumn":64},{"ruleId":"397","severity":1,"message":"398","line":568,"column":58,"nodeType":"399","messageId":"400","endLine":568,"endColumn":60},{"ruleId":"397","severity":1,"message":"401","line":568,"column":74,"nodeType":"399","messageId":"400","endLine":568,"endColumn":76},{"ruleId":"397","severity":1,"message":"401","line":643,"column":35,"nodeType":"399","messageId":"400","endLine":643,"endColumn":37},{"ruleId":"397","severity":1,"message":"401","line":643,"column":57,"nodeType":"399","messageId":"400","endLine":643,"endColumn":59},{"ruleId":"370","severity":1,"message":"402","line":1,"column":16,"nodeType":"372","messageId":"373","endLine":1,"endColumn":27},{"ruleId":"370","severity":1,"message":"403","line":1,"column":41,"nodeType":"372","messageId":"373","endLine":1,"endColumn":50},{"ruleId":"370","severity":1,"message":"404","line":1,"column":52,"nodeType":"372","messageId":"373","endLine":1,"endColumn":60},{"ruleId":"370","severity":1,"message":"405","line":2,"column":17,"nodeType":"372","messageId":"373","endLine":2,"endColumn":29},{"ruleId":"370","severity":1,"message":"406","line":7,"column":8,"nodeType":"372","messageId":"373","endLine":7,"endColumn":14},{"ruleId":"370","severity":1,"message":"407","line":8,"column":8,"nodeType":"372","messageId":"373","endLine":8,"endColumn":16},{"ruleId":"370","severity":1,"message":"408","line":1,"column":16,"nodeType":"372","messageId":"373","endLine":1,"endColumn":26},{"ruleId":"370","severity":1,"message":"409","line":2,"column":9,"nodeType":"372","messageId":"373","endLine":2,"endColumn":15},{"ruleId":"370","severity":1,"message":"410","line":2,"column":27,"nodeType":"372","messageId":"373","endLine":2,"endColumn":34},{"ruleId":"370","severity":1,"message":"411","line":2,"column":36,"nodeType":"372","messageId":"373","endLine":2,"endColumn":46},{"ruleId":"370","severity":1,"message":"412","line":2,"column":59,"nodeType":"372","messageId":"373","endLine":2,"endColumn":62},{"ruleId":"370","severity":1,"message":"413","line":18,"column":9,"nodeType":"372","messageId":"373","endLine":18,"endColumn":27},{"ruleId":"370","severity":1,"message":"414","line":18,"column":29,"nodeType":"372","messageId":"373","endLine":18,"endColumn":47},{"ruleId":"370","severity":1,"message":"415","line":18,"column":49,"nodeType":"372","messageId":"373","endLine":18,"endColumn":72},{"ruleId":"370","severity":1,"message":"416","line":19,"column":8,"nodeType":"372","messageId":"373","endLine":19,"endColumn":20},{"ruleId":"370","severity":1,"message":"417","line":21,"column":8,"nodeType":"372","messageId":"373","endLine":21,"endColumn":21},{"ruleId":"366","severity":1,"message":"418","line":180,"column":8,"nodeType":"368","endLine":180,"endColumn":10,"suggestions":"419"},{"ruleId":"397","severity":1,"message":"398","line":235,"column":48,"nodeType":"399","messageId":"400","endLine":235,"endColumn":50},{"ruleId":"397","severity":1,"message":"401","line":285,"column":49,"nodeType":"399","messageId":"400","endLine":285,"endColumn":51},{"ruleId":"370","severity":1,"message":"408","line":1,"column":16,"nodeType":"372","messageId":"373","endLine":1,"endColumn":26},{"ruleId":"370","severity":1,"message":"412","line":3,"column":88,"nodeType":"372","messageId":"373","endLine":3,"endColumn":91},{"ruleId":"370","severity":1,"message":"420","line":12,"column":8,"nodeType":"372","messageId":"373","endLine":12,"endColumn":16},{"ruleId":"370","severity":1,"message":"406","line":22,"column":8,"nodeType":"372","messageId":"373","endLine":22,"endColumn":14},{"ruleId":"370","severity":1,"message":"421","line":85,"column":21,"nodeType":"372","messageId":"373","endLine":85,"endColumn":26},{"ruleId":"370","severity":1,"message":"422","line":85,"column":37,"nodeType":"372","messageId":"373","endLine":85,"endColumn":47},{"ruleId":"366","severity":1,"message":"423","line":173,"column":8,"nodeType":"368","endLine":173,"endColumn":10,"suggestions":"424"},{"ruleId":"397","severity":1,"message":"398","line":226,"column":49,"nodeType":"399","messageId":"400","endLine":226,"endColumn":51},{"ruleId":"397","severity":1,"message":"401","line":271,"column":49,"nodeType":"399","messageId":"400","endLine":271,"endColumn":51},{"ruleId":"370","severity":1,"message":"425","line":183,"column":11,"nodeType":"372","messageId":"373","endLine":183,"endColumn":16},{"ruleId":"366","severity":1,"message":"426","line":206,"column":8,"nodeType":"368","endLine":206,"endColumn":10,"suggestions":"427"},{"ruleId":"366","severity":1,"message":"428","line":209,"column":8,"nodeType":"368","endLine":209,"endColumn":10,"suggestions":"429"},{"ruleId":"397","severity":1,"message":"398","line":295,"column":61,"nodeType":"399","messageId":"400","endLine":295,"endColumn":63},{"ruleId":"370","severity":1,"message":"421","line":91,"column":21,"nodeType":"372","messageId":"373","endLine":91,"endColumn":26},{"ruleId":"370","severity":1,"message":"422","line":91,"column":37,"nodeType":"372","messageId":"373","endLine":91,"endColumn":47},{"ruleId":"366","severity":1,"message":"430","line":184,"column":8,"nodeType":"368","endLine":184,"endColumn":31,"suggestions":"431"},{"ruleId":"366","severity":1,"message":"432","line":188,"column":8,"nodeType":"368","endLine":188,"endColumn":10,"suggestions":"433"},{"ruleId":"397","severity":1,"message":"398","line":240,"column":49,"nodeType":"399","messageId":"400","endLine":240,"endColumn":51},{"ruleId":"362","replacedBy":"434"},{"ruleId":"364","replacedBy":"435"},{"ruleId":"370","severity":1,"message":"436","line":4,"column":10,"nodeType":"372","messageId":"373","endLine":4,"endColumn":19},{"ruleId":"370","severity":1,"message":"437","line":4,"column":21,"nodeType":"372","messageId":"373","endLine":4,"endColumn":25},{"ruleId":"370","severity":1,"message":"438","line":4,"column":80,"nodeType":"372","messageId":"373","endLine":4,"endColumn":86},{"ruleId":"370","severity":1,"message":"439","line":4,"column":88,"nodeType":"372","messageId":"373","endLine":4,"endColumn":107},{"ruleId":"370","severity":1,"message":"409","line":7,"column":8,"nodeType":"372","messageId":"373","endLine":7,"endColumn":14},{"ruleId":"366","severity":1,"message":"440","line":44,"column":8,"nodeType":"368","endLine":44,"endColumn":10,"suggestions":"441"},{"ruleId":"366","severity":1,"message":"442","line":48,"column":8,"nodeType":"368","endLine":48,"endColumn":10,"suggestions":"443"},{"ruleId":"370","severity":1,"message":"444","line":52,"column":11,"nodeType":"372","messageId":"373","endLine":52,"endColumn":18},{"ruleId":"397","severity":1,"message":"398","line":57,"column":49,"nodeType":"399","messageId":"400","endLine":57,"endColumn":51},{"ruleId":"370","severity":1,"message":"408","line":1,"column":16,"nodeType":"372","messageId":"373","endLine":1,"endColumn":26},{"ruleId":"370","severity":1,"message":"403","line":1,"column":28,"nodeType":"372","messageId":"373","endLine":1,"endColumn":37},{"ruleId":"370","severity":1,"message":"445","line":11,"column":8,"nodeType":"372","messageId":"373","endLine":11,"endColumn":13},{"ruleId":"370","severity":1,"message":"446","line":16,"column":8,"nodeType":"372","messageId":"373","endLine":16,"endColumn":18},{"ruleId":"370","severity":1,"message":"447","line":17,"column":8,"nodeType":"372","messageId":"373","endLine":17,"endColumn":20},{"ruleId":"370","severity":1,"message":"448","line":18,"column":8,"nodeType":"372","messageId":"373","endLine":18,"endColumn":14},{"ruleId":"370","severity":1,"message":"374","line":20,"column":9,"nodeType":"372","messageId":"373","endLine":20,"endColumn":20},{"ruleId":"370","severity":1,"message":"449","line":47,"column":20,"nodeType":"372","messageId":"373","endLine":47,"endColumn":27},{"ruleId":"370","severity":1,"message":"408","line":1,"column":16,"nodeType":"372","messageId":"373","endLine":1,"endColumn":26},{"ruleId":"370","severity":1,"message":"449","line":46,"column":21,"nodeType":"372","messageId":"373","endLine":46,"endColumn":28},{"ruleId":"366","severity":1,"message":"450","line":66,"column":15,"nodeType":"451","endLine":78,"endColumn":6},{"ruleId":"366","severity":1,"message":"452","line":78,"column":8,"nodeType":"368","endLine":78,"endColumn":10,"suggestions":"453"},{"ruleId":"370","severity":1,"message":"408","line":1,"column":29,"nodeType":"372","messageId":"373","endLine":1,"endColumn":39},{"ruleId":"370","severity":1,"message":"454","line":2,"column":8,"nodeType":"372","messageId":"373","endLine":2,"endColumn":19},{"ruleId":"370","severity":1,"message":"406","line":4,"column":8,"nodeType":"372","messageId":"373","endLine":4,"endColumn":14},{"ruleId":"370","severity":1,"message":"455","line":7,"column":8,"nodeType":"372","messageId":"373","endLine":7,"endColumn":16},{"ruleId":"370","severity":1,"message":"456","line":9,"column":8,"nodeType":"372","messageId":"373","endLine":9,"endColumn":17},{"ruleId":"370","severity":1,"message":"414","line":16,"column":29,"nodeType":"372","messageId":"373","endLine":16,"endColumn":47},{"ruleId":"370","severity":1,"message":"457","line":18,"column":9,"nodeType":"372","messageId":"373","endLine":18,"endColumn":20},{"ruleId":"370","severity":1,"message":"411","line":22,"column":8,"nodeType":"372","messageId":"373","endLine":22,"endColumn":18},{"ruleId":"370","severity":1,"message":"458","line":23,"column":9,"nodeType":"372","messageId":"373","endLine":23,"endColumn":20},{"ruleId":"370","severity":1,"message":"459","line":73,"column":12,"nodeType":"372","messageId":"373","endLine":73,"endColumn":19},{"ruleId":"366","severity":1,"message":"384","line":133,"column":8,"nodeType":"368","endLine":133,"endColumn":10,"suggestions":"460"},{"ruleId":"370","severity":1,"message":"387","line":140,"column":18,"nodeType":"372","messageId":"373","endLine":140,"endColumn":25},{"ruleId":"397","severity":1,"message":"401","line":154,"column":16,"nodeType":"399","messageId":"400","endLine":154,"endColumn":18},{"ruleId":"461","severity":1,"message":"462","line":154,"column":68,"nodeType":"372","messageId":"463","endLine":154,"endColumn":74},{"ruleId":"397","severity":1,"message":"401","line":155,"column":12,"nodeType":"399","messageId":"400","endLine":155,"endColumn":14},{"ruleId":"461","severity":1,"message":"464","line":155,"column":53,"nodeType":"372","messageId":"463","endLine":155,"endColumn":55},{"ruleId":"366","severity":1,"message":"384","line":172,"column":8,"nodeType":"368","endLine":172,"endColumn":10,"suggestions":"465"},{"ruleId":"366","severity":1,"message":"466","line":186,"column":8,"nodeType":"368","endLine":186,"endColumn":10,"suggestions":"467"},{"ruleId":"366","severity":1,"message":"468","line":189,"column":8,"nodeType":"368","endLine":189,"endColumn":10,"suggestions":"469"},{"ruleId":"397","severity":1,"message":"401","line":191,"column":20,"nodeType":"399","messageId":"400","endLine":191,"endColumn":22},{"ruleId":"366","severity":1,"message":"470","line":193,"column":8,"nodeType":"368","endLine":193,"endColumn":10,"suggestions":"471"},{"ruleId":"397","severity":1,"message":"398","line":206,"column":48,"nodeType":"399","messageId":"400","endLine":206,"endColumn":50},{"ruleId":"397","severity":1,"message":"398","line":244,"column":75,"nodeType":"399","messageId":"400","endLine":244,"endColumn":77},{"ruleId":"370","severity":1,"message":"409","line":12,"column":8,"nodeType":"372","messageId":"373","endLine":12,"endColumn":14},{"ruleId":"370","severity":1,"message":"472","line":15,"column":8,"nodeType":"372","messageId":"373","endLine":15,"endColumn":19},{"ruleId":"370","severity":1,"message":"420","line":16,"column":8,"nodeType":"372","messageId":"373","endLine":16,"endColumn":16},{"ruleId":"370","severity":1,"message":"473","line":17,"column":8,"nodeType":"372","messageId":"373","endLine":17,"endColumn":13},{"ruleId":"370","severity":1,"message":"474","line":18,"column":8,"nodeType":"372","messageId":"373","endLine":18,"endColumn":14},{"ruleId":"370","severity":1,"message":"414","line":20,"column":29,"nodeType":"372","messageId":"373","endLine":20,"endColumn":47},{"ruleId":"370","severity":1,"message":"457","line":22,"column":9,"nodeType":"372","messageId":"373","endLine":22,"endColumn":20},{"ruleId":"370","severity":1,"message":"448","line":26,"column":8,"nodeType":"372","messageId":"373","endLine":26,"endColumn":14},{"ruleId":"370","severity":1,"message":"475","line":27,"column":8,"nodeType":"372","messageId":"373","endLine":27,"endColumn":21},{"ruleId":"397","severity":1,"message":"401","line":111,"column":16,"nodeType":"399","messageId":"400","endLine":111,"endColumn":18},{"ruleId":"461","severity":1,"message":"462","line":111,"column":64,"nodeType":"372","messageId":"463","endLine":111,"endColumn":70},{"ruleId":"397","severity":1,"message":"401","line":112,"column":12,"nodeType":"399","messageId":"400","endLine":112,"endColumn":14},{"ruleId":"461","severity":1,"message":"464","line":112,"column":48,"nodeType":"372","messageId":"463","endLine":112,"endColumn":50},{"ruleId":"366","severity":1,"message":"384","line":131,"column":8,"nodeType":"368","endLine":131,"endColumn":10,"suggestions":"476"},{"ruleId":"366","severity":1,"message":"477","line":142,"column":8,"nodeType":"368","endLine":142,"endColumn":10,"suggestions":"478"},{"ruleId":"366","severity":1,"message":"384","line":151,"column":8,"nodeType":"368","endLine":151,"endColumn":10,"suggestions":"479"},{"ruleId":"366","severity":1,"message":"384","line":160,"column":8,"nodeType":"368","endLine":160,"endColumn":10,"suggestions":"480"},{"ruleId":"397","severity":1,"message":"401","line":162,"column":17,"nodeType":"399","messageId":"400","endLine":162,"endColumn":19},{"ruleId":"366","severity":1,"message":"481","line":163,"column":8,"nodeType":"368","endLine":163,"endColumn":10,"suggestions":"482"},{"ruleId":"366","severity":1,"message":"483","line":166,"column":8,"nodeType":"368","endLine":166,"endColumn":10,"suggestions":"484"},{"ruleId":"366","severity":1,"message":"466","line":169,"column":8,"nodeType":"368","endLine":169,"endColumn":10,"suggestions":"485"},{"ruleId":"397","severity":1,"message":"398","line":174,"column":110,"nodeType":"399","messageId":"400","endLine":174,"endColumn":112},{"ruleId":"397","severity":1,"message":"401","line":185,"column":42,"nodeType":"399","messageId":"400","endLine":185,"endColumn":44},{"ruleId":"397","severity":1,"message":"401","line":185,"column":59,"nodeType":"399","messageId":"400","endLine":185,"endColumn":61},{"ruleId":"397","severity":1,"message":"401","line":191,"column":41,"nodeType":"399","messageId":"400","endLine":191,"endColumn":43},{"ruleId":"370","severity":1,"message":"454","line":2,"column":8,"nodeType":"372","messageId":"373","endLine":2,"endColumn":19},{"ruleId":"370","severity":1,"message":"486","line":3,"column":8,"nodeType":"372","messageId":"373","endLine":3,"endColumn":17},{"ruleId":"370","severity":1,"message":"406","line":4,"column":8,"nodeType":"372","messageId":"373","endLine":4,"endColumn":14},{"ruleId":"370","severity":1,"message":"455","line":7,"column":8,"nodeType":"372","messageId":"373","endLine":7,"endColumn":16},{"ruleId":"370","severity":1,"message":"456","line":9,"column":8,"nodeType":"372","messageId":"373","endLine":9,"endColumn":17},{"ruleId":"370","severity":1,"message":"487","line":14,"column":8,"nodeType":"372","messageId":"373","endLine":14,"endColumn":24},{"ruleId":"370","severity":1,"message":"488","line":15,"column":8,"nodeType":"372","messageId":"373","endLine":15,"endColumn":16},{"ruleId":"370","severity":1,"message":"413","line":16,"column":9,"nodeType":"372","messageId":"373","endLine":16,"endColumn":27},{"ruleId":"370","severity":1,"message":"414","line":16,"column":29,"nodeType":"372","messageId":"373","endLine":16,"endColumn":47},{"ruleId":"370","severity":1,"message":"415","line":16,"column":49,"nodeType":"372","messageId":"373","endLine":16,"endColumn":72},{"ruleId":"370","severity":1,"message":"416","line":17,"column":8,"nodeType":"372","messageId":"373","endLine":17,"endColumn":20},{"ruleId":"370","severity":1,"message":"374","line":18,"column":9,"nodeType":"372","messageId":"373","endLine":18,"endColumn":20},{"ruleId":"370","severity":1,"message":"457","line":18,"column":22,"nodeType":"372","messageId":"373","endLine":18,"endColumn":33},{"ruleId":"370","severity":1,"message":"489","line":21,"column":8,"nodeType":"372","messageId":"373","endLine":21,"endColumn":15},{"ruleId":"370","severity":1,"message":"411","line":22,"column":8,"nodeType":"372","messageId":"373","endLine":22,"endColumn":18},{"ruleId":"370","severity":1,"message":"458","line":23,"column":9,"nodeType":"372","messageId":"373","endLine":23,"endColumn":20},{"ruleId":"370","severity":1,"message":"490","line":24,"column":8,"nodeType":"372","messageId":"373","endLine":24,"endColumn":19},{"ruleId":"370","severity":1,"message":"491","line":25,"column":8,"nodeType":"372","messageId":"373","endLine":25,"endColumn":21},{"ruleId":"370","severity":1,"message":"492","line":26,"column":8,"nodeType":"372","messageId":"373","endLine":26,"endColumn":25},{"ruleId":"370","severity":1,"message":"493","line":27,"column":9,"nodeType":"372","messageId":"373","endLine":27,"endColumn":16},{"ruleId":"370","severity":1,"message":"494","line":28,"column":8,"nodeType":"372","messageId":"373","endLine":28,"endColumn":14},{"ruleId":"370","severity":1,"message":"495","line":31,"column":8,"nodeType":"372","messageId":"373","endLine":31,"endColumn":22},{"ruleId":"370","severity":1,"message":"448","line":32,"column":8,"nodeType":"372","messageId":"373","endLine":32,"endColumn":14},{"ruleId":"370","severity":1,"message":"475","line":33,"column":8,"nodeType":"372","messageId":"373","endLine":33,"endColumn":21},{"ruleId":"370","severity":1,"message":"496","line":66,"column":12,"nodeType":"372","messageId":"373","endLine":66,"endColumn":17},{"ruleId":"366","severity":1,"message":"384","line":94,"column":8,"nodeType":"368","endLine":94,"endColumn":10,"suggestions":"497"},{"ruleId":"370","severity":1,"message":"498","line":96,"column":9,"nodeType":"372","messageId":"373","endLine":96,"endColumn":11},{"ruleId":"397","severity":1,"message":"401","line":98,"column":15,"nodeType":"399","messageId":"400","endLine":98,"endColumn":17},{"ruleId":"397","severity":1,"message":"401","line":107,"column":13,"nodeType":"399","messageId":"400","endLine":107,"endColumn":15},{"ruleId":"397","severity":1,"message":"401","line":120,"column":15,"nodeType":"399","messageId":"400","endLine":120,"endColumn":17},{"ruleId":"370","severity":1,"message":"387","line":122,"column":23,"nodeType":"372","messageId":"373","endLine":122,"endColumn":30},{"ruleId":"370","severity":1,"message":"387","line":129,"column":23,"nodeType":"372","messageId":"373","endLine":129,"endColumn":30},{"ruleId":"366","severity":1,"message":"499","line":141,"column":8,"nodeType":"368","endLine":141,"endColumn":10,"suggestions":"500"},{"ruleId":"397","severity":1,"message":"398","line":154,"column":45,"nodeType":"399","messageId":"400","endLine":154,"endColumn":47},{"ruleId":"397","severity":1,"message":"401","line":193,"column":45,"nodeType":"399","messageId":"400","endLine":193,"endColumn":47},{"ruleId":"370","severity":1,"message":"408","line":1,"column":29,"nodeType":"372","messageId":"373","endLine":1,"endColumn":39},{"ruleId":"370","severity":1,"message":"454","line":2,"column":8,"nodeType":"372","messageId":"373","endLine":2,"endColumn":19},{"ruleId":"370","severity":1,"message":"486","line":3,"column":8,"nodeType":"372","messageId":"373","endLine":3,"endColumn":17},{"ruleId":"370","severity":1,"message":"406","line":4,"column":8,"nodeType":"372","messageId":"373","endLine":4,"endColumn":14},{"ruleId":"370","severity":1,"message":"455","line":7,"column":8,"nodeType":"372","messageId":"373","endLine":7,"endColumn":16},{"ruleId":"370","severity":1,"message":"456","line":9,"column":8,"nodeType":"372","messageId":"373","endLine":9,"endColumn":17},{"ruleId":"370","severity":1,"message":"487","line":14,"column":8,"nodeType":"372","messageId":"373","endLine":14,"endColumn":24},{"ruleId":"370","severity":1,"message":"488","line":15,"column":8,"nodeType":"372","messageId":"373","endLine":15,"endColumn":16},{"ruleId":"370","severity":1,"message":"374","line":18,"column":9,"nodeType":"372","messageId":"373","endLine":18,"endColumn":20},{"ruleId":"370","severity":1,"message":"457","line":18,"column":22,"nodeType":"372","messageId":"373","endLine":18,"endColumn":33},{"ruleId":"370","severity":1,"message":"489","line":21,"column":8,"nodeType":"372","messageId":"373","endLine":21,"endColumn":15},{"ruleId":"370","severity":1,"message":"411","line":22,"column":8,"nodeType":"372","messageId":"373","endLine":22,"endColumn":18},{"ruleId":"370","severity":1,"message":"458","line":23,"column":9,"nodeType":"372","messageId":"373","endLine":23,"endColumn":20},{"ruleId":"370","severity":1,"message":"493","line":27,"column":9,"nodeType":"372","messageId":"373","endLine":27,"endColumn":16},{"ruleId":"370","severity":1,"message":"501","line":29,"column":9,"nodeType":"372","messageId":"373","endLine":29,"endColumn":20},{"ruleId":"370","severity":1,"message":"502","line":30,"column":9,"nodeType":"372","messageId":"373","endLine":30,"endColumn":17},{"ruleId":"370","severity":1,"message":"495","line":31,"column":8,"nodeType":"372","messageId":"373","endLine":31,"endColumn":22},{"ruleId":"370","severity":1,"message":"448","line":32,"column":8,"nodeType":"372","messageId":"373","endLine":32,"endColumn":14},{"ruleId":"370","severity":1,"message":"407","line":35,"column":8,"nodeType":"372","messageId":"373","endLine":35,"endColumn":16},{"ruleId":"370","severity":1,"message":"446","line":36,"column":8,"nodeType":"372","messageId":"373","endLine":36,"endColumn":18},{"ruleId":"370","severity":1,"message":"447","line":37,"column":8,"nodeType":"372","messageId":"373","endLine":37,"endColumn":20},{"ruleId":"370","severity":1,"message":"387","line":99,"column":19,"nodeType":"372","messageId":"373","endLine":99,"endColumn":26},{"ruleId":"366","severity":1,"message":"384","line":131,"column":8,"nodeType":"368","endLine":131,"endColumn":10,"suggestions":"503"},{"ruleId":"366","severity":1,"message":"384","line":140,"column":8,"nodeType":"368","endLine":140,"endColumn":10,"suggestions":"504"},{"ruleId":"366","severity":1,"message":"384","line":151,"column":8,"nodeType":"368","endLine":151,"endColumn":10,"suggestions":"505"},{"ruleId":"366","severity":1,"message":"499","line":175,"column":8,"nodeType":"368","endLine":175,"endColumn":10,"suggestions":"506"},{"ruleId":"366","severity":1,"message":"507","line":178,"column":8,"nodeType":"368","endLine":178,"endColumn":10,"suggestions":"508"},{"ruleId":"366","severity":1,"message":"509","line":181,"column":8,"nodeType":"368","endLine":181,"endColumn":10,"suggestions":"510"},{"ruleId":"397","severity":1,"message":"398","line":193,"column":45,"nodeType":"399","messageId":"400","endLine":193,"endColumn":47},{"ruleId":"397","severity":1,"message":"398","line":193,"column":67,"nodeType":"399","messageId":"400","endLine":193,"endColumn":69},{"ruleId":"397","severity":1,"message":"398","line":193,"column":88,"nodeType":"399","messageId":"400","endLine":193,"endColumn":90},{"ruleId":"397","severity":1,"message":"401","line":286,"column":49,"nodeType":"399","messageId":"400","endLine":286,"endColumn":51},{"ruleId":"370","severity":1,"message":"511","line":1,"column":17,"nodeType":"372","messageId":"373","endLine":1,"endColumn":26},{"ruleId":"370","severity":1,"message":"414","line":10,"column":29,"nodeType":"372","messageId":"373","endLine":10,"endColumn":47},{"ruleId":"370","severity":1,"message":"490","line":13,"column":8,"nodeType":"372","messageId":"373","endLine":13,"endColumn":19},{"ruleId":"370","severity":1,"message":"491","line":14,"column":8,"nodeType":"372","messageId":"373","endLine":14,"endColumn":21},{"ruleId":"370","severity":1,"message":"494","line":15,"column":8,"nodeType":"372","messageId":"373","endLine":15,"endColumn":14},{"ruleId":"370","severity":1,"message":"475","line":16,"column":8,"nodeType":"372","messageId":"373","endLine":16,"endColumn":21},{"ruleId":"370","severity":1,"message":"512","line":58,"column":12,"nodeType":"372","messageId":"373","endLine":58,"endColumn":20},{"ruleId":"370","severity":1,"message":"513","line":58,"column":22,"nodeType":"372","messageId":"373","endLine":58,"endColumn":33},{"ruleId":"370","severity":1,"message":"514","line":61,"column":12,"nodeType":"372","messageId":"373","endLine":61,"endColumn":17},{"ruleId":"370","severity":1,"message":"515","line":63,"column":11,"nodeType":"372","messageId":"373","endLine":63,"endColumn":27},{"ruleId":"370","severity":1,"message":"387","line":101,"column":19,"nodeType":"372","messageId":"373","endLine":101,"endColumn":26},{"ruleId":"366","severity":1,"message":"516","line":123,"column":8,"nodeType":"368","endLine":123,"endColumn":10,"suggestions":"517"},{"ruleId":"397","severity":1,"message":"398","line":136,"column":44,"nodeType":"399","messageId":"400","endLine":136,"endColumn":46},{"ruleId":"370","severity":1,"message":"518","line":1,"column":36,"nodeType":"372","messageId":"373","endLine":1,"endColumn":41},{"ruleId":"366","severity":1,"message":"384","line":30,"column":8,"nodeType":"368","endLine":30,"endColumn":10,"suggestions":"519"},{"ruleId":"366","severity":1,"message":"520","line":34,"column":8,"nodeType":"368","endLine":34,"endColumn":10,"suggestions":"521"},{"ruleId":"370","severity":1,"message":"522","line":36,"column":11,"nodeType":"372","messageId":"373","endLine":36,"endColumn":22},{"ruleId":"397","severity":1,"message":"398","line":46,"column":38,"nodeType":"399","messageId":"400","endLine":46,"endColumn":40},"no-native-reassign",["523"],"no-negated-in-lhs",["524"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["525"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'CardActions' is defined but never used.","'formatter' is assigned a value but never used.","'setAdminForm' is assigned a value but never used.","'setPayInfo' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useCallback has a missing dependency: 'adminForm'. Either include it or remove the dependency array.",["526"],"React Hook useCallback has a missing dependency: 'request'. Either include it or remove the dependency array.",["527"],["528"],"'fetched' is assigned a value but never used.",["529"],"React Hook useEffect has missing dependencies: 'admin', 'allrole', and 'roles'. Either include them or remove the dependency array.",["530"],"React Hook useEffect has a missing dependency: 'trener'. Either include it or remove the dependency array.",["531"],"React Hook useEffect has missing dependencies: 'client' and 'clientsTren'. Either include them or remove the dependency array.",["532"],"React Hook useEffect has a missing dependency: 'allClientsInfo'. Either include it or remove the dependency array.",["533"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'linkMaterial' is defined but never used.","'Avatar' is defined but never used.","'ListItem' is defined but never used.","'useContext' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Box' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'DateFnsUtils' is defined but never used.","'useMediaQuery' is defined but never used.","React Hook useEffect has a missing dependency: 'treners'. Either include it or remove the dependency array.",["534"],"'MenuItem' is defined but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'zanytie'. Either include it or remove the dependency array.",["535"],"'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.",["536"],"React Hook useEffect has a missing dependency: 'infoTrener'. Either include it or remove the dependency array.",["537"],"React Hook useCallback has an unnecessary dependency: 'curId'. Either exclude it or remove the dependency array.",["538"],"React Hook useEffect has a missing dependency: 'nouting'. Either include it or remove the dependency array.",["539"],["523"],["524"],"'LineChart' is defined but never used.","'Line' is defined but never used.","'Legend' is defined but never used.","'ResponsiveContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["540"],"React Hook useEffect has a missing dependency: 'trenData'. Either include it or remove the dependency array.",["541"],"'classes' is assigned a value but never used.","'Paper' is defined but never used.","'PersonIcon' is defined but never used.","'ScheduleIcon' is defined but never used.","'moment' is defined but never used.","'loading' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'props.match.params.token' and 'request'. Either include them or remove the dependency array.",["542"],"'CssBaseline' is defined but never used.","'LockIcon' is defined but never used.","'Container' is defined but never used.","'CardContent' is defined but never used.","'PhotoCamera' is defined but never used.","'newRole' is assigned a value but never used.",["543"],"no-self-assign","'idabon' is assigned to itself.","selfAssignment","'sr' is assigned to itself.",["544"],"React Hook useEffect has a missing dependency: 'srok'. Either include it or remove the dependency array.",["545"],"React Hook useEffect has a missing dependency: 'abons'. Either include it or remove the dependency array.",["546"],"React Hook useEffect has missing dependencies: 'allrole' and 'curRole'. Either include them or remove the dependency array.",["547"],"'FormControl' is defined but never used.","'Input' is defined but never used.","'Select' is defined but never used.","'DialogActions' is defined but never used.",["548"],"React Hook useCallback has missing dependencies: 'curId', 'request', and 'token'. Either include them or remove the dependency array.",["549"],["550"],["551"],"React Hook useEffect has missing dependencies: 'allClient', 'client', and 'curRole'. Either include them or remove the dependency array.",["552"],"React Hook useEffect has a missing dependency: 'abonement'. Either include it or remove the dependency array.",["553"],["554"],"'TextField' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Tooltip' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'PayForm' is defined but never used.","'Dialog' is defined but never used.","'AccessTimeIcon' is defined but never used.","'token' is assigned a value but never used.",["555"],"'fl' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allClient'. Either include it or remove the dependency array.",["556"],"'AuthContext' is defined but never used.","'DataGrid' is defined but never used.",["557"],["558"],["559"],["560"],"React Hook useEffect has a missing dependency: 'allZanytie'. Either include it or remove the dependency array.",["561"],"React Hook useEffect has a missing dependency: 'allTreners'. Either include it or remove the dependency array.",["562"],"'Component' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'Modal' is assigned a value but never used.","'handleCloseModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'curCient'. Either include it or remove the dependency array.",["563"],"'Views' is defined but never used.",["564"],"React Hook useEffect has a missing dependency: 'trensInfo'. Either include it or remove the dependency array.",["565"],"'myEventList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"570","fix":"572"},{"desc":"570","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"570","fix":"600"},{"desc":"570","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"570","fix":"608"},{"desc":"609","fix":"610"},{"desc":"570","fix":"611"},{"desc":"570","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"602","fix":"617"},{"desc":"570","fix":"618"},{"desc":"619","fix":"620"},{"desc":"570","fix":"621"},{"desc":"570","fix":"622"},{"desc":"570","fix":"623"},{"desc":"619","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"570","fix":"631"},{"desc":"632","fix":"633"},"Update the dependencies array to be: [token]",{"range":"634","text":"635"},"Update the dependencies array to be: [request, curId, token, adminForm]",{"range":"636","text":"637"},"Update the dependencies array to be: [request]",{"range":"638","text":"639"},{"range":"640","text":"639"},{"range":"641","text":"639"},"Update the dependencies array to be: [admin, allrole, roles]",{"range":"642","text":"643"},"Update the dependencies array to be: [trener]",{"range":"644","text":"645"},"Update the dependencies array to be: [client, clientsTren]",{"range":"646","text":"647"},"Update the dependencies array to be: [allClientsInfo]",{"range":"648","text":"649"},"Update the dependencies array to be: [treners]",{"range":"650","text":"651"},"Update the dependencies array to be: [zanytie]",{"range":"652","text":"653"},"Update the dependencies array to be: [info]",{"range":"654","text":"655"},"Update the dependencies array to be: [infoTrener]",{"range":"656","text":"657"},"Update the dependencies array to be: [request, token]",{"range":"658","text":"659"},"Update the dependencies array to be: [nouting]",{"range":"660","text":"661"},"Update the dependencies array to be: [data]",{"range":"662","text":"663"},"Update the dependencies array to be: [trenData]",{"range":"664","text":"665"},"Update the dependencies array to be: [props.match.params.token, request]",{"range":"666","text":"667"},{"range":"668","text":"639"},{"range":"669","text":"639"},"Update the dependencies array to be: [srok]",{"range":"670","text":"671"},"Update the dependencies array to be: [abons]",{"range":"672","text":"673"},"Update the dependencies array to be: [allrole, curRole]",{"range":"674","text":"675"},{"range":"676","text":"639"},"Update the dependencies array to be: [curId, request, token]",{"range":"677","text":"678"},{"range":"679","text":"639"},{"range":"680","text":"639"},"Update the dependencies array to be: [allClient, client, curRole]",{"range":"681","text":"682"},"Update the dependencies array to be: [abonement]",{"range":"683","text":"684"},{"range":"685","text":"671"},{"range":"686","text":"639"},"Update the dependencies array to be: [allClient]",{"range":"687","text":"688"},{"range":"689","text":"639"},{"range":"690","text":"639"},{"range":"691","text":"639"},{"range":"692","text":"688"},"Update the dependencies array to be: [allZanytie]",{"range":"693","text":"694"},"Update the dependencies array to be: [allTreners]",{"range":"695","text":"696"},"Update the dependencies array to be: [curCient]",{"range":"697","text":"698"},{"range":"699","text":"639"},"Update the dependencies array to be: [trensInfo]",{"range":"700","text":"701"},[780,782],"[token]",[10005,10028],"[request, curId, token, adminForm]",[10672,10674],"[request]",[10987,10989],[11625,11627],[11735,11737],"[admin, allrole, roles]",[11800,11802],"[trener]",[11892,11894],"[client, clientsTren]",[11952,11954],"[allClientsInfo]",[5943,5945],"[treners]",[5691,5693],"[zanytie]",[5832,5834],"[info]",[5889,5891],"[infoTrener]",[5925,5948],"[request, token]",[6002,6004],"[nouting]",[1407,1409],"[data]",[1464,1466],"[trenData]",[2584,2586],"[props.match.params.token, request]",[5008,5010],[6355,6357],[6820,6822],"[srok]",[6872,6874],"[abons]",[6957,6959],"[allrole, curRole]",[5011,5013],[5404,5406],"[curId, request, token]",[5727,5729],[6035,6037],[6123,6125],"[allClient, client, curRole]",[6179,6181],"[abonement]",[6230,6232],[3667,3669],[5034,5036],"[allClient]",[4986,4988],[5294,5296],[5619,5621],[6248,6250],[6305,6307],"[allZanytie]",[6362,6364],"[allTreners]",[4448,4450],"[curCient]",[977,979],[1035,1037],"[trensInfo]"]